
@online{centerforhistoryandnewmediaZoteroQuickStart,
  title = {Zotero {{Quick Start Guide}}},
  url = {http://zotero.org/support/quick_start_guide},
  author = {{Center for History and New Media}}
}

@online{OnlineDiagramSaaS,
  title = {Online {{Diagram SaaS Software}}},
  url = {https://www.gliffy.com/products/online/},
  abstract = {Improve Collaboration with Gliffy In-Browser Web Editor. Start your Business Trial Today and Join Over 3M Users who use our software.},
  journaltitle = {Gliffy},
  urldate = {2016-08-31}
}

@article{makreshanskiMQJoinEfficientShared2016,
  title = {{{MQJoin}}: Efficient Shared Execution of Main-Memory Joins},
  volume = {9},
  url = {http://dl.acm.org/citation.cfm?id=2904124},
  shorttitle = {{{MQJoin}}},
  number = {6},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-09-14},
  date = {2016},
  pages = {480--491},
  author = {Makreshanski, Darko and Giannikis, Georgios and Alonso, Gustavo and Kossmann, Donald},
  file = {/home/amos/Zotero/storage/MXTT6SX2/Makreshanski et al. - 2016 - MQJoin efficient shared execution of main-memory .pdf}
}

@article{aguileraManyFacesConsistency2016,
  title = {The Many Faces of Consistency},
  url = {http://sites.computer.org/debull/A16mar/p3.pdf},
  journaltitle = {Data Engineering},
  urldate = {2017-01-17},
  date = {2016},
  pages = {3},
  author = {Aguilera, Marcos K. and Terry, Douglas B.},
  file = {/home/amos/Zotero/storage/WUSEJK89/p3.pdf}
}

@article{leisEfficientProcessingWindow2015,
  title = {Efficient Processing of Window Functions in Analytical {{SQL}} Queries},
  volume = {8},
  url = {http://dl.acm.org/citation.cfm?id=2794375},
  number = {10},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2015},
  pages = {1058--1069},
  author = {Leis, Viktor and Kundhikanjana, Kan and Kemper, Alfons and Neumann, Thomas},
  file = {/home/amos/Zotero/storage/BXN8F6EF/p1058-leis.pdf}
}

@article{ozcanBulletinTechnicalCommittee,
  title = {Bulletin of the {{Technical Committee}} on Data Engineering},
  volume = {51},
  journaltitle = {Urbana},
  pages = {61801},
  author = {Ozcan, Fatma and Nural, Sena and Koksal, Pinar and Altinel, Mehmet and Dogac, Asuman},
  file = {/home/amos/Zotero/storage/TM323JQR/Ozcan et al. - Bulletin of the Technical Committee on data engine.pdf}
}

@article{kendallNoteDistributedComputing1994,
  title = {A Note on Distributed Computing},
  url = {http://dl.acm.org/citation.cfm?id=974938},
  urldate = {2016-12-21},
  date = {1994},
  author = {Kendall, Samuel C. and Waldo, Jim and Wollrath, Ann and Wyant, Geoff},
  file = {/home/amos/Zotero/storage/5IM5CQMT/download\;jsessionid=6C39541D2B69EB947A239719EA8BB8EC.pdf}
}

@inproceedings{psaroudakisReactiveProactiveSharing2014,
  langid = {english},
  title = {Reactive and Proactive Sharing across Concurrent Analytical Queries},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2594514},
  doi = {10.1145/2588555.2594514},
  publisher = {{ACM Press}},
  urldate = {2016-09-14},
  date = {2014},
  pages = {889-892},
  author = {Psaroudakis, Iraklis and Athanassoulis, Manos and Olma, Matthaios and Ailamaki, Anastasia},
  file = {/home/amos/Zotero/storage/3KQAMT2X/p889-psaroudakis.pdf;/home/amos/Zotero/storage/KTUKBV6G/Psaroudakis et al. - 2014 - Reactive and proactive sharing across concurrent a.pdf}
}

@article{giannikisSharedDBKillingOne2012,
  title = {{{SharedDB}}: Killing One Thousand Queries with One Stone},
  volume = {5},
  url = {http://dl.acm.org/citation.cfm?id=2168654},
  shorttitle = {{{SharedDB}}},
  number = {6},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-08-15},
  date = {2012},
  pages = {526--537},
  author = {Giannikis, Georgios and Alonso, Gustavo and Kossmann, Donald},
  file = {/home/amos/Zotero/storage/4FHU4GX2/p526-giannikis.pdf;/home/amos/Zotero/storage/TV3HHAGW/p526-giannikis.pdf}
}

@inproceedings{langDataBlocksHybrid2016,
  title = {Data {{Blocks}}: {{Hybrid OLTP}} and {{OLAP}} on Compressed Storage Using Both Vectorization and Compilation},
  url = {http://131.159.16.103/downloads/publications/datablocks.pdf},
  shorttitle = {Data {{Blocks}}},
  publisher = {{SIGMOD}},
  urldate = {2016-12-21},
  date = {2016},
  author = {Lang, Harald and MÃ¼hlbauer, Tobias and Funke, Florian and Boncz, Peter and Neumann, Thomas and Kemper, Alfons},
  file = {/home/amos/Zotero/storage/J54PSC2X/datablocks.pdf;/home/amos/Zotero/storage/Q7GGCAC6/Data Blocks - Hybrid OLTP and OLAP on Compressed Storage using both Vectorization and Compilation.pdf}
}

@article{drepperWhatEveryProgrammer2007,
  title = {What Every Programmer Should Know about Memory},
  volume = {11},
  url = {http://dewaele.org/~robbe/thesis/writing/references/what-every-programmer-should-know-about-memory.2007.pdf},
  journaltitle = {Red Hat, Inc},
  urldate = {2016-08-19},
  date = {2007},
  pages = {2007},
  author = {Drepper, Ulrich},
  file = {/home/amos/Zotero/storage/NZ3VBVG3/cpumemory.pdf;/home/amos/Zotero/storage/QV2RPBI2/cpumemory.pdf}
}

@article{dewittGammaDatabaseMachine1990,
  title = {The {{Gamma}} Database Machine Project},
  volume = {2},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=50905},
  number = {1},
  journaltitle = {IEEE Transactions on Knowledge and Data Engineering},
  urldate = {2016-09-14},
  date = {1990},
  pages = {44--62},
  author = {DeWitt, David J. and Ghandeharizadeh, Shahram and Schneider, Donovan A. and Bricker, Allan and Hsiao, H.-I. and Rasmussen, Rick},
  file = {/home/amos/Zotero/storage/VHC2CPVQ/ieee90.pdf}
}

@unpublished{ThousandsThreadsBlocking,
  title = {Thousands of {{Threads}} and {{Blocking I}}/{{O}}},
  url = {http://www.mailinator.com/tymaPaulMultithreaded.pdf},
  urldate = {2016-07-10},
  file = {/home/amos/Zotero/storage/UK6BRBDQ/tymaPaulMultithreaded.pdf}
}

@inproceedings{zhangBuildingConsistentTransactions2015,
  langid = {english},
  title = {Building Consistent Transactions with Inconsistent Replication},
  isbn = {978-1-4503-3834-9},
  url = {http://dl.acm.org/citation.cfm?doid=2815400.2815404},
  doi = {10.1145/2815400.2815404},
  publisher = {{ACM Press}},
  urldate = {2017-01-17},
  date = {2015},
  pages = {263-278},
  author = {Zhang, Irene and Sharma, Naveen Kr. and Szekeres, Adriana and Krishnamurthy, Arvind and Ports, Dan R. K.},
  file = {/home/amos/Zotero/storage/7XAMDHN6/Building Consistent Transactions with Inconsistent Replication.pdf;/home/amos/Zotero/storage/K9SAW5UV/tapir.pdf}
}

@inproceedings{179797,
  location = {{Seattle, WA}},
  title = {{{GRASS}}: {{Trimming Stragglers}} in {{Approximation Analytics}}},
  isbn = {978-1-931971-09-6},
  url = {https://www.usenix.org/conference/nsdi14/technical-sessions/presentation/ananthanarayanan},
  booktitle = {11th {{USENIX Symposium}} on {{Networked Systems Design}} and {{Implementation}} ({{NSDI}} 14)},
  publisher = {{USENIX Association}},
  date = {2014-04},
  pages = {289-302},
  author = {Ananthanarayanan, Ganesh and Hung, Michael Chien-Chun and Ren, Xiaoqi and Stoica, Ion and Wierman, Adam and Yu, Minlan},
  file = {/home/amos/Zotero/storage/V8WK7CVN/Ananthanarayanan et al. - 2014 - GRASS Trimming Stragglers in Approximation Analyt.pdf}
}

@inproceedings{arulrajLetTalkStorage2015,
  langid = {english},
  title = {Let's {{Talk About Storage}} \&amp; {{Recovery Methods}} for {{Non}}-{{Volatile Memory Database Systems}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2749441},
  doi = {10.1145/2723372.2749441},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2015},
  pages = {707-722},
  author = {Arulraj, Joy and Pavlo, Andrew and Dulloor, Subramanya R.},
  file = {/home/amos/Zotero/storage/TIRSV7TK/p707-arulraj.pdf}
}

@article{meehanSstoreStreamingMeets2015,
  title = {S-Store: {{Streaming}} Meets Transaction Processing},
  volume = {8},
  url = {http://dl.acm.org/citation.cfm?id=2831367},
  shorttitle = {S-Store},
  number = {13},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2015},
  pages = {2134--2145},
  author = {Meehan, John and Tatbul, Nesime and Zdonik, Stan and Aslantas, Cansu and Cetintemel, Ugur and Du, Jiang and Kraska, Tim and Madden, Samuel and Maier, David and Pavlo, Andrew and others},
  file = {/home/amos/Zotero/storage/N9WBWJEN/p2134-meehan.pdf}
}

@online{PgFormatter,
  title = {{{pgFormatter}}},
  url = {http://sqlformat.darold.net/},
  urldate = {2016-11-28}
}

@article{dewittPracticalSkewHandling,
  title = {Practical {{Skew Handling}} in {{Parallel Joins}}},
  url = {http://gsl.azurewebsites.net/Portals/0/Users/dewitt/Papers/paralleldb/VLDB92.pdf},
  urldate = {2016-07-09},
  author = {Dewitt, David J. and Naughtont, Jeffrey F. and Schneidert, Donovan A. and Seshadrit, S.},
  file = {/home/amos/Zotero/storage/R6SD7ACX/Dewitt et al. - Practical Skew Handling in Parallel Joins.pdf}
}

@inproceedings{mankuApproximateFrequencyCounts2002,
  title = {Approximate Frequency Counts over Data Streams},
  url = {http://dl.acm.org/citation.cfm?id=1287400},
  booktitle = {Proceedings of the 28th International Conference on {{Very Large Data Bases}}},
  publisher = {{VLDB Endowment}},
  urldate = {2016-06-24},
  date = {2002},
  pages = {346--357},
  author = {Manku, Gurmeet Singh and Motwani, Rajeev},
  file = {/home/amos/Zotero/storage/MVA3KGQC/S10P03.pdf}
}

@inproceedings{graefeHashJoinsHash1998,
  title = {Hash Joins and Hash Teams in {{Microsoft SQL Server}}},
  volume = {98},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.114.3183&rep=rep1&type=pdf},
  booktitle = {{{VLDB}}},
  publisher = {{Citeseer}},
  urldate = {2016-08-15},
  date = {1998},
  pages = {86--97},
  author = {Graefe, Goetz and Bunker, Ross and Cooper, Shaun},
  file = {/home/amos/Zotero/storage/5XN9S37T/Graefe et al. - 1998 - Hash joins and hash teams in Microsoft SQL Server.pdf}
}

@article{pelkonenGorillaFastScalable2015,
  title = {Gorilla: A Fast, Scalable, in-Memory Time Series Database},
  volume = {8},
  url = {http://dl.acm.org/citation.cfm?id=2824078},
  shorttitle = {Gorilla},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-01-13},
  date = {2015},
  pages = {1816--1827},
  author = {Pelkonen, Tuomas and Franklin, Scott and Teller, Justin and Cavallaro, Paul and Huang, Qi and Meza, Justin and Veeraraghavan, Kaushik},
  file = {/home/amos/Zotero/storage/QDV87E4W/p1816-teller.pdf}
}

@article{kwonSkewTuneMitigatingSkew2012,
  title = {{{SkewTune}}: {{Mitigating Skew}} in {{MapReduce Applications}}},
  url = {http://nuage.cs.washington.edu/pubs/sigmod2012-kwon.pdf},
  shorttitle = {{{SkewTune}}},
  urldate = {2016-06-29},
  date = {2012},
  author = {Kwon, YongChul and Balazinska, Magdalena and Howe, Bill and Rolia, Jerome},
  file = {/home/amos/Zotero/storage/U8XE4N8P/Kwon et al. - 2012 - SkewTune Mitigating Skew in MapReduce Application.pdf}
}

@inproceedings{malewiczPregelSystemLargescale2010,
  title = {Pregel: A System for Large-Scale Graph Processing},
  url = {http://dl.acm.org/citation.cfm?id=1807184},
  shorttitle = {Pregel},
  booktitle = {Proceedings of the 2010 {{ACM SIGMOD International Conference}} on {{Management}} of Data},
  publisher = {{ACM}},
  urldate = {2016-09-07},
  date = {2010},
  pages = {135--146},
  author = {Malewicz, Grzegorz and Austern, Matthew H. and Bik, Aart JC and Dehnert, James C. and Horn, Ilan and Leiser, Naty and Czajkowski, Grzegorz},
  file = {/home/amos/Zotero/storage/QT6IUIUF/p135-malewicz.pdf}
}

@inproceedings{alizadehLessMoreTrading2012,
  title = {Less Is More: Trading a Little Bandwidth for Ultra-Low Latency in the Data Center},
  url = {https://www.usenix.org/conference/nsdi12/technical-sessions/presentation/alizadeh},
  shorttitle = {Less Is More},
  booktitle = {Presented as Part of the 9th {{USENIX Symposium}} on {{Networked Systems Design}} and {{Implementation}} ({{NSDI}} 12)},
  urldate = {2016-08-15},
  date = {2012},
  pages = {253--266},
  author = {Alizadeh, Mohammad and Kabbani, Abdul and Edsall, Tom and Prabhakar, Balaji and Vahdat, Amin and Yasuda, Masato},
  file = {/home/amos/Zotero/storage/SFZ4A6HT/Alizadeh et al. - 2012 - Less is more trading a little bandwidth for ultra.pdf}
}

@inproceedings{zhengFastDatabasesFast2014,
  title = {Fast Databases with Fast Durability and Recovery through Multicore Parallelism},
  url = {https://www.usenix.org/conference/osdi14/technical-sessions/presentation/zheng_wenting},
  booktitle = {11th {{USENIX Symposium}} on {{Operating Systems Design}} and {{Implementation}} ({{OSDI}} 14)},
  urldate = {2016-12-21},
  date = {2014},
  pages = {465--477},
  author = {Zheng, Wenting and Tu, Stephen and Kohler, Eddie and Liskov, Barbara},
  file = {/home/amos/Zotero/storage/EVCVX2ZD/osdi14-paper-zheng_wenting.pdf}
}

@article{ciparSolvingStragglerProblem,
  title = {Solving the Straggler Problem with Bounded Staleness},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.649.5577&rep=rep1&type=pdf},
  urldate = {2016-07-14},
  author = {Cipar, James and Ho, Qirong and Kim, Jin Kyu and Lee, Seunghak and Ganger, Gregory R. and Gibson, Garth and Keeton, Kimberly and Xing, Eric},
  file = {/home/amos/Zotero/storage/P9CS6SAV/Cipar et al. - Solving the straggler problem with bounded stalene.pdf}
}

@online{dennemanIntroduction2016NUMA2016,
  title = {Introduction 2016 {{NUMA Deep Dive Series}}},
  url = {http://frankdenneman.nl/2016/07/06/introduction-2016-numa-deep-dive-series/},
  abstract = {Recently I've been analyzing traffic to my site and it appears that a lot CPU and memory articles are still very popular. Even my first article about NUMA published in february 2010 is still in high demand. And although you see a lot of talk about the upper levels and...},
  journaltitle = {frankdenneman.nl},
  urldate = {2016-09-06},
  date = {2016-07-06T14:18:23+02:00},
  author = {Denneman, Frank}
}

@article{brittonFallaciesDistributedComputing2001,
  entrysubtype = {magazine},
  title = {Fallacies of {{Distributed Computing Explained}}},
  shorttitle = {{{IT}} Architectures and Middleware},
  date = {2001},
  keywords = {Computer architecture,Information technology,Middleware},
  author = {Britton, Chris},
  file = {/home/amos/Zotero/storage/54R8RR5Z/fallacies.pdf}
}

@inproceedings{fengUnifiedArchitectureInRDBMS2012,
  title = {Towards a Unified Architecture for In-{{RDBMS}} Analytics},
  url = {http://dl.acm.org/citation.cfm?id=2213874},
  booktitle = {Proceedings of the 2012 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  urldate = {2016-09-14},
  date = {2012},
  pages = {325--336},
  author = {Feng, Xixuan and Kumar, Arun and Recht, Benjamin and RÃ©, Christopher},
  file = {/home/amos/Zotero/storage/4F379XZC/12.FengEtAl.SIGMOD.pdf}
}

@unpublished{SpeedingQueryExecution,
  title = {Speeding up Query Execution in {{PostgreSQL}} Using {{LLVM JIT}} Compiler},
  url = {http://llvm.org/devmtg/2016-09/slides/Melnik-PostgreSQLLLVM.pdf},
  urldate = {2016-12-21},
  file = {/home/amos/Zotero/storage/H9XIH6Z9/Melnik-PostgreSQLLLVM.pdf}
}

@inproceedings{ananthanarayananReiningOutliersMapReduce2010,
  title = {Reining in the {{Outliers}} in {{Map}}-{{Reduce Clusters}} Using {{Mantri}}.},
  volume = {10},
  url = {https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Ananthanarayanan.pdf},
  booktitle = {{{OSDI}}},
  urldate = {2016-06-29},
  date = {2010},
  pages = {24},
  author = {Ananthanarayanan, Ganesh and Kandula, Srikanth and Greenberg, Albert G. and Stoica, Ion and Lu, Yi and Saha, Bikas and Harris, Edward},
  file = {/home/amos/Zotero/storage/7QT4H7AQ/Ananthanarayanan et al. - 2010 - Reining in the Outliers in Map-Reduce Clusters usi.pdf}
}

@article{escrivaHyperDexDistributedSearchable2012,
  title = {{{HyperDex}}: {{A}} Distributed, Searchable Key-Value Store},
  volume = {42},
  url = {http://dl.acm.org/citation.cfm?id=2377681},
  shorttitle = {{{HyperDex}}},
  number = {4},
  journaltitle = {ACM SIGCOMM Computer Communication Review},
  urldate = {2017-01-19},
  date = {2012},
  pages = {25--36},
  author = {Escriva, Robert and Wong, Bernard and Sirer, Emin GÃ¼n},
  file = {/home/amos/Zotero/storage/UUCWU458/p25-escriva.pdf}
}

@article{lemireConsistentlyFasterSmaller2016,
  title = {Consistently Faster and Smaller Compressed Bitmaps with {{Roaring}}},
  url = {http://onlinelibrary.wiley.com/doi/10.1002/spe.2402/full},
  journaltitle = {Software: Practice and Experience},
  urldate = {2017-01-18},
  date = {2016},
  author = {Lemire, Daniel and Ssi-Yan-Kai, Gregory and Kaser, Owen},
  file = {/home/amos/Zotero/storage/4R4ZMIFA/1603.06549.pdf}
}

@inproceedings{cheungSlothBeingLazy2014,
  langid = {english},
  title = {Sloth: Being Lazy Is a Virtue (When Issuing Database Queries)},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2593672},
  doi = {10.1145/2588555.2593672},
  shorttitle = {Sloth},
  publisher = {{ACM Press}},
  urldate = {2017-01-09},
  date = {2014},
  pages = {931-942},
  author = {Cheung, Alvin and Madden, Samuel and Solar-Lezama, Armando},
  file = {/home/amos/Zotero/storage/FPD5UKM7/p931-cheung.pdf}
}

@inproceedings{agarwalBlinkDBQueriesBounded2013,
  title = {{{BlinkDB}}: Queries with Bounded Errors and Bounded Response Times on Very Large Data},
  url = {http://dl.acm.org/citation.cfm?id=2465355},
  shorttitle = {{{BlinkDB}}},
  booktitle = {Proceedings of the 8th {{ACM European Conference}} on {{Computer Systems}}},
  publisher = {{ACM}},
  urldate = {2016-08-15},
  date = {2013},
  pages = {29--42},
  author = {Agarwal, Sameer and Mozafari, Barzan and Panda, Aurojit and Milner, Henry and Madden, Samuel and Stoica, Ion},
  file = {/home/amos/Zotero/storage/8XW29MAE/Agarwal et al. - 2013 - BlinkDB queries with bounded errors and bounded r.pdf}
}

@article{hellersteinMADlibAnalyticsLibrary2012,
  title = {The {{MADlib}} Analytics Library: Or {{MAD}} Skills, the {{SQL}}},
  volume = {5},
  url = {http://dl.acm.org/citation.cfm?id=2367510},
  shorttitle = {The {{MADlib}} Analytics Library},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-06-17},
  date = {2012},
  pages = {1700--1711},
  author = {Hellerstein, Joseph M. and RÃ©, Christoper and Schoppmann, Florian and Wang, Daisy Zhe and Fratkin, Eugene and Gorajek, Aleksander and Ng, Kee Siong and Welton, Caleb and Feng, Xixuan and Li, Kun and others},
  file = {/home/amos/Zotero/storage/CS8R2ET5/Hellerstein et al. - 2012 - The MADlib analytics library or MAD skills, the S.pdf}
}

@inproceedings{zhangReducingStorageOverhead2016,
  langid = {english},
  title = {Reducing the {{Storage Overhead}} of {{Main}}-{{Memory OLTP Databases}} with {{Hybrid Indexes}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2915222},
  doi = {10.1145/2882903.2915222},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {1567-1581},
  author = {Zhang, Huanchen and Andersen, David G. and Pavlo, Andrew and Kaminsky, Michael and Ma, Lin and Shen, Rui},
  file = {/home/amos/Zotero/storage/S5W8QWAJ/zhang-sigmod2016.pdf}
}

@article{lamportPaxosMadeSimple2001,
  title = {Paxos Made Simple},
  volume = {32},
  url = {http://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/past/03F/notes/paxos-simple.pdf},
  number = {4},
  journaltitle = {ACM Sigact News},
  urldate = {2016-09-14},
  date = {2001},
  pages = {18--25},
  author = {Lamport, Leslie and others},
  file = {/home/amos/Zotero/storage/2CSGCJXX/Lamport and others - 2001 - Paxos made simple.pdf}
}

@inproceedings{renDesignPrinciplesScaling2016,
  langid = {english},
  title = {Design {{Principles}} for {{Scaling Multi}}-Core {{OLTP Under High Contention}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2882958},
  doi = {10.1145/2882903.2882958},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {1583-1598},
  author = {Ren, Kun and Faleiro, Jose M. and Abadi, Daniel J.},
  file = {/home/amos/Zotero/storage/GBR4B3HN/orthrus-sigmod16.pdf}
}

@online{SoftwareOptimizationResources,
  title = {Software Optimization Resources. {{C}}++ and Assembly. {{Windows}}, {{Linux}}, {{BSD}}, {{Mac OS X}}},
  url = {http://www.agner.org/optimize/},
  urldate = {2017-01-12}
}

@inproceedings{blanasHowEfficientOur2011,
  title = {How Efficient Is Our Radix Join Implementation},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.226.8426&rep=rep1&type=pdf},
  publisher = {{Citeseer}},
  urldate = {2016-12-21},
  date = {2011},
  author = {Blanas, Spyros and Patel, Jignesh M.},
  file = {/home/amos/Zotero/storage/52US9TPX/comparison.pdf}
}

@inproceedings{manegoldCacheconsciousRadixdeclusterProjections2004,
  title = {Cache-Conscious Radix-Decluster Projections},
  url = {http://dl.acm.org/citation.cfm?id=1316749},
  booktitle = {Proceedings of the {{Thirtieth}} International Conference on {{Very}} Large Data Bases-{{Volume}} 30},
  publisher = {{VLDB Endowment}},
  urldate = {2016-12-21},
  date = {2004},
  pages = {684--695},
  author = {Manegold, Stefan and Boncz, Peter and Nes, Niels and Kersten, Martin},
  file = {/home/amos/Zotero/storage/PDSZFW36/RS18P3.pdf}
}

@inproceedings{dewittSplitQueryProcessing2013,
  title = {Split Query Processing in Polybase},
  url = {http://dl.acm.org/citation.cfm?id=2463709},
  booktitle = {Proceedings of the 2013 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  urldate = {2016-08-17},
  date = {2013},
  pages = {1255--1266},
  author = {DeWitt, David J. and Halverson, Alan and Nehme, Rimma and Shankar, Srinath and Aguilar-Saborit, Josep and Avanes, Artin and Flasza, Miro and Gramling, Jim},
  file = {/home/amos/Zotero/storage/IPUAF3ZS/p1255-dewitt.pdf}
}

@inproceedings{ananthanarayananEffectiveStragglerMitigation2013,
  title = {Effective {{Straggler Mitigation}}: {{Attack}} of the {{Clones}}},
  isbn = {978-1-931971-00-3},
  url = {https://www.usenix.org/conference/nsdi13/technical-sessions/presentation/ananthanarayanan},
  shorttitle = {Effective {{Straggler Mitigation}}},
  eventtitle = {Presented as Part of the 10th {{USENIX Symposium}} on {{Networked Systems Design}} and {{Implementation}} ({{NSDI}} 13)},
  urldate = {2016-06-29},
  date = {2013},
  pages = {185-198},
  author = {Ananthanarayanan, Ganesh and Ghodsi, Ali and Shenker, Scott and Stoica, Ion},
  file = {/home/amos/Zotero/storage/EGM7KPKQ/Ananthanarayanan et al. - 2013 - Effective Straggler Mitigation Attack of the Clon.pdf}
}

@online{CompilerExplorer,
  title = {Compiler {{Explorer}}},
  url = {http://godbolt.org/},
  urldate = {2016-12-14}
}

@article{kallmanHstoreHighperformanceDistributed2008,
  title = {H-Store: A High-Performance, Distributed Main Memory Transaction Processing System},
  volume = {1},
  url = {http://dl.acm.org/citation.cfm?id=1454211},
  shorttitle = {H-Store},
  number = {2},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-01-09},
  date = {2008},
  pages = {1496--1499},
  author = {Kallman, Robert and Kimura, Hideaki and Natkins, Jonathan and Pavlo, Andrew and Rasin, Alexander and Zdonik, Stanley and Jones, Evan PC and Madden, Samuel and Stonebraker, Michael and Zhang, Yang and others},
  file = {/home/amos/Zotero/storage/5ERGUI7G/p1496-kallman.pdf}
}

@inproceedings{isardDryadDistributedDataparallel2007,
  title = {Dryad: Distributed Data-Parallel Programs from Sequential Building Blocks},
  volume = {41},
  url = {http://dl.acm.org/citation.cfm?id=1273005},
  shorttitle = {Dryad},
  booktitle = {{{ACM SIGOPS Operating Systems Review}}},
  publisher = {{ACM}},
  urldate = {2016-08-17},
  date = {2007},
  pages = {59--72},
  author = {Isard, Michael and Budiu, Mihai and Yu, Yuan and Birrell, Andrew and Fetterly, Dennis},
  file = {/home/amos/Zotero/storage/HNMSDPXF/p59-isard.pdf;/home/amos/Zotero/storage/QF8ZGM8T/p59-isard.pdf}
}

@article{costeaVectorHTakingSQLonHadoop,
  title = {{{VectorH}}: {{Taking SQL}}-on-{{Hadoop}} to the next Level},
  url = {http://homepages.cwi.nl/~boncz/vortex-sigmod2016.pdf},
  shorttitle = {{{VectorH}}},
  urldate = {2016-08-16},
  author = {Costea, Andrei and Ionescu, Adrian and Raducanu, Bogdan and Switakowski, Micha$\backslash$l and BÃ¢rca, Cristian and Sompolski, Juliusz and $\backslash$Luszczak, Alicja and Szafranski, Micha$\backslash$l and de Nijs, Giel and Boncz, Peter},
  options = {useprefix=true},
  file = {/home/amos/Zotero/storage/4DNQG2R5/24383B.pdf}
}

@article{chaikenSCOPEEasyEfficient2008,
  title = {{{SCOPE}}: Easy and Efficient Parallel Processing of Massive Data Sets},
  volume = {1},
  url = {http://dl.acm.org/citation.cfm?id=1454166},
  shorttitle = {{{SCOPE}}},
  number = {2},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-09-07},
  date = {2008},
  pages = {1265--1276},
  author = {Chaiken, Ronnie and Jenkins, Bob and Larson, Per-$\backslash$AAke and Ramsey, Bill and Shakib, Darren and Weaver, Simon and Zhou, Jingren},
  file = {/home/amos/Zotero/storage/CKF6SJGS/1454166.pdf;/home/amos/Zotero/storage/W4QFWEHA/1454166.pdf}
}

@inproceedings{sismanisDwarfShrinkingPetacube2002,
  title = {Dwarf: {{Shrinking}} the Petacube},
  url = {http://dl.acm.org/citation.cfm?id=564745},
  shorttitle = {Dwarf},
  booktitle = {Proceedings of the 2002 {{ACM SIGMOD}} International Conference on {{Management}} of Data},
  publisher = {{ACM}},
  urldate = {2017-01-19},
  date = {2002},
  pages = {464--475},
  author = {Sismanis, Yannis and Deligiannakis, Antonios and Roussopoulos, Nick and Kotidis, Yannis},
  file = {/home/amos/Zotero/storage/QGR3TFG8/Dwarf.pdf}
}

@article{funkeCompactingTransactionalData2012,
  title = {Compacting Transactional Data in Hybrid {{OLTP}}\&{{OLAP}} Databases},
  volume = {5},
  url = {http://dl.acm.org/citation.cfm?id=2350258},
  number = {11},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2012},
  pages = {1424--1435},
  author = {Funke, Florian and Kemper, Alfons and Neumann, Thomas},
  file = {/home/amos/Zotero/storage/D63FBT3X/p1424_florianfunke_vldb2012.pdf;/home/amos/Zotero/storage/X6KIAF4Y/Compacting Transactional Data in Hybrid OLTP&OLAP Databases.pdf}
}

@inproceedings{changHAWQMassivelyParallel2014,
  langid = {english},
  title = {{{HAWQ}}: A Massively Parallel Processing {{SQL}} Engine in Hadoop},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2595636},
  doi = {10.1145/2588555.2595636},
  shorttitle = {{{HAWQ}}},
  publisher = {{ACM Press}},
  urldate = {2016-08-16},
  date = {2014},
  pages = {1223-1234},
  author = {Chang, Lei and Sherry, Gavin and Bhandarkar, Milind and Wang, Zhanwei and Ma, Tao and Jian, Lirong and Ma, Lili and Goldshuv, Alon and Lonergan, Luke and Cohen, Jeffrey and Welton, Caleb},
  file = {/home/amos/Zotero/storage/7JQ2E4P7/p1223-chang.pdf}
}

@article{yadwadkarProactiveStragglerAvoidance2012,
  title = {Proactive {{Straggler Avoidance}} Using {{Machine Learning}}},
  url = {http://www.cs.berkeley.edu/~kubitron/courses/cs262a-F12/projects/reports/project3_report.pdf},
  journaltitle = {White paper, University of Berkeley},
  urldate = {2016-06-29},
  date = {2012},
  author = {Yadwadkar, Neeraja J. and Choi, Wontae},
  file = {/home/amos/Zotero/storage/FADUUH8D/Yadwadkar and Choi - 2012 - Proactive Straggler Avoidance using Machine Learni.pdf}
}

@unpublished{MppVsHadoop,
  title = {Mpp vs Hadoop},
  url = {http://s3.amazonaws.com/ppt-download/03-151128171538-lva1-app6892.pdf?response-content-disposition=attachment&Signature=hs8dV7t1WXmqJ73oxLoPqXKBygI%3D&Expires=1474534645&AWSAccessKeyId=AKIAJ6D6SEMXSASXHDAQ},
  urldate = {2016-09-22},
  file = {/home/amos/Zotero/storage/KTJDC8WJ/mpp vs hadoop.pdf}
}

@article{candeaPredictablePerformanceHigh2011,
  langid = {english},
  title = {Predictable Performance and High Query Concurrency for Data Analytics},
  volume = {20},
  issn = {1066-8888, 0949-877X},
  url = {http://link.springer.com/10.1007/s00778-011-0221-2},
  doi = {10.1007/s00778-011-0221-2},
  number = {2},
  journaltitle = {The VLDB Journal},
  urldate = {2017-01-09},
  date = {2011-04},
  pages = {227-248},
  author = {Candea, George and Polyzotis, Neoklis and Vingralek, Radek},
  file = {/home/amos/Zotero/storage/F4W4SEJB/778_2011_Article_221.pdf}
}

@book{gormanUnderstandingLinuxVirtual,
  title = {Understanding {{The Linux Virtual Memory Manager}}},
  url = {https://www.kernel.org/doc/gorman/pdf/understand.pdf},
  urldate = {2016-12-21},
  author = {Gorman, Mel},
  file = {/home/amos/Zotero/storage/FIIFM6F4/understand.pdf}
}

@unpublished{TangChengPostgreSQLVS,
  title = {åæ\_{{PostgreSQL}}\_{{VS}}\_{{MySQL}}\_\&\_oracle},
  url = {https://wiki.postgresql.org/images/4/4c/%E5%94%90%E6%88%90_PostgreSQL_VS_MySQL_%26_oracle.pdf},
  urldate = {2016-12-21},
  file = {/home/amos/Zotero/storage/KBWSGV3F/åæ_PostgreSQL_VS_MySQL_&_oracle.pdf}
}

@article{cwiColumnOrientedDatabaseSystems,
  title = {Column-{{Oriented Database Systems}}},
  url = {http://phdopen.mimuw.edu.pl/lato10/boncz_mimuw.pdf},
  urldate = {2016-09-07},
  author = {CWI, Peter Boncz},
  file = {/home/amos/Zotero/storage/E27DZSF8/Column-Oriented Database Systems Tutorial.pdf;/home/amos/Zotero/storage/GAWW6HMX/Column_Store_Tutorial_VLDB09.pdf}
}

@inproceedings{alexandrovEmmaActionDeclarative2016,
  langid = {english},
  title = {Emma in {{Action}}: {{Declarative Dataflows}} for {{Scalable Data Analysis}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2899396},
  doi = {10.1145/2882903.2899396},
  shorttitle = {Emma in {{Action}}},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {2073-2076},
  author = {Alexandrov, Alexander and Salzmann, Andreas and Krastev, Georgi and Katsifodimos, Asterios and Markl, Volker},
  file = {/home/amos/Zotero/storage/K65CEVSK/2016.SIGMOD.DeclarativeDataflows.pdf}
}

@online{Greenplum2017,
  title = {Greenplum},
  url = {https://greenplum.org/},
  journaltitle = {Greenplum Database},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@article{mehtaDataPlacementSharednothing1997,
  title = {Data Placement in Shared-Nothing Parallel Database Systems},
  volume = {6},
  url = {http://dl.acm.org/citation.cfm?id=765547},
  number = {1},
  journaltitle = {The VLDB JournalâThe International Journal on Very Large Data Bases},
  urldate = {2016-09-07},
  date = {1997},
  pages = {53--72},
  author = {Mehta, Manish and DeWitt, David J.},
  file = {/home/amos/Zotero/storage/VGIVX96U/70060053.pdf}
}

@online{ApacheMailingList,
  title = {Apache {{Mailing List}}},
  url = {https://lists.apache.org/},
  urldate = {2016-09-15}
}

@article{faleiroFITDistributedDatabase2015,
  title = {{{FIT}}: {{A Distributed Database Performance Tradeoff}}.},
  volume = {38},
  url = {https://pdfs.semanticscholar.org/dad9/3eee2cf87bc0bbde26385740519d68cca30b.pdf},
  shorttitle = {{{FIT}}},
  number = {1},
  journaltitle = {IEEE Data Eng. Bull.},
  urldate = {2016-12-21},
  date = {2015},
  pages = {10--17},
  author = {Faleiro, Jose M. and Abadi, Daniel J.},
  file = {/home/amos/Zotero/storage/38D7EQ86/3eee2cf87bc0bbde26385740519d68cca30b.pdf}
}

@inproceedings{haynesPipeGenDataPipe2016,
  langid = {english},
  title = {{{PipeGen}}: {{Data Pipe Generator}} for {{Hybrid Analytics}}},
  isbn = {978-1-4503-4525-5},
  url = {http://dl.acm.org/citation.cfm?doid=2987550.2987567},
  doi = {10.1145/2987550.2987567},
  shorttitle = {{{PipeGen}}},
  publisher = {{ACM Press}},
  urldate = {2017-01-09},
  date = {2016},
  pages = {470-483},
  author = {Haynes, Brandon and Cheung, Alvin and Balazinska, Magdalena},
  file = {/home/amos/Zotero/storage/ISI2PFJH/haynes-socc16.pdf}
}

@article{shuteF1DistributedSQL2013,
  title = {F1: {{A}} Distributed {{SQL}} Database That Scales},
  volume = {6},
  url = {http://dl.acm.org/citation.cfm?id=2536232},
  shorttitle = {F1},
  number = {11},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-01-06},
  date = {2013},
  pages = {1068--1079},
  author = {Shute, Jeff and Vingralek, Radek and Samwel, Bart and Handy, Ben and Whipkey, Chad and Rollins, Eric and Oancea, Mircea and Littlefield, Kyle and Menestrina, David and Ellner, Stephan and others},
  file = {/home/amos/Zotero/storage/DFRK6PNT/41344.pdf}
}

@online{LanguageToolStyleGrammar,
  title = {{{LanguageTool Style}} and {{Grammar Check}}},
  url = {https://www.languagetool.org/},
  urldate = {2016-12-30}
}

@inproceedings{giannikisWorkloadOptimizationUsing2013,
  title = {Workload Optimization Using {{SharedDB}}},
  url = {http://dl.acm.org/citation.cfm?id=2463678},
  booktitle = {Proceedings of the 2013 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  urldate = {2017-01-09},
  date = {2013},
  pages = {1045--1048},
  author = {Giannikis, Georgios and Makreshanski, Darko and Alonso, Gustavo and Kossmann, Donald},
  file = {/home/amos/Zotero/storage/DCZW528Z/p1045-giannikis.pdf}
}

@article{zhangInMemoryBigData2015,
  title = {In-{{Memory Big Data Management}} and {{Processing}}: {{A Survey}}},
  volume = {27},
  issn = {1041-4347},
  doi = {10.1109/TKDE.2015.2427795},
  shorttitle = {In-{{Memory Big Data Management}} and {{Processing}}},
  abstract = {Growing main memory capacity has fueled the development of in-memory big data management and processing. By eliminating disk I/O bottleneck, it is now possible to support interactive data analytics. However, in-memory systems are much more sensitive to other sources of overhead that do not matter in traditional I/O-bounded disk-based systems. Some issues such as fault-tolerance and consistency are also more challenging to handle in in-memory environment. We are witnessing a revolution in the design of database systems that exploits main memory as its data storage layer. Many of these researches have focused along several dimensions: modern CPU and memory hierarchy utilization, time/space efficiency, parallelism, and concurrency control. In this survey, we aim to provide a thorough review of a wide range of in-memory data management and processing proposals and systems, including both data storage systems and data processing frameworks. We also give a comprehensive presentation of important technology in memory management, and some key factors that need to be considered in order to achieve efficient in-memory data management and processing.},
  number = {7},
  journaltitle = {IEEE Transactions on Knowledge and Data Engineering},
  date = {2015-07},
  pages = {1920-1948},
  keywords = {DRAM,Indexes,Memory management,Optimization,Random access memory,Registers,data processing frameworks,in-memory big data management,in-memory big data processing,query processing,relational databases,storage management,storage systems,distributed databases,Big Data,Parallel processing,primary memory},
  author = {Zhang, H. and Chen, G. and Ooi, B. C. and Tan, K. L. and Zhang, M.},
  file = {/home/amos/Zotero/storage/4RHF82AT/Zhang et al. - 2015 - In-Memory Big Data Management and Processing: A Su.pdf;/home/amos/Zotero/storage/A4S59STF/Zhang et al. - 2015 - In-Memory Big Data Management and Processing A Su.pdf;/home/amos/Zotero/storage/A2WAW3UF/Zhang et al. - 2015 - In-Memory Big Data Management and Processing: A Su.html}
}

@online{RPMSearch,
  title = {{{RPM Search}}},
  url = {http://rpm.pbone.net/index.php3/stat/2/simple/2},
  urldate = {2016-08-28}
}

@article{chenBigDataSurvey2014,
  langid = {english},
  title = {Big {{Data}}: {{A Survey}}},
  volume = {19},
  issn = {1383-469X, 1572-8153},
  url = {http://link.springer.com/article/10.1007/s11036-013-0489-0},
  doi = {10.1007/s11036-013-0489-0},
  shorttitle = {Big {{Data}}},
  abstract = {In this paper, we review the background and state-of-the-art of big data. We first introduce the general background of big data and review related technologies, such as could computing, Internet of Things, data centers, and Hadoop. We then focus on the four phases of the value chain of big data, i.e., data generation, data acquisition, data storage, and data analysis. For each phase, we introduce the general background, discuss the technical challenges, and review the latest advances. We finally examine the several representative applications of big data, including enterprise management, Internet of Things, online social networks, medial applications, collective intelligence, and smart grid. These discussions aim to provide a comprehensive overview and big-picture to readers of this exciting area. This survey is concluded with a discussion of open problems and future directions.},
  number = {2},
  journaltitle = {Mobile Networks and Applications},
  shortjournal = {Mobile Netw Appl},
  urldate = {2016-04-01},
  date = {2014-01-22},
  pages = {171-209},
  keywords = {Big data analysis,Cloud computing,Communications Engineering; Networks,Computer Communication Networks,Data center,Electrical Engineering,Hadoop,IT in Business,Internet of things,Smart grid,Big Data},
  author = {Chen, Min and Mao, Shiwen and Liu, Yunhao},
  file = {/home/amos/Zotero/storage/V7MTZTGF/Chen ç­. - 2014 - Big Data A Survey.pdf}
}

@unpublished{HorizontalScalingPL,
  title = {Horizontal Scaling with {{PL}}/{{Proxy}}},
  url = {https://pgconf.ru/media2015c/urbanski.pdf},
  urldate = {2016-12-21},
  file = {/home/amos/Zotero/storage/X6D42UQB/urbanski.pdf}
}

@inproceedings{armbrustSparkSQLRelational2015,
  langid = {english},
  title = {Spark {{SQL}}: {{Relational Data Processing}} in {{Spark}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2742797},
  doi = {10.1145/2723372.2742797},
  shorttitle = {Spark {{SQL}}},
  publisher = {{ACM Press}},
  urldate = {2016-09-07},
  date = {2015},
  pages = {1383-1394},
  author = {Armbrust, Michael and Ghodsi, Ali and Zaharia, Matei and Xin, Reynold S. and Lian, Cheng and Huai, Yin and Liu, Davies and Bradley, Joseph K. and Meng, Xiangrui and Kaftan, Tomer and Franklin, Michael J.},
  file = {/home/amos/Zotero/storage/956T5BRJ/sigmod_spark_sql.pdf}
}

@unpublished{deanAchievingRapidResponse2012,
  title = {Achieving Rapid Response Times in Large Online Services},
  url = {https://research.google.com/pubs/pub44875.html},
  urldate = {2016-12-21},
  date = {2012},
  author = {Dean, Jeffrey},
  file = {/home/amos/Zotero/storage/E6W5MTKG/Berkeley-Latency-Mar2012.pdf}
}

@inproceedings{powerPiccoloBuildingFast2010,
  title = {Piccolo: {{Building Fast}}, {{Distributed Programs}} with {{Partitioned Tables}}.},
  volume = {10},
  url = {http://static.usenix.org/event/osdi10/tech/full_papers/Power.pdf},
  shorttitle = {Piccolo},
  booktitle = {{{OSDI}}},
  urldate = {2016-12-21},
  date = {2010},
  pages = {1--14},
  author = {Power, Russell and Li, Jinyang},
  file = {/home/amos/Zotero/storage/4ZCBC3FI/Power.pdf}
}

@article{leeParallelDataProcessing2012,
  title = {Parallel {{Data Processing}} with {{MapReduce}}: {{A Survey}}},
  volume = {40},
  issn = {0163-5808},
  url = {http://doi.acm.org/10.1145/2094114.2094118},
  doi = {10.1145/2094114.2094118},
  shorttitle = {Parallel {{Data Processing}} with {{MapReduce}}},
  abstract = {A prominent parallel data processing tool MapReduce is gaining significant momentum from both industry and academia as the volume of data to analyze grows rapidly. While MapReduce is used in many areas where massive data analysis is required, there are still debates on its performance, efficiency per node, and simple abstraction. This survey intends to assist the database and open source communities in understanding various technical aspects of the MapReduce framework. In this survey, we characterize the MapReduce framework and discuss its inherent pros and cons. We then introduce its optimization strategies reported in the recent literature. We also discuss the open issues and challenges raised on parallel data analysis with MapReduce.},
  number = {4},
  journaltitle = {SIGMOD Rec.},
  urldate = {2016-04-01},
  date = {2012-01},
  pages = {11--20},
  author = {Lee, Kyong-Ha and Lee, Yoon-Joon and Choi, Hyunsik and Chung, Yon Dohn and Moon, Bongki},
  file = {/home/amos/Zotero/storage/PJJEMKZC/Lee et al. - 2012 - Parallel Data Processing with MapReduce A Survey.pdf}
}

@online{OracleDockerimages,
  title = {Oracle/Docker-Images},
  url = {https://github.com/oracle/docker-images},
  abstract = {docker-images - Official source for Docker configurations, images, and examples of Dockerfiles for Oracle products and projects},
  journaltitle = {GitHub},
  urldate = {2016-11-24}
}

@article{boralPrototypingBubbaHighly1990,
  title = {Prototyping {{Bubba}}, a Highly Parallel Database System},
  volume = {2},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=50903},
  number = {1},
  journaltitle = {IEEE Transactions on Knowledge and Data Engineering},
  urldate = {2016-09-08},
  date = {1990},
  pages = {4--24},
  author = {Boral, Haran and Alexander, William and Clay, Larry and Copeland, George and Danforth, Scott and Franklin, Michael and Hart, Brian and Smith, Marc and Valduriez, Patrick},
  file = {/home/amos/Zotero/storage/D637ZVCV/Boral et al. - 1990 - Prototyping Bubba, a highly parallel database syst.pdf}
}

@inproceedings{vavilapalliApacheHadoopYARN2013,
  langid = {english},
  title = {Apache {{Hadoop YARN}}: Yet Another Resource Negotiator},
  isbn = {978-1-4503-2428-1},
  url = {http://dl.acm.org/citation.cfm?doid=2523616.2523633},
  doi = {10.1145/2523616.2523633},
  shorttitle = {Apache {{Hadoop YARN}}},
  publisher = {{ACM Press}},
  urldate = {2016-09-02},
  date = {2013},
  pages = {1-16},
  author = {Vavilapalli, Vinod Kumar and Seth, Siddharth and Saha, Bikas and Curino, Carlo and O'Malley, Owen and Radia, Sanjay and Reed, Benjamin and Baldeschwieler, Eric and Murthy, Arun C. and Douglas, Chris and Agarwal, Sharad and Konar, Mahadev and Evans, Robert and Graves, Thomas and Lowe, Jason and Shah, Hitesh},
  file = {/home/amos/Zotero/storage/Q9U5JQ53/Vavilapalli et al. - 2013 - Apache Hadoop YARN yet another resource negotiato.pdf}
}

@online{vavrusaWhatProgrammerShould,
  title = {What a {{C}} Programmer Should Know about Memory},
  url = {http://marek.vavrusa.com/c/memory/2015/02/20/memory/},
  abstract = {I'm a traveler in time and space.},
  journaltitle = {Marek Vavrusa},
  urldate = {2016-10-31},
  author = {Vavrusa, Marek}
}

@inproceedings{arulrajBridgingArchipelagoRowStores2016,
  langid = {english},
  title = {Bridging the {{Archipelago}} between {{Row}}-{{Stores}} and {{Column}}-{{Stores}} for {{Hybrid Workloads}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2915231},
  doi = {10.1145/2882903.2915231},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {583-598},
  author = {Arulraj, Joy and Pavlo, Andrew and Menon, Prashanth},
  file = {/home/amos/Zotero/storage/6IP7F9L9/Bridging the Archipelago between Row-Stores and Column-Stores for Hybrid Workloads.pdf;/home/amos/Zotero/storage/TISRGUXB/arulraj-sigmod2016.pdf}
}

@book{williamsConcurrencyActionPractical2012,
  location = {{Shelter Island, NY}},
  title = {C++ Concurrency in Action: Practical Multithreading},
  isbn = {978-1-933988-77-1},
  shorttitle = {C++ Concurrency in Action},
  abstract = {Explains how to create multithreaded applications in the program language C++11.--},
  pagetotal = {506},
  publisher = {{Manning}},
  date = {2012},
  keywords = {C++ (Computer program language)},
  author = {Williams, Anthony},
  file = {/home/amos/Zotero/storage/72IKH9IF/CplusplusConcurrencyInAction_PracticalMultithreading.pdf},
  note = {OCLC: ocn320189325}
}

@inproceedings{rudolphSimpleLoadBalancing1991,
  title = {A Simple Load Balancing Scheme for Task Allocation in Parallel Machines},
  url = {http://dl.acm.org/citation.cfm?id=113401},
  booktitle = {Proceedings of the Third Annual {{ACM}} Symposium on {{Parallel}} Algorithms and Architectures},
  publisher = {{ACM}},
  urldate = {2016-08-17},
  date = {1991},
  pages = {237--245},
  author = {Rudolph, Larry and Slivkin-Allalouf, Miriam and Upfal, Eli},
  file = {/home/amos/Zotero/storage/SWTD5B8M/Rudolph et al. - 1991 - A simple load balancing scheme for task allocation.pdf;/home/amos/Zotero/storage/WG5WS688/p237-rudolph.pdf}
}

@inproceedings{bittorfImpalaModernOpenSource2015,
  title = {Impala: {{A Modern}}, {{Open}}-{{Source SQL Engine}} for {{Hadoop}}},
  url = {http://web.eecs.umich.edu/~mozafari/fall2015/eecs584/papers/impala.pdf},
  shorttitle = {Impala},
  publisher = {{CIDR}},
  urldate = {2016-06-21},
  date = {2015},
  author = {Bittorf, Marcel Kornacker Alexander Behm Victor and Bobrovytsky, Taras and Erickson, Casey Ching Alan Choi Justin and Hecht, Martin Grund Daniel and Kuff, Matthew Jacobs Ishaan Joshi Lenni and Leblang, Dileep Kumar Alex and Robinson, Nong Li Ippokratis Pandis Henry and Rus, David Rorke Silvius and Wanderman, John Russell Dimitris Tsirogiannis Skye and Yoder, Milne Michael},
  file = {/home/amos/Zotero/storage/FHADIFIS/Bittorf et al. - 2015 - Impala A Modern, Open-Source SQL Engine for Hadoo.pdf}
}

@inproceedings{antovaOptimizingQueriesPartitioned2014,
  langid = {english},
  title = {Optimizing Queries over Partitioned Tables in {{MPP}} Systems},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2595640},
  doi = {10.1145/2588555.2595640},
  publisher = {{ACM Press}},
  urldate = {2016-09-14},
  date = {2014},
  pages = {373-384},
  author = {Antova, Lyublena and El-Helw, Amr and Soliman, Mohamed A. and Gu, Zhongxian and Petropoulos, Michalis and Waas, Florian},
  file = {/home/amos/Zotero/storage/PEN2M8Q6/Antova et al. - 2014 - Optimizing queries over partitioned tables in MPP .pdf}
}

@book{meyersEffectiveModern422014,
  location = {{Beijing ; Sebastopol, CA}},
  title = {Effective Modern {{C}}++: 42 Specific Ways to Improve Your Use of {{C}}++11 and {{C}}++14},
  edition = {First edition},
  isbn = {978-1-4919-0399-5},
  shorttitle = {Effective Modern {{C}}++},
  abstract = {"Coming to grips with C++11 and C++14 is more than a matter of familiarizing yourself with the features they introduce (e.g., auto type declarations, move semantics, lambda expressions, and concurrency support). The challenge is learning to use those features effectively -- so that your software is correct, efficient, maintainable, and portable. That's where this practical book comes in. It describes how to write truly great software using C++11 and C++14 -- i.e. using modern C++ ...Effective Modern C++ follows the proven guideline-based, example-driven format of Scott Meyers' earlier books, but covers entirely new material"--Publisher's website},
  pagetotal = {315},
  publisher = {{O'Reilly Media}},
  date = {2014},
  keywords = {C++ (Computer program language),Langages de programmation,Programmation informatique},
  author = {Meyers, Scott},
  file = {/home/amos/Zotero/storage/RNW9UVZZ/Meyers - 2014 - Effective modern C++ 42 specific ways to improve .pdf},
  note = {OCLC: ocn884480640}
}

@article{akidauDataflowModelPractical2015,
  title = {The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, out-of-Order Data Processing},
  volume = {8},
  url = {http://dl.acm.org/citation.cfm?id=2824076},
  shorttitle = {The Dataflow Model},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2015},
  pages = {1792--1803},
  author = {Akidau, Tyler and Bradshaw, Robert and Chambers, Craig and Chernyak, Slava and FernÃ¡ndez-Moctezuma, Rafael J. and Lax, Reuven and McVeety, Sam and Mills, Daniel and Perry, Frances and Schmidt, Eric and others},
  file = {/home/amos/Zotero/storage/I9CWU33S/43864.pdf}
}

@inproceedings{shraerDynamicReconfigurationPrimary2012,
  title = {Dynamic {{Reconfiguration}} of {{Primary}}/{{Backup Clusters}}},
  url = {https://www.usenix.org/conference/atc12/technical-sessions/presentation/shraer},
  booktitle = {Presented as Part of the 2012 {{USENIX Annual Technical Conference}} ({{USENIX ATC}} 12)},
  urldate = {2017-01-16},
  date = {2012},
  pages = {425--437},
  author = {Shraer, Alexander and Reed, Benjamin and Malkhi, Dahlia and Junqueira, Flavio P.},
  file = {/home/amos/Zotero/storage/TUW5W8Z8/zkreconfig-usenixatc-final.pdf}
}

@book{nevarezSQLServerQuery2007,
  langid = {english},
  location = {{Place of publication not identified}},
  title = {Inside the {{SQL Server Query Optimizer}}},
  isbn = {978-1-906434-60-1 978-1-906434-57-1},
  url = {http://proquest.safaribooksonline.com/?fpi=9781906434601},
  publisher = {{Red Gate Books}},
  urldate = {2016-08-10},
  date = {2007},
  author = {Nevarez, Benjamin},
  file = {/home/amos/Zotero/storage/MZWW7HKW/inside-the-sql-server-query-optimizer.pdf},
  note = {OCLC: 757519392}
}

@book{bovetUnderstandingLinuxKernel2006,
  location = {{Beijing ; Sebastopol, CA}},
  title = {Understanding the {{Linux}} Kernel},
  edition = {3rd ed},
  isbn = {978-0-596-00565-8},
  pagetotal = {923},
  publisher = {{O'Reilly}},
  date = {2006},
  keywords = {Linux,Operating systems (Computers)},
  author = {Bovet, Daniel P. and Cesati, Marco},
  file = {/home/amos/Zotero/storage/WCHR4DXX/Understanding The Linux kernel.pdf}
}

@inproceedings{yabandehCritiqueSnapshotIsolation2012,
  title = {A Critique of Snapshot Isolation},
  url = {http://dl.acm.org/citation.cfm?id=2168853},
  booktitle = {Proceedings of the 7th {{ACM}} European Conference on {{Computer Systems}}},
  publisher = {{ACM}},
  urldate = {2017-01-17},
  date = {2012},
  pages = {155--168},
  keywords = {distributed data stores,HBase,key-value stores,lock-free transactional support,read-write conflict,serializability,snapshot isolation,transactions,write-write conflict},
  author = {Yabandeh, Maysam and GÃ³mez Ferro, Daniel},
  file = {/home/amos/Zotero/storage/9PC29G58/0B9GCVTp_FHJIMjJ2U2t6aGpHLTFUVHFnMTRUbnBwc2pLa1RN.pdf;/home/amos/Zotero/storage/T7PVBTBM/A Critique of Snapshot Isolation.pdf}
}

@article{graefeVolcanoanExtensibleParallel1994,
  title = {Volcano-an Extensible and Parallel Query Evaluation System},
  volume = {6},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=273032},
  number = {1},
  journaltitle = {IEEE Transactions on Knowledge and Data Engineering},
  urldate = {2016-08-17},
  date = {1994},
  pages = {120--135},
  author = {Graefe, Goetz},
  file = {/home/amos/Zotero/storage/8F7P7FT8/dace52a42c07f7f8348b08dc2b186061.pdf;/home/amos/Zotero/storage/K25597NN/Volcano.pdf}
}

@inproceedings{herodotouQueryOptimizationTechniques2011,
  title = {Query Optimization Techniques for Partitioned Tables},
  url = {http://dl.acm.org/citation.cfm?id=1989330},
  booktitle = {Proceedings of the 2011 {{ACM SIGMOD International Conference}} on {{Management}} of Data},
  publisher = {{ACM}},
  urldate = {2016-09-07},
  date = {2011},
  pages = {49--60},
  author = {Herodotou, Herodotos and Borisov, Nedyalko and Babu, Shivnath},
  file = {/home/amos/Zotero/storage/DBTAHGVT/p49-herodotou.pdf}
}

@book{chassellIntroductionProgrammingEmacs2002,
  langid = {english},
  location = {{Boston}},
  title = {An Introduction to Programming in {{Emacs Lisp}}},
  isbn = {978-1-882114-43-6},
  publisher = {{Free Software Foundation}},
  date = {2002},
  author = {Chassell, Robert J},
  file = {/home/amos/Zotero/storage/FERKANAM/eintr.pdf},
  note = {OCLC: 50953297}
}

@article{debrabantAnticachingNewApproach2013,
  title = {Anti-Caching: {{A}} New Approach to Database Management System Architecture},
  volume = {6},
  url = {http://dl.acm.org/citation.cfm?id=2556575},
  shorttitle = {Anti-Caching},
  number = {14},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2013},
  pages = {1942--1953},
  author = {DeBrabant, Justin and Pavlo, Andrew and Tu, Stephen and Stonebraker, Michael and Zdonik, Stan},
  file = {/home/amos/Zotero/storage/V2J6X3FR/p1942-debrabant.pdf}
}

@article{giannikisSharedWorkloadOptimization2014,
  title = {Shared Workload Optimization},
  volume = {7},
  url = {http://dl.acm.org/citation.cfm?id=2732280},
  number = {6},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-01-09},
  date = {2014},
  pages = {429--440},
  author = {Giannikis, Georgios and Makreshanski, Darko and Alonso, Gustavo and Kossmann, Donald},
  file = {/home/amos/Zotero/storage/ZB87CWJ9/p429-giannikis.pdf}
}

@article{slezakBrighthouseAnalyticData2008,
  title = {Brighthouse: An Analytic Data Warehouse for Ad-Hoc Queries},
  volume = {1},
  url = {http://dl.acm.org/citation.cfm?id=1454174},
  shorttitle = {Brighthouse},
  number = {2},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-08-15},
  date = {2008},
  pages = {1337--1345},
  author = {ÅlÈ©zak, Dominik and WrÃ³blewski, Jakub and Eastwood, Victoria and Synak, Piotr},
  file = {/home/amos/Zotero/storage/5WKISZNT/1454174.pdf;/home/amos/Zotero/storage/86MB3DAQ/Slezak et al_2008_Brighthouse.pdf;/home/amos/Zotero/storage/E5DCAJ3Q/ÅlÈ©zak et al. - 2008 - Brighthouse an analytic data warehouse for ad-hoc.pdf;/home/amos/Zotero/storage/Y7PQVCM3/Brighthouse - An Analytic Data Warehouse for Ad-hoc Queries.pdf}
}

@article{yangComprehensiveSurveyJoin1997,
  title = {A Comprehensive Survey of Join Techniques in Relational Databases},
  volume = {48},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.37.9987&rep=rep1&type=pdf},
  journaltitle = {Computer and Information Science TR},
  urldate = {2016-09-14},
  date = {1997},
  author = {Yang, Yuping and Singhal, Mukesh},
  file = {/home/amos/Zotero/storage/C67SKCBA/Yang and Singhal - 1997 - A comprehensive survey of join techniques in relat.pdf}
}

@unpublished{ModernSql,
  title = {Modern Sql},
  url = {http://s3.amazonaws.com/ppt-download/modernsqlinpostgresql-150130134147-conversion-gate01.pdf?response-content-disposition=attachment&Signature=5SPLDV9aIEBPlhpqcNM0XnppsOc%3D&Expires=1479456621&AWSAccessKeyId=AKIAJ6D6SEMXSASXHDAQ},
  urldate = {2016-11-18},
  file = {/home/amos/Zotero/storage/VDAQWG2D/modern sql.pdf}
}

@article{hellersteinArchitectureDatabaseSystem2007,
  langid = {english},
  title = {Architecture of a {{Database System}}},
  volume = {1},
  issn = {1931-7883, 1931-7891},
  url = {http://www.nowpublishers.com/article/Details/DBS-002},
  doi = {10.1561/1900000002},
  number = {2},
  journaltitle = {Foundations and TrendsÂ® in Databases},
  urldate = {2016-09-14},
  date = {2007},
  pages = {141-259},
  author = {Hellerstein, Joseph M. and Stonebraker, Michael and Hamilton, James},
  file = {/home/amos/Zotero/storage/VMSSQRW4/Hellerstein et al. - 2007 - Architecture of a Database System.pdf}
}

@article{babuMassivelyParallelDatabases,
  title = {Massively {{Parallel Databases}} and {{MapReduce Systems}}},
  url = {https://www.cut.ac.cy/digitalAssets/virtualPath/120/120195_2013-FnTDB-Survey.pdf},
  urldate = {2016-07-12},
  author = {Babu, Shivnath and Herodotou, Herodotos},
  file = {/home/amos/Zotero/storage/PEZBF45R/Massively Parallel Databases and MapReduce Systems.pdf;/home/amos/Zotero/storage/XM3WRX9C/Babu and Herodotou - Massively Parallel Databases and MapReduce Systems.pdf}
}

@book{goetzJavaConcurrencyPractice2006,
  location = {{Upper Saddle River, NJ}},
  title = {Java Concurrency in Practice},
  isbn = {978-0-321-34960-6},
  pagetotal = {403},
  publisher = {{Addison-Wesley}},
  date = {2006},
  keywords = {Java (Computer program language),Parallel programming (Computer science),Threads (Computer programs)},
  author = {Goetz, Brian},
  file = {/home/amos/Zotero/storage/PPAG5TPJ/Java Concurrency in Practice.pdf},
  note = {OCLC: ocm66527178}
}

@article{alvesTechnicalReportHybridTimeAccessible,
  title = {Technical {{Report}}: {{HybridTime}}-{{Accessible Global Consistency}} with {{High Clock Uncertainty}}},
  url = {http://users.ece.utexas.edu/~garg/pdslab/david/hybrid-time-tech-report-01.pdf},
  shorttitle = {Technical {{Report}}},
  urldate = {2016-12-21},
  author = {Alves, David and Lipcon, Todd and Garg, Vijay},
  file = {/home/amos/Zotero/storage/WHG6K2X6/hybrid-time-tech-report-01.pdf}
}

@inproceedings{ivesSidewaysInformationPassing,
  title = {Sideways {{Information Passing}} for {{Push}}-{{Style Query Processing}}},
  url = {https://www.infona.pl/resource/bwmeta1.element.ieee-art-000004497486},
  booktitle = {2008 {{IEEE}} 24th {{International Conference}} on {{Data Engineering}}},
  urldate = {2016-07-11},
  author = {Ives, Z. G. and Taylor, N. E.},
  file = {/home/amos/Zotero/storage/FCA2HUIC/Ives and Taylor - Sideways Information Passing for Push-Style Query .pdf}
}

@book{gangulyQueryOptimizationParallel1992,
  title = {Query Optimization for Parallel Execution},
  volume = {21},
  url = {http://dl.acm.org/citation.cfm?id=130291},
  number = {2},
  publisher = {{ACM}},
  urldate = {2016-09-14},
  date = {1992},
  author = {Ganguly, Sumit and Hasan, Waqar and Krishnamurthy, Ravi},
  file = {/home/amos/Zotero/storage/2K6K8K3V/Ganguly et al. - 1992 - Query optimization for parallel execution.pdf}
}

@inproceedings{barberWildfireConcurrentBlazing2016,
  langid = {english},
  title = {Wildfire: {{Concurrent Blazing Data Ingest}} and {{Analytics}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2899406},
  doi = {10.1145/2882903.2899406},
  shorttitle = {Wildfire},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {2077-2080},
  author = {Barber, Ronald and Sidorkin, Oleg and Storm, Adam and Tian, Yuanyuan and TÃ¶zun, Pinar and Huras, Matt and Lohman, Guy and Mohan, C. and Mueller, Rene and Ãzcan, Fatma and Pirahesh, Hamid and Raman, Vijayshankar and Sidle, Richard},
  file = {/home/amos/Zotero/storage/TF7KTGXE/wildfire.pdf}
}

@article{kabalanAdaptiveLoadSharing2002,
  title = {Adaptive Load Sharing in Heterogeneous Systems: {{Policies}}, Modifications, and Simulation},
  volume = {3},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.3088&rep=rep1&type=pdf},
  shorttitle = {Adaptive Load Sharing in Heterogeneous Systems},
  number = {1-2},
  journaltitle = {International Journal of Simulation, Systems, Science and Technology},
  urldate = {2016-08-17},
  date = {2002},
  pages = {89--100},
  author = {Kabalan, Karim Y. and Smari, Waleed W. and Hakimian, Jacques Y.},
  file = {/home/amos/Zotero/storage/RJIKARJU/Kabalan et al. - 2002 - Adaptive load sharing in heterogeneous systems Po.pdf}
}

@article{danBSPlibBSPProgramming,
  title = {{{BSPlib}}: {{The BSP Programming Library}}},
  url = {http://engineering.nyu.edu/~suel/papers/bspprop.pdf},
  shorttitle = {{{BSPlib}}},
  urldate = {2016-12-21},
  author = {Dan, Jonathan MD Hilla Bill McColla and Stefanescub, C. and Satish, Mark W. Goudreaud Kevin Lange and Raoe, B.},
  file = {/home/amos/Zotero/storage/VE48QNSE/bspprop.pdf}
}

@inproceedings{crottyTuplewareBigData2015,
  title = {Tupleware:" {{Big}}" {{Data}}, {{Big Analytics}}, {{Small Clusters}}.},
  url = {http://cidrdb.org/cidr2015/Papers/CIDR15_Paper23u.pdf},
  shorttitle = {Tupleware},
  booktitle = {{{CIDR}}},
  urldate = {2016-12-21},
  date = {2015},
  author = {Crotty, Andrew and Galakatos, Alex and Dursun, Kayhan and Kraska, Tim and Cetintemel, Ugur and Zdonik, Stanley B.},
  file = {/home/amos/Zotero/storage/BPCDGSD8/CIDR15_Paper23u.pdf}
}

@book{arndtMattersComputationalIdeas2010,
  title = {Matters {{Computational}}: Ideas, Algorithms, Source Code},
  url = {https://books.google.com/books?hl=en&lr=&id=HsRHS6u7e80C&oi=fnd&pg=PR3&dq=%22Algorithms,+Source%22+%22Functions+related+to+the+base-2+logarithm+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.%22+&ots=o5aPBKbYSv&sig=luB7G3R0JPoe4u88JDGFcDb79mY},
  shorttitle = {Matters {{Computational}}},
  publisher = {{Springer Science \& Business Media}},
  urldate = {2016-08-11},
  date = {2010},
  author = {Arndt, JÃ¶rg},
  file = {/home/amos/Zotero/storage/H7KKQ7XH/fxtbook.pdf}
}

@article{dobreParallelProgrammingParadigms2013,
  langid = {english},
  title = {Parallel {{Programming Paradigms}} and {{Frameworks}} in {{Big Data Era}}},
  volume = {42},
  issn = {0885-7458, 1573-7640},
  url = {http://link.springer.com/article/10.1007/s10766-013-0272-7},
  doi = {10.1007/s10766-013-0272-7},
  abstract = {With Cloud Computing emerging as a promising new approach for ad-hoc parallel data processing, major companies have started to integrate frameworks for parallel data processing in their product portfolio, making it easy for customers to access these services and to deploy their programs. We have entered the Era of Big Data. The explosion and profusion of available data in a wide range of application domains rise up new challenges and opportunities in a plethora of disciplinesâranging from science and engineering to biology and business. One major challenge is how to take advantage of the unprecedented scale of dataâtypically of heterogeneous natureâin order to acquire further insights and knowledge for improving the quality of the offered services. To exploit this new resource, we need to scale up and scale out both our infrastructures and standard techniques. Our society is already data-rich, but the question remains whether or not we have the conceptual tools to handle it. In this paper we discuss and analyze opportunities and challenges for efficient parallel data processing. Big Data is the next frontier for innovation, competition, and productivity, and many solutions continue to appear, partly supported by the considerable enthusiasm around the MapReduce paradigm for large-scale data analysis. We review various parallel and distributed programming paradigms, analyzing how they fit into the Big Data era, and present modern emerging paradigms and frameworks. To better support practitioners interesting in this domain, we end with an analysis of on-going research challenges towards the truly fourth generation data-intensive science.},
  number = {5},
  journaltitle = {International Journal of Parallel Programming},
  shortjournal = {Int J Parallel Prog},
  urldate = {2016-06-29},
  date = {2013-09-01},
  pages = {710-738},
  author = {Dobre, Ciprian and Xhafa, Fatos},
  file = {/home/amos/Zotero/storage/CBE4FBF8/Dobre and Xhafa - 2013 - Parallel Programming Paradigms and Frameworks in B.pdf}
}

@article{boutinJetScopeReliableInteractive2015,
  title = {{{JetScope}}: Reliable and Interactive Analytics at Cloud Scale},
  volume = {8},
  url = {http://dl.acm.org/citation.cfm?id=2824066},
  shorttitle = {{{JetScope}}},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-09-07},
  date = {2015},
  pages = {1680--1691},
  author = {Boutin, Eric and Brett, Paul and Chen, Xiaoyu and Ekanayake, Jaliya and Guan, Tao and Korsun, Anna and Yin, Zhicheng and Zhang, Nan and Zhou, Jingren},
  file = {/home/amos/Zotero/storage/S9K7JXKM/p1680-boutin.pdf}
}

@thesis{funkeAdaptivePhysicalOptimization2015,
  title = {Adaptive {{Physical Optimization}} in {{Hybrid OLTP}} \& {{OLAP Main}}-{{Memory Database Systems}}},
  url = {https://mediatum.ub.tum.de/doc/1241455/1241455.pdf},
  urldate = {2016-12-21},
  date = {2015},
  author = {Funke, Florian Andreas},
  file = {/home/amos/Zotero/storage/9X6PBUVW/1241455.pdf}
}

@online{HuanYingFangWenZhongGuoKeXueYuanJiSuanJiZhuYanJiuSuoTuShuGuan,
  title = {æ¬¢è¿è®¿é®ä¸­å½ç§å­¦é¢è®¡ç®ææ¯ç ç©¶æå¾ä¹¦é¦},
  url = {http://lib.ict.ac.cn/},
  urldate = {2016-08-29}
}

@article{qiaoMainmemoryScanSharing2008,
  title = {Main-Memory Scan Sharing for Multi-Core {{CPUs}}},
  volume = {1},
  url = {http://dl.acm.org/citation.cfm?id=1453924},
  number = {1},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2008},
  pages = {610--621},
  author = {Qiao, Lin and Raman, Vijayshankar and Reiss, Frederick and Haas, Peter J. and Lohman, Guy M.},
  file = {/home/amos/Zotero/storage/NM67WCD3/1453924.pdf}
}

@inproceedings{bonczMonetDBX100HyperPipelining2005,
  title = {{{MonetDB}}/{{X100}}: {{Hyper}}-{{Pipelining Query Execution}}.},
  volume = {5},
  url = {https://www.researchgate.net/profile/Niels_Nes/publication/45338800_MonetDBX100_Hyper-Pipelining_Query_Execution/links/0deec520cd1e8a3607000000.pdf},
  shorttitle = {{{MonetDB}}/{{X100}}},
  booktitle = {{{CIDR}}},
  urldate = {2016-12-21},
  date = {2005},
  pages = {225--237},
  author = {Boncz, Peter A. and Zukowski, Marcin and Nes, Niels},
  file = {/home/amos/Zotero/storage/6SCSUBUA/P19.pdf}
}

@article{chattopadhyayTenzingSqlImplementation2011,
  title = {Tenzing a Sql Implementation on the Mapreduce Framework},
  url = {https://research.google.com/pubs/pub37200.html},
  urldate = {2016-09-07},
  date = {2011},
  author = {Chattopadhyay, Biswapesh and Lin, Liang and Liu, Weiran and Mittal, Sagar and Aragonda, Prathyusha and Lychagina, Vera and Kwon, Younghee and Wong, Michael},
  file = {/home/amos/Zotero/storage/E9S5M9DC/37200.pdf}
}

@inproceedings{larusUsingCohortScheduling2001,
  title = {Using Cohort Scheduling to Enhance Server Performance},
  volume = {36},
  url = {http://dl.acm.org/citation.cfm?id=384222},
  booktitle = {{{ACM SIGPLAN Notices}}},
  publisher = {{ACM}},
  urldate = {2016-08-17},
  date = {2001},
  pages = {182--187},
  author = {Larus, James R. and Parkes, Michael},
  file = {/home/amos/Zotero/storage/N5N9UK2T/p182-larus.pdf}
}

@article{ramanDB2BLUAcceleration2013,
  title = {{{DB2}} with {{BLU}} Acceleration: So Much More than Just a Column Store},
  volume = {6},
  url = {http://dl.acm.org/citation.cfm?id=2536233},
  shorttitle = {{{DB2}} with {{BLU}} Acceleration},
  number = {11},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-09-14},
  date = {2013},
  pages = {1080--1091},
  author = {Raman, Vijayshankar and Attaluri, Gopi and Barber, Ronald and Chainani, Naresh and Kalmuk, David and KulandaiSamy, Vincent and Leenstra, Jens and Lightstone, Sam and Liu, Shaorong and Lohman, Guy M. and others},
  file = {/home/amos/Zotero/storage/BBYBEWR3/DB2 with BLU Acceleration - So Much More than Just a Column Store.pdf;/home/amos/Zotero/storage/Q4QWX4CS/vldb13db2blu.pdf}
}

@article{lampingFastMinimalMemory2014,
  title = {A Fast, Minimal Memory, Consistent Hash Algorithm},
  url = {http://arxiv.org/abs/1406.2294},
  journaltitle = {arXiv preprint arXiv:1406.2294},
  urldate = {2017-01-13},
  date = {2014},
  author = {Lamping, John and Veach, Eric},
  file = {/home/amos/Zotero/storage/XPQAE3KJ/1406.2294v1.pdf}
}

@inproceedings{guptaAmazonRedshiftCase2015,
  langid = {english},
  title = {Amazon {{Redshift}} and the {{Case}} for {{Simpler Data Warehouses}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2742795},
  doi = {10.1145/2723372.2742795},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2015},
  pages = {1917-1923},
  author = {Gupta, Anurag and Agarwal, Deepak and Tan, Derek and Kulesza, Jakub and Pathak, Rahul and Stefani, Stefano and Srinivasan, Vidhya},
  file = {/home/amos/Zotero/storage/WQ2MVB5C/p1917-gupta.pdf}
}

@unpublished{RelationalAlgebra,
  title = {Relational {{Algebra}}},
  url = {http://infolab.stanford.edu/~ullman/fcdb/aut07/slides/ra.pdf},
  urldate = {2016-12-21},
  file = {/home/amos/Zotero/storage/ANQNFTGM/ra.pdf}
}

@online{ImpalaWiki,
  title = {Impala {{Wiki}}},
  url = {https://cwiki.apache.org/confluence/display/IMPALA/Impala+Home},
  urldate = {2016-09-21}
}

@article{birmanPromiseLimitationsGossip2007,
  title = {The Promise, and Limitations, of Gossip Protocols},
  volume = {41},
  url = {http://dl.acm.org/citation.cfm?id=1317382},
  number = {5},
  journaltitle = {ACM SIGOPS Operating Systems Review},
  urldate = {2017-01-18},
  date = {2007},
  pages = {8--13},
  author = {Birman, Ken},
  file = {/home/amos/Zotero/storage/N5A5GZB5/p8-birman.pdf}
}

@book{alexandrescuModernDesignGeneric2001,
  location = {{Boston, MA}},
  title = {Modern {{C}}++ Design: Generic Programming and Design Patterns Applied},
  isbn = {978-0-201-70431-0},
  shorttitle = {Modern {{C}}++ Design},
  pagetotal = {323},
  series = {C++ In-Depth Series},
  publisher = {{Addison-Wesley}},
  date = {2001},
  keywords = {C++ (Computer program language),Generic programming (Computer science)},
  author = {Alexandrescu, Andrei},
  file = {/home/amos/Zotero/storage/9QR9ZAMB/Modern C++ Design .pdf;/home/amos/Zotero/storage/XK5LMAPC/Modern C++ Design - Generic Programming and Design Patterns Applied.pdf}
}

@inproceedings{ousterhoutSparrowDistributedLow2013,
  langid = {english},
  title = {Sparrow: Distributed, Low Latency Scheduling},
  isbn = {978-1-4503-2388-8},
  url = {http://dl.acm.org/citation.cfm?doid=2517349.2522716},
  doi = {10.1145/2517349.2522716},
  shorttitle = {Sparrow},
  publisher = {{ACM Press}},
  urldate = {2016-08-17},
  date = {2013},
  pages = {69-84},
  author = {Ousterhout, Kay and Wendell, Patrick and Zaharia, Matei and Stoica, Ion},
  file = {/home/amos/Zotero/storage/5ER2TM2U/p69-ousterhout.pdf;/home/amos/Zotero/storage/TIJGTXDC/p69-ousterhout.pdf}
}

@article{howardARCAnalysisRaft2014,
  title = {{{ARC}}: Analysis of {{Raft}} Consensus},
  url = {http://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-857.pdf?utm_medium=App.net&utm_source=PourOver},
  shorttitle = {{{ARC}}},
  journaltitle = {Technical Report UCAM-CL-TR-857},
  urldate = {2017-01-16},
  date = {2014},
  author = {Howard, Heidi},
  file = {/home/amos/Zotero/storage/UT9WU7D3/UCAM-CL-TR-857.pdf}
}

@online{IUSCommunityProject,
  title = {{{IUS Community Project}}},
  url = {https://ius.io/Usage/},
  urldate = {2016-10-13}
}

@article{kumarComprehensiveReviewStraggler2014,
  title = {A {{Comprehensive Review}} of {{Straggler Handling Algorithms}} for {{MapReduce Framework}}},
  volume = {7},
  issn = {20054262, 20054262},
  url = {http://www.sersc.org/journals/IJGDC/vol7_no4/13.pdf},
  doi = {10.14257/ijgdc.2014.7.4.13},
  number = {4},
  journaltitle = {International Journal of Grid and Distributed Computing},
  urldate = {2016-08-15},
  date = {2014-08-31},
  pages = {139-148},
  author = {Kumar, Umesh and Kumar, Jitendar},
  file = {/home/amos/Zotero/storage/R5FBE3MX/13.pdf}
}

@article{floratouSqlonhadoopFullCircle2014,
  title = {Sql-on-Hadoop: {{Full}} Circle Back to Shared-Nothing Database Architectures},
  volume = {7},
  url = {http://dl.acm.org/citation.cfm?id=2733002},
  shorttitle = {Sql-on-Hadoop},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-08-17},
  date = {2014},
  pages = {1295--1306},
  author = {Floratou, Avrilia and Minhas, Umar Farooq and Ãzcan, Fatma},
  file = {/home/amos/Zotero/storage/7B465ZDE/p1295-floratou.pdf}
}

@thesis{ongaroConsensusBridgingTheory2014,
  title = {Consensus: {{Bridging}} Theory and Practice},
  url = {http://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf},
  shorttitle = {Consensus},
  institution = {{STANFORD UNIVERSITY}},
  urldate = {2017-01-16},
  date = {2014},
  author = {Ongaro, Diego},
  file = {/home/amos/Zotero/storage/2RXFFFZH/thesis.pdf}
}

@inproceedings{usenixassociationEfficientAvailableInmemory2005,
  langid = {english},
  location = {{Berkeley, Calif}},
  title = {Efficient and {{Available In}}-Memory {{KV}}-{{Store}} with {{Hybrid Erasure Coding}} and {{Replication}}},
  isbn = {978-1-931971-28-7},
  shorttitle = {Proceedings of the {{FREENIX}}/Open Source Track, 2005 {{USENIX}} Annual Technical Conference},
  publisher = {{USENIX Assiation}},
  date = {2005},
  editor = {{USENIX Association}},
  file = {/home/amos/Zotero/storage/BACRWKHZ/fast16-papers-zhang-heng.pdf},
  note = {OCLC: 254980354}
}

@inproceedings{chandraPaxosMadeLive2007,
  title = {Paxos Made Live: An Engineering Perspective},
  url = {http://dl.acm.org/citation.cfm?id=1281103},
  shorttitle = {Paxos Made Live},
  booktitle = {Proceedings of the Twenty-Sixth Annual {{ACM}} Symposium on {{Principles}} of Distributed Computing},
  publisher = {{ACM}},
  urldate = {2016-12-21},
  date = {2007},
  pages = {398--407},
  author = {Chandra, Tushar D. and Griesemer, Robert and Redstone, Joshua},
  file = {/home/amos/Zotero/storage/EM2KSGKN/paper2-1.pdf}
}

@inproceedings{schuhExperimentalComparisonThirteen2016,
  langid = {english},
  title = {An {{Experimental Comparison}} of {{Thirteen Relational Equi}}-{{Joins}} in {{Main Memory}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2882917},
  doi = {10.1145/2882903.2882917},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {1961-1976},
  author = {Schuh, Stefan and Chen, Xiao and Dittrich, Jens},
  file = {/home/amos/Zotero/storage/FPM5SUE7/An Experimental Comparison of Thirteen Relational Equi-Joins in Main Memory.pdf}
}

@article{dewittParallelDatabaseSystems1992,
  title = {Parallel {{Database Systems}}: {{The Future}} of {{High Performance Database Processing1}}},
  volume = {36},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.480.46&rep=rep1&type=pdf},
  shorttitle = {Parallel {{Database Systems}}},
  number = {6},
  journaltitle = {Appeared in Communications of the ACM},
  urldate = {2016-09-14},
  date = {1992},
  author = {DeWitt, David J. and Gray, Jim},
  file = {/home/amos/Zotero/storage/G3D56BRM/CacmParallelDB.pdf}
}

@inproceedings{koliousisSABERWindowBasedHybrid2016,
  langid = {english},
  title = {{{SABER}}: {{Window}}-{{Based Hybrid Stream Processing}} for {{Heterogeneous Architectures}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2882906},
  doi = {10.1145/2882903.2882906},
  shorttitle = {{{SABER}}},
  publisher = {{ACM Press}},
  urldate = {2016-12-21},
  date = {2016},
  pages = {555-569},
  author = {Koliousis, Alexandros and Weidlich, Matthias and Castro Fernandez, Raul and Wolf, Alexander L. and Costa, Paolo and Pietzuch, Peter},
  file = {/home/amos/Zotero/storage/MZP3VNH5/saber-sigmod16.pdf}
}

@article{chenInterleavingJoinSequence1992,
  title = {Interleaving a Join Sequence with Semijoins in Distributed Query Processing},
  volume = {3},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=159044},
  number = {5},
  journaltitle = {IEEE Transactions on Parallel and Distributed Systems},
  urldate = {2016-09-14},
  date = {1992},
  pages = {611--621},
  author = {Chen, M.-S. and Yu, Philip S.},
  file = {/home/amos/Zotero/storage/6QSUPASM/5625059f08aeabddac91b200.pdf}
}

@article{palkarWeldCommonRuntime,
  title = {Weld: {{A Common Runtime}} for {{High Performance Data Analytics}}},
  url = {http://cidrdb.org/cidr2017/papers/p127-palkar-cidr17.pdf},
  shorttitle = {Weld},
  urldate = {2017-01-17},
  author = {Palkar, Shoumik and Thomas, James J. and Shanbhag, Anil and Narayanan, Deepak and Pirk, Holger and Schwarzkopf, Malte and Amarasinghe, Saman and Zaharia, Matei and InfoLab, Stanford},
  file = {/home/amos/Zotero/storage/5EM7UDPV/cidr_weld.pdf}
}

@article{candeaScalablePredictableJoin2009,
  title = {A Scalable, Predictable Join Operator for Highly Concurrent Data Warehouses},
  volume = {2},
  url = {http://dl.acm.org/citation.cfm?id=1687659},
  number = {1},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-01-09},
  date = {2009},
  pages = {277--288},
  author = {Candea, George and Polyzotis, Neoklis and Vingralek, Radek},
  file = {/home/amos/Zotero/storage/469XQNCK/p277-candea.pdf}
}

@inproceedings{ongaroSearchUnderstandableConsensus2014,
  title = {In Search of an Understandable Consensus Algorithm},
  url = {https://www.usenix.org/conference/atc14/technical-sessions/presentation/ongaro},
  booktitle = {2014 {{USENIX Annual Technical Conference}} ({{USENIX ATC}} 14)},
  urldate = {2017-01-16},
  date = {2014},
  pages = {305--319},
  author = {Ongaro, Diego and Ousterhout, John},
  file = {/home/amos/Zotero/storage/5PK4P6BX/raft.pdf}
}

@article{chenMemSQLQueryOptimizer2016,
  title = {The {{MemSQL Query Optimizer}}: {{A}} Modern Optimizer for Real-Time Analytics in a Distributed Database},
  volume = {9},
  url = {http://dl.acm.org/citation.cfm?id=3007277},
  shorttitle = {The {{MemSQL Query Optimizer}}},
  number = {13},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2016},
  pages = {1401--1412},
  author = {Chen, Jack and Jindel, Samir and Walzer, Robert and Sen, Rajkumar and Jimsheleishvilli, Nika and Andrews, Michael},
  file = {/home/amos/Zotero/storage/JTEPH4TE/p1401-chen.pdf}
}

@article{corbettSpannerGoogleGlobally2013,
  title = {Spanner: {{Google}}âs Globally Distributed Database},
  volume = {31},
  url = {http://dl.acm.org/citation.cfm?id=2491245},
  shorttitle = {Spanner},
  number = {3},
  journaltitle = {ACM Transactions on Computer Systems (TOCS)},
  urldate = {2017-01-06},
  date = {2013},
  pages = {8},
  author = {Corbett, James C. and Dean, Jeffrey and Epstein, Michael and Fikes, Andrew and Frost, Christopher and Furman, Jeffrey John and Ghemawat, Sanjay and Gubarev, Andrey and Heiser, Christopher and Hochschild, Peter and others},
  file = {/home/amos/Zotero/storage/F9GJQS5U/spanner-osdi2012.pdf}
}

@article{voLogBaseScalableLogstructured2012,
  title = {{{LogBase}}: A Scalable Log-Structured Database System in the Cloud},
  volume = {5},
  url = {http://dl.acm.org/citation.cfm?id=2336673},
  shorttitle = {{{LogBase}}},
  number = {10},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2012},
  pages = {1004--1015},
  author = {Vo, Hoang Tam and Wang, Sheng and Agrawal, Divyakant and Chen, Gang and Ooi, Beng Chin},
  file = {/home/amos/Zotero/storage/UUEH4NAA/p1004_hoangtamvo_vldb2012.pdf}
}

@online{JiSuanSuoRenDingDeGongBoShiShengXuanZeDeXiangGuanKanWuYuGuoJiHuiYi2016Pdf,
  title = {è®¡ç®æè®¤å®çä¾åå£«çéæ©çç¸å³åç©ä¸å½éä¼è®®2016.Pdf},
  url = {file:///tmp/mu-1000/50c280a9/4/%E8%AE%A1%E7%AE%97%E6%89%80%E8%AE%A4%E5%AE%9A%E7%9A%84%E4%BE%9B%E5%8D%9A%E5%A3%AB%E7%94%9F%E9%80%89%E6%8B%A9%E7%9A%84%E7%9B%B8%E5%85%B3%E5%88%8A%E7%89%A9%E4%B8%8E%E5%9B%BD%E9%99%85%E4%BC%9A%E8%AE%AE2016.pdf},
  urldate = {2016-09-28}
}

@article{caoOptimizationAnalyticWindow2012,
  title = {Optimization of Analytic Window Functions},
  volume = {5},
  url = {http://dl.acm.org/citation.cfm?id=2350243},
  number = {11},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2016-12-21},
  date = {2012},
  pages = {1244--1255},
  author = {Cao, Yu and Chan, Chee-Yong and Li, Jie and Tan, Kian-Lee},
  file = {/home/amos/Zotero/storage/AWUCRRAK/p1244_yucao_vldb2012.pdf}
}

@article{deanTailScale2013,
  title = {The {{Tail}} at {{Scale}}},
  volume = {56},
  issn = {0001-0782},
  url = {http://doi.acm.org/10.1145/2408776.2408794},
  doi = {10.1145/2408776.2408794},
  number = {2},
  journaltitle = {Commun. ACM},
  urldate = {2016-06-29},
  date = {2013-02},
  pages = {74--80},
  author = {Dean, Jeffrey and Barroso, Luiz AndrÃ©},
  file = {/home/amos/Zotero/storage/W5CEQ8IQ/Dean and Barroso - 2013 - The Tail at Scale.pdf}
}

@unpublished{HyPerCloud9,
  title = {{{HyPer On Cloud9}}},
  url = {http://db.in.tum.de/hosted/dbinthecloud/HyPerOnCloud9.pdf},
  urldate = {2016-12-21},
  file = {/home/amos/Zotero/storage/RDG6KXQ6/HyPerOnCloud9.pdf}
}

@inproceedings{zahariaImprovingMapReducePerformance2008,
  title = {Improving {{MapReduce Performance}} in {{Heterogeneous Environments}}.},
  volume = {8},
  url = {http://static.usenix.org/legacy/events/osdi08/tech/full_papers/zaharia/zaharia_html/},
  booktitle = {{{OSDI}}},
  urldate = {2016-08-16},
  date = {2008},
  pages = {7},
  author = {Zaharia, Matei and Konwinski, Andy and Joseph, Anthony D. and Katz, Randy H. and Stoica, Ion},
  file = {/home/amos/Zotero/storage/EIDUHTH9/osdi_late.pdf}
}

@inproceedings{chambersFlumeJavaEasyEfficient2010,
  title = {{{FlumeJava}}: Easy, Efficient Data-Parallel Pipelines},
  volume = {45},
  url = {http://dl.acm.org/citation.cfm?id=1806638},
  shorttitle = {{{FlumeJava}}},
  booktitle = {{{ACM Sigplan Notices}}},
  publisher = {{ACM}},
  urldate = {2016-12-21},
  date = {2010},
  pages = {363--375},
  author = {Chambers, Craig and Raniwala, Ashish and Perry, Frances and Adams, Stephen and Henry, Robert R. and Bradshaw, Robert and Weizenbaum, Nathan},
  file = {/home/amos/Zotero/storage/CG3VDUHF/35650.pdf}
}

@online{__????-1,
  title = {What Is Ramfs},
  url = {https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt},
  urldate = {2016-08-30},
  date = {2005},
  author = {Landley, Rob},
  file = {/home/amos/Zotero/storage/R6QWDZVN/ramfs-rootfs-initramfs.txt}
}

@article{graefe1995cascades,
  title = {The Cascades Framework for Query Optimization},
  author = {Graefe, Goetz},
  file = {/home/amos/Zotero/storage/5B6D38ZD/Graefe - The cascades framework for query optimization.pdf}
}

@article{mitzenmacherPowerTwoChoices2001,
  title = {The Power of Two Choices in Randomized Load Balancing},
  volume = {12},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=963420},
  number = {10},
  journaltitle = {IEEE Transactions on Parallel and Distributed Systems},
  urldate = {2016-10-03},
  date = {2001},
  pages = {1094--1104},
  author = {Mitzenmacher, Michael},
  file = {/home/amos/Zotero/storage/ZTUAHCH6/00963420.pdf}
}

@online{SciHubRemovingBarriers,
  title = {Sci-{{Hub}}: Removing Barriers in the Way of Science},
  url = {http://www.sci-hub.cc/},
  shorttitle = {Sci-{{Hub}}},
  abstract = {The first pirate website in the world to open mass and public access to tens of millions research papers},
  urldate = {2016-09-02}
}

@inproceedings{arumugamDataPathSystemDatacentric2010,
  title = {The {{DataPath}} System: A Data-Centric Analytic Processing Engine for Large Data Warehouses},
  url = {http://dl.acm.org/citation.cfm?id=1807224},
  shorttitle = {The {{DataPath}} System},
  booktitle = {Proceedings of the 2010 {{ACM SIGMOD International Conference}} on {{Management}} of Data},
  publisher = {{ACM}},
  urldate = {2016-08-15},
  date = {2010},
  pages = {519--530},
  author = {Arumugam, Subi and Dobra, Alin and Jermaine, Christopher M. and Pansare, Niketan and Perez, Luis},
  file = {/home/amos/Zotero/storage/Q7A4FVQF/Arumugam et al. - 2010 - The DataPath system a data-centric analytic proce.pdf}
}

@inproceedings{pavloComparisonApproachesLargescale2009,
  title = {A Comparison of Approaches to Large-Scale Data Analysis},
  url = {http://dl.acm.org/citation.cfm?id=1559865},
  booktitle = {Proceedings of the 2009 {{ACM SIGMOD International Conference}} on {{Management}} of Data},
  publisher = {{ACM}},
  urldate = {2016-08-15},
  date = {2009},
  pages = {165--178},
  author = {Pavlo, Andrew and Paulson, Erik and Rasin, Alexander and Abadi, Daniel J. and DeWitt, David J. and Madden, Samuel and Stonebraker, Michael},
  file = {/home/amos/Zotero/storage/BBKIN9T6/Pavlo et al. - 2009 - A comparison of approaches to large-scale data ana.pdf}
}

@article{khetrapalHBaseHypertableLarge2006,
  title = {{{HBase}} and {{Hypertable}} for Large Scale Distributed Storage Systems},
  url = {http://cloud.pubs.dbs.uni-leipzig.de/sites/cloud.pubs.dbs.uni-leipzig.de/files/Khetrapal2008HBaseandHypertableforlargescaledistributedstorage.pdf},
  journaltitle = {Dept. of Computer Science, Purdue University},
  urldate = {2017-02-15},
  date = {2006},
  pages = {22--28},
  author = {Khetrapal, Ankur and Ganesh, Vinay},
  file = {/home/amos/Zotero/storage/PVMZW3FC/Khetrapal and Ganesh - 2006 - HBase and Hypertable for large scale distributed s.pdf}
}

@inproceedings{harterAnalysisHDFSHBase2014,
  title = {Analysis of {{HDFS}} under {{HBase}}: A Facebook Messages Case Study.},
  volume = {14},
  url = {https://www.usenix.org/system/files/conference/fast14/fast14-paper_harter.pdf},
  shorttitle = {Analysis of {{HDFS}} under {{HBase}}},
  booktitle = {{{FAST}}},
  urldate = {2017-02-15},
  date = {2014},
  pages = {12th},
  author = {Harter, Tyler and Borthakur, Dhruba and Dong, Siying and Aiyer, Amitanand S. and Tang, Liyin and Arpaci-Dusseau, Andrea C. and Arpaci-Dusseau, Remzi H.},
  file = {/home/amos/Zotero/storage/95K843R3/Harter et al. - 2014 - Analysis of HDFS under HBase a facebook messages .pdf}
}

@article{khadilkarJenaHBaseDistributedScalable,
  title = {Jena-{{HBase}}: {{A Distributed}}, {{Scalable}} and {{Efficient RDF Triple Store}}},
  url = {https://pdfs.semanticscholar.org/adc2/203cb744c280ec29c7d4ca4273eacda5f72e.pdf},
  shorttitle = {Jena-{{HBase}}},
  urldate = {2017-02-15},
  author = {Khadilkar, Vaibhav and Kantarcioglu, Murat and Thuraisingham, Bhavani and Castagna, Paolo},
  file = {/home/amos/Zotero/storage/QPEAEGEZ/Khadilkar et al. - Jena-HBase A Distributed, Scalable and Efficient .pdf}
}

@article{thusooHiveWarehousingSolution2009,
  title = {Hive: {{A Warehousing Solution}} over a {{Map}}-Reduce {{Framework}}},
  volume = {2},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/1687553.1687609},
  doi = {10.14778/1687553.1687609},
  shorttitle = {Hive},
  abstract = {The size of data sets being collected and analyzed in the industry for business intelligence is growing rapidly, making traditional warehousing solutions prohibitively expensive. Hadoop [3] is a popular open-source map-reduce implementation which is being used as an alternative to store and process extremely large data sets on commodity hardware. However, the map-reduce programming model is very low level and requires developers to write custom programs which are hard to maintain and reuse.},
  number = {2},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-03-21},
  date = {2009-08},
  pages = {1626--1629},
  author = {Thusoo, Ashish and Sarma, Joydeep Sen and Jain, Namit and Shao, Zheng and Chakka, Prasad and Anthony, Suresh and Liu, Hao and Wyckoff, Pete and Murthy, Raghotham},
  file = {/home/amos/Zotero/storage/FVK5U3G2/Thusoo et al. - 2009 - Hive A Warehousing Solution over a Map-reduce Fra.pdf}
}

@inproceedings{shvachkoHadoopDistributedFile2010,
  title = {The {{Hadoop Distributed File System}}},
  url = {http://dl.acm.org/citation.cfm?id=1914427},
  booktitle = {Proceedings of the 2010 {{IEEE}} 26th {{Symposium}} on {{Mass Storage Systems}} and {{Technologies}} ({{MSST}})},
  publisher = {{IEEE Computer Society}},
  urldate = {2017-03-21},
  date = {2010},
  pages = {1--10},
  author = {Shvachko, Konstantin and Kuang, Hairong and Radia, Sanjay and Chansler, Robert},
  file = {/home/amos/Zotero/storage/UZNNN7AK/Shvachko et al. - The Hadoop Distributed File System.pdf}
}

@online{lydiaPrestoInteractingPetabytes2013,
  title = {Presto: {{Interacting}} with Petabytes of Data at {{Facebook}}},
  url = {https://www.facebook.com/notes/facebook-engineering/presto-interacting-with-petabytes-of-data-at-facebook/10151786197628920/},
  date = {2013-11-07},
  author = {Lydia, Chan}
}

@article{stonebrakerPOSTGRESNextGeneration1991,
  title = {The {{POSTGRES}} next Generation Database Management System},
  volume = {34},
  url = {http://dl.acm.org/citation.cfm?id=125262},
  number = {10},
  journaltitle = {Communications of the ACM},
  urldate = {2017-03-21},
  date = {1991},
  pages = {78--92},
  author = {Stonebraker, Michael and Kemnitz, Greg},
  file = {/home/amos/Zotero/storage/9SRK3MK4/Stonebraker and Kemnitz - 1991 - The POSTGRES next generation database management s.pdf;/home/amos/Zotero/storage/Q4RPV32V/citation.html}
}

@article{abouzeidHadoopDBArchitecturalHybrid2009,
  title = {{{HadoopDB}}: An Architectural Hybrid of {{MapReduce}} and {{DBMS}} Technologies for Analytical Workloads},
  volume = {2},
  url = {http://dl.acm.org/citation.cfm?id=1687731},
  shorttitle = {{{HadoopDB}}},
  number = {1},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-03-21},
  date = {2009},
  pages = {922--933},
  author = {Abouzeid, Azza and Bajda-Pawlikowski, Kamil and Abadi, Daniel and Silberschatz, Avi and Rasin, Alexander},
  file = {/home/amos/Zotero/storage/V27GMRXW/Abouzeid et al. - 2009 - HadoopDB an architectural hybrid of MapReduce and.pdf}
}

@article{deanMapReduceSimplifiedData2008,
  title = {{{MapReduce}}: {{Simplified Data Processing}} on {{Large Clusters}}},
  volume = {51},
  issn = {0001-0782},
  url = {http://doi.acm.org/10.1145/1327452.1327492},
  doi = {10.1145/1327452.1327492},
  shorttitle = {{{MapReduce}}},
  number = {1},
  journaltitle = {Commun. ACM},
  urldate = {2017-03-21},
  date = {2008-01},
  pages = {107--113},
  author = {Dean, Jeffrey and Ghemawat, Sanjay},
  file = {/home/amos/Zotero/storage/TW5PC5HE/Dean and Ghemawat - 2008 - MapReduce Simplified Data Processing on Large Clu.pdf}
}

@online{PrestoInteractingPetabytes,
  title = {Presto: {{Interacting}} with Petabytes of Data at {{Facebook}}},
  url = {https://www.facebook.com/notes/facebook-engineering/presto-interacting-with-petabytes-of-data-at-facebook/10151786197628920/},
  urldate = {2017-03-21}
}

@article{lambVerticaAnalyticDatabase2012,
  title = {The {{Vertica Analytic Database}}: {{C}}-Store 7 {{Years Later}}},
  volume = {5},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2367502.2367518},
  doi = {10.14778/2367502.2367518},
  shorttitle = {The {{Vertica Analytic Database}}},
  abstract = {This paper describes the system architecture of the Vertica Analytic Database (Vertica), a commercialization of the design of the C-Store research prototype. Vertica demonstrates a modern commercial RDBMS system that presents a classical relational interface while at the same time achieving the high performance expected from modern "web scale" analytic systems by making appropriate architectural choices. Vertica is also an instructive lesson in how academic systems research can be directly commercialized into a successful product.},
  number = {12},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-03-21},
  date = {2012-08},
  pages = {1790--1801},
  author = {Lamb, Andrew and Fuller, Matt and Varadarajan, Ramakrishna and Tran, Nga and Vandiver, Ben and Doshi, Lyric and Bear, Chuck},
  file = {/home/amos/Zotero/storage/34GP75ZE/Lamb et al_2012_The Vertica Analytic Database.pdf}
}

@inproceedings{singhIntroductionIBMNetezza2011,
  location = {{Riverton, NJ, USA}},
  title = {Introduction to the {{IBM Netezza Warehouse Appliance}}},
  url = {http://dl.acm.org/citation.cfm?id=2093889.2093965},
  booktitle = {Proceedings of the 2011 {{Conference}} of the {{Center}} for {{Advanced Studies}} on {{Collaborative Research}}},
  series = {{{CASCON}} '11},
  publisher = {{IBM Corp.}},
  urldate = {2017-03-21},
  date = {2011},
  pages = {385--386},
  author = {Singh, Malcolm and Leonhardi, Ben},
  file = {/home/amos/Zotero/storage/UCWRNTB9/Singh_Leonhardi_2011_Introduction to the IBM Netezza Warehouse Appliance.pdf}
}

@online{ConsulHashiCorp2017,
  title = {Consul by {{HashiCorp}}},
  url = {https://www.consul.io/},
  urldate = {2017-03-21},
  date = {2017-03-20}
}

@online{Stolon2017,
  title = {Stolon},
  url = {https://github.com/sorintlab/stolon},
  urldate = {2017-03-21},
  date = {2017-03-21}
}

@online{Patroni2017,
  title = {Patroni},
  url = {https://github.com/zalando/patroni},
  urldate = {2017-03-21},
  date = {2017-03-21}
}

@online{BRINIndex2017,
  title = {{{BRIN}} Index},
  url = {https://www.postgresql.org/docs/devel/static/brin-intro.html},
  urldate = {2017-03-22},
  date = {2017-03-22}
}

@article{hallProcessingTrillionCells2012,
  title = {Processing a {{Trillion Cells Per Mouse Click}}},
  volume = {5},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2350229.2350259},
  doi = {10.14778/2350229.2350259},
  abstract = {Column-oriented database systems have been a real game changer for the industry in recent years. Highly tuned and performant systems have evolved that provide users with the possibility of answering ad hoc queries over large datasets in an interactive manner. In this paper we present the column-oriented datastore developed as one of the central components of PowerDrill. It combines the advantages of columnar data layout with other known techniques (such as using composite range partitions) and extensive algorithmic engineering on key data structures. The main goal of the latter being to reduce the main memory footprint and to increase the efficiency in processing typical user queries. In this combination we achieve large speed-ups. These enable a highly interactive Web UI where it is common that a single mouse click leads to processing a trillion values in the underlying dataset.},
  number = {11},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-03-23},
  date = {2012-07},
  pages = {1436--1446},
  author = {Hall, Alexander and Bachmann, Olaf and BÃ¼ssow, Robert and GÄnceanu, Silviu and Nunkesser, Marc},
  file = {/home/amos/Zotero/storage/8D7GI54T/Hall et al_2012_Processing a Trillion Cells Per Mouse Click.pdf}
}

@article{farberSAPHANADatabase2012,
  title = {{{SAP HANA Database}}: {{Data Management}} for {{Modern Business Applications}}},
  volume = {40},
  issn = {0163-5808},
  url = {http://doi.acm.org/10.1145/2094114.2094126},
  doi = {10.1145/2094114.2094126},
  shorttitle = {{{SAP HANA Database}}},
  abstract = {The SAP HANA database is positioned as the core of the SAP HANA Appliance to support complex business analytical processes in combination with transactionally consistent operational workloads. Within this paper, we outline the basic characteristics of the SAP HANA database, emphasizing the distinctive features that differentiate the SAP HANA database from other classical relational database management systems. On the technical side, the SAP HANA database consists of multiple data processing engines with a distributed query processing environment to provide the full spectrum of data processing -- from classical relational data supporting both row- and column-oriented physical representations in a hybrid engine, to graph and text processing for semi- and unstructured data management within the same system. From a more application-oriented perspective, we outline the specific support provided by the SAP HANA database of multiple domain-specific languages with a built-in set of natively implemented business functions. SQL -- as the lingua franca for relational database systems -- can no longer be considered to meet all requirements of modern applications, which demand the tight interaction with the data management layer. Therefore, the SAP HANA database permits the exchange of application semantics with the underlying data management platform that can be exploited to increase query expressiveness and to reduce the number of individual application-to-database round trips.},
  number = {4},
  journaltitle = {SIGMOD Rec.},
  urldate = {2017-03-23},
  date = {2012-01},
  pages = {45--51},
  author = {FÃ¤rber, Franz and Cha, Sang Kyun and Primsch, JÃ¼rgen and BornhÃ¶vd, Christof and Sigg, Stefan and Lehner, Wolfgang},
  file = {/home/amos/Zotero/storage/X262RQ6B/FÃ¤rber et al_2012_SAP HANA Database.pdf}
}

@inproceedings{suOracleIndatabaseHadoop2012,
  location = {{New York, NY, USA}},
  title = {Oracle {{In}}-Database {{Hadoop}}: {{When Mapreduce Meets RDBMS}}},
  isbn = {978-1-4503-1247-9},
  url = {http://doi.acm.org/10.1145/2213836.2213955},
  doi = {10.1145/2213836.2213955},
  shorttitle = {Oracle {{In}}-Database {{Hadoop}}},
  abstract = {Big data is the tar sands of the data world: vast reserves of raw gritty data whose valuable information content can only be extracted at great cost. MapReduce is a popular parallel programming paradigm well suited to the programmatic extraction and analysis of information from these unstructured Big Data reserves. The Apache Hadoop implementation of MapReduce has become an important player in this market due to its ability to exploit large networks of inexpensive servers. The increasing importance of unstructured data has led to the interest in MapReduce and its Apache Hadoop implementation, which has led to the interest of data processing vendors in supporting this programming style. Oracle RDBMS has had support for the MapReduce paradigm for many years through the mechanism of user defined pipelined table functions and aggregation objects. However, such support has not been Hadoop source compatible. Native Hadoop programs needed to be rewritten before becoming usable in this framework. The ability to run Hadoop programs inside the Oracle database provides a versatile solution to database users, allowing them use programming skills they may already possess and to exploit the growing Hadoop eco-system. In this paper, we describe a prototype of Oracle In-Database Hadoop that supports the running of native Hadoop applications written in Java. This implementation executes Hadoop applications using the efficient parallel capabilities of the Oracle database and a subset of the Apache Hadoop infrastructure. This system's target audience includes both SQL and Hadoop users. We discuss the architecture and design, and in particular, demonstrate how MapReduce functionalities are seamlessly integrated within SQL queries. We also share our experience in building such a system within Oracle database and follow-on topics that we think are promising areas for exploration.},
  booktitle = {Proceedings of the 2012 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '12},
  publisher = {{ACM}},
  urldate = {2017-03-23},
  date = {2012},
  pages = {779--790},
  keywords = {Hadoop,parallel query execution,MapReduce},
  author = {Su, Xueyuan and Swart, Garret},
  file = {/home/amos/Zotero/storage/BIKHMRV3/Su_Swart_2012_Oracle In-database Hadoop.pdf}
}

@inproceedings{xuIntegratingHadoopParallel2010,
  location = {{New York, NY, USA}},
  title = {Integrating {{Hadoop}} and {{Parallel DBMs}}},
  isbn = {978-1-4503-0032-2},
  url = {http://doi.acm.org/10.1145/1807167.1807272},
  doi = {10.1145/1807167.1807272},
  abstract = {Teradata's parallel DBMS has been successfully deployed in large data warehouses over the last two decades for large scale business analysis in various industries over data sets ranging from a few terabytes to multiple petabytes. However, due to the explosive data volume increase in recent years at some customer sites, some data such as web logs and sensor data are not managed by Teradata EDW (Enterprise Data Warehouse), partially because it is very expensive to load those extreme large volumes of data to a RDBMS, especially when those data are not frequently used to support important business decisions. Recently the MapReduce programming paradigm, started by Google and made popular by the open source Hadoop implementation with major support from Yahoo!, is gaining rapid momentum in both academia and industry as another way of performing large scale data analysis. By now most data warehouse researchers and practitioners agree that both parallel DBMS and MapReduce paradigms have advantages and disadvantages for various business applications and thus both paradigms are going to coexist for a long time [16]. In fact, a large number of Teradata customers, especially those in the e-business and telecom industries have seen increasing needs to perform BI over both data stored in Hadoop and data in Teradata EDW. One common thing between Hadoop and Teradata EDW is that data in both systems are partitioned across multiple nodes for parallel computing, which creates integration optimization opportunities not possible for DBMSs running on a single node. In this paper we describe our three efforts towards tight and efficient integration of Hadoop and Teradata EDW.},
  booktitle = {Proceedings of the 2010 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '10},
  publisher = {{ACM}},
  urldate = {2017-03-23},
  date = {2010},
  pages = {969--974},
  keywords = {Hadoop,data load,parallel computing,parallel dbms,shared nothing,MapReduce},
  author = {Xu, Yu and Kostamaa, Pekka and Gao, Like},
  file = {/home/amos/Zotero/storage/KZ5WDAQJ/Xu et al_2010_Integrating Hadoop and Parallel DBMs.pdf}
}

@patent{patent_loading,
  title = {ä¸ç§æ°æ®å è½½çæ¹æ³åè®¾å¤},
  number = {CN201610828103.6},
  type = {patent},
  date = {2016-09-18},
  author = {{éå¤©ç¥º}}
}

@patent{patent_index,
  title = {ä¸ç§åºäºæµå¼æ°æ®çå±é¨æ§éèç°ç´¢å¼æ¹æ³åç³»ç»},
  number = {CN201510641703.7},
  type = {patent},
  date = {2015-09-30},
  author = {{éå¤©ç¥º}}
}

@inproceedings{stohrMultiDimensionalDatabaseAllocation2000,
  title = {Multi-{{Dimensional Database Allocation}} for {{Parallel Data Warehouses}}.},
  volume = {2000},
  url = {http://dbs.uni-leipzig.de/file/vldb00.pdf},
  booktitle = {{{VLDB}}},
  urldate = {2017-03-24},
  date = {2000},
  pages = {273--284},
  author = {StÃ¶hr, Thomas and MÃ¤rtens, Holger and Rahm, Erhard},
  file = {/home/amos/Zotero/storage/JTBCD5TX/StÃ¶hr et al_2000_Multi-Dimensional Database Allocation for Parallel Data Warehouses.pdf}
}

@thesis{zilioPhysicalDatabaseDesign1998,
  title = {Physical Database Design Decision Algorithms and Concurrent Reorganization for Parallel Database Systems},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.80.8012&rep=rep1&type=pdf},
  institution = {{Citeseer}},
  urldate = {2017-03-24},
  date = {1998},
  author = {Zilio, Daniel C.},
  file = {/home/amos/Zotero/storage/2INTKC7V/Zilio_1998_Physical database design decision algorithms and concurrent reorganization for.pdf}
}

@inproceedings{zhangBIRCHEfficientData1996,
  title = {{{BIRCH}}: An Efficient Data Clustering Method for Very Large Databases},
  volume = {25},
  url = {http://dl.acm.org/citation.cfm?id=233324},
  shorttitle = {{{BIRCH}}},
  booktitle = {{{ACM Sigmod Record}}},
  publisher = {{ACM}},
  urldate = {2017-03-24},
  date = {1996},
  pages = {103--114},
  author = {Zhang, Tian and Ramakrishnan, Raghu and Livny, Miron},
  file = {/home/amos/Zotero/storage/5EUPTAH2/Zhang et al_1996_BIRCH.pdf}
}

@article{pavloSkewAwareAutomaticDatabase2012,
  title = {Skew-{{Aware Automatic Database Partitioning}} in {{Shared}}-{{Nothing}}, {{Parallel OLTP Systems}}},
  url = {http://hstore.cs.brown.edu/papers/hstore-partitioning.pdf},
  urldate = {2017-03-25},
  date = {2012},
  author = {Pavlo, Andrew and Curino, Carlo and Zdonik, Stan},
  file = {/home/amos/Zotero/storage/JHZUV5VA/Pavlo et al_2012_Skew-Aware Automatic Database Partitioning in Shared-Nothing, Parallel OLTP.pdf}
}

@article{portsSerializableSnapshotIsolation2012,
  title = {Serializable {{Snapshot Isolation}} in {{PostgreSQL}}},
  volume = {5},
  url = {https://www.drkp.org/papers/ssi-vldb12.pdf},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-03-25},
  date = {2012},
  author = {Ports, Dan RK and Grittner, Kevin},
  file = {/home/amos/Zotero/storage/U38JZ42C/Ports_Grittner_2012_Serializable Snapshot Isolation in PostgreSQL.pdf}
}

@article{ioannidisHistoryHistogramsAbridged,
  title = {The {{History}} of {{Histograms}} (Abridged)},
  url = {http://vldb.org/conf/2003/papers/S02P01.pdf},
  urldate = {2017-03-29},
  author = {Ioannidis, Yannis},
  file = {/home/amos/Zotero/storage/2SVSNMP3/Ioannidis_The History of Histograms (abridged).pdf}
}

@article{ganiSurveyIndexingTechniques2016,
  title = {A {{Survey}} on {{Indexing Techniques}} for {{Big Data}}: {{Taxonomy}} and {{Performance Evaluation}}},
  volume = {46},
  issn = {0219-1377},
  url = {http://dx.doi.org/10.1007/s10115-015-0830-y},
  doi = {10.1007/s10115-015-0830-y},
  shorttitle = {A {{Survey}} on {{Indexing Techniques}} for {{Big Data}}},
  abstract = {The explosive growth in volume, velocity, and diversity of data produced by mobile devices and cloud applications has contributed to the abundance of data or `big data.' Available solutions for efficient data storage and management cannot fulfill the needs of such heterogeneous data where the amount of data is continuously increasing. For efficient retrieval and management, existing indexing solutions become inefficient with the rapidly growing index size and seek time and an optimized index scheme is required for big data. Regarding real-world applications, the indexing issue with big data in cloud computing is widespread in healthcare, enterprises, scientific experiments, and social networks. To date, diverse soft computing, machine learning, and other techniques in terms of artificial intelligence have been utilized to satisfy the indexing requirements, yet in the literature, there is no reported state-of-the-art survey investigating the performance and consequences of techniques for solving indexing in big data issues as they enter cloud computing. The objective of this paper is to investigate and examine the existing indexing techniques for big data. Taxonomy of indexing techniques is developed to provide insight to enable researchers understand and select a technique as a basis to design an indexing mechanism with reduced time and space consumption for BD-MCC. In this study, 48 indexing techniques have been studied and compared based on 60 articles related to the topic. The indexing techniques' performance is analyzed based on their characteristics and big data indexing requirements. The main contribution of this study is taxonomy of categorized indexing techniques based on their method. The categories are non-artificial intelligence, artificial intelligence, and collaborative artificial intelligence indexing methods. In addition, the significance of different procedures and performance is analyzed, besides limitations of each technique. In conclusion, several key future research topics with potential to accelerate the progress and deployment of artificial intelligence-based cooperative indexing in BD-MCC are elaborated on.},
  number = {2},
  journaltitle = {Knowl. Inf. Syst.},
  urldate = {2017-03-31},
  date = {2016-02},
  pages = {241--284},
  keywords = {Cloud computing,Artificial intelligence,Collaborative artificial intelligence,Indexing,Big Data},
  author = {Gani, Abdullah and Siddiqa, Aisha and Shamshirband, Shahaboddin and Hanum, Fariza},
  file = {/home/amos/Zotero/storage/AQ75VKCC/A Survey on Indexing Techniques for Big Data - Taxonomy and Performance Evaluation.pdf}
}

@inproceedings{beameSkewParallelQuery2014,
  location = {{New York, NY, USA}},
  title = {Skew in {{Parallel Query Processing}}},
  isbn = {978-1-4503-2375-8},
  url = {http://doi.acm.org/10.1145/2594538.2594558},
  doi = {10.1145/2594538.2594558},
  abstract = {We study the problem of computing a conjunctive query q in parallel, using p of servers, on a large database. We consider algorithms with one round of communication, and study the complexity of the communication. We are especially interested in the case where the data is skewed, which is a major challenge for scalable parallel query processing. We establish a tight connection between the fractional edge packing of the query and the amount of communication in two cases. First, in the case when the only statistics on the database are the cardinalities of the input relations, and the data is skew-free, we provide matching upper and lower bounds (up to a polylogarithmic factor of p) expressed in terms of fractional edge packings of the query q. Second, in the case when the relations are skewed and the heavy hitters and their frequencies are known, we provide upper and lower bounds expressed in terms of packings of residual queries obtained by specializing the query to a heavy hitter. All our lower bounds are expressed in the strongest form, as number of bits needed to be communicated between processors with unlimited computational power. Our results generalize prior results on uniform databases (where each relation is a matching) [4], and lower bounds for the MapReduce model [1].},
  booktitle = {Proceedings of the 33rd {{ACM SIGMOD}}-{{SIGACT}}-{{SIGART Symposium}} on {{Principles}} of {{Database Systems}}},
  series = {{{PODS}} '14},
  publisher = {{ACM}},
  urldate = {2017-04-05},
  date = {2014},
  pages = {212--223},
  keywords = {skew,lower bounds,parallel computation},
  author = {Beame, Paul and Koutris, Paraschos and Suciu, Dan},
  file = {/home/amos/Zotero/storage/QSTW7CFI/Beame et al. - 2014 - Skew in Parallel Query Processing.pdf}
}

@article{ngoSkewStrikesBack2014,
  title = {Skew {{Strikes Back}}: {{New Developments}} in the {{Theory}} of {{Join Algorithms}}},
  volume = {42},
  issn = {0163-5808},
  url = {http://doi.acm.org/10.1145/2590989.2590991},
  doi = {10.1145/2590989.2590991},
  shorttitle = {Skew {{Strikes Back}}},
  number = {4},
  journaltitle = {SIGMOD Rec.},
  urldate = {2017-04-05},
  date = {2014-02},
  pages = {5--16},
  author = {Ngo, Hung Q and RÃ©, Christopher and Rudra, Atri}
}

@inproceedings{elmeleegySpongeFilesMitigatingData2014,
  location = {{New York, NY, USA}},
  title = {{{SpongeFiles}}: {{Mitigating Data Skew}} in {{Mapreduce Using Distributed Memory}}},
  isbn = {978-1-4503-2376-5},
  url = {http://doi.acm.org/10.1145/2588555.2595634},
  doi = {10.1145/2588555.2595634},
  shorttitle = {{{SpongeFiles}}},
  abstract = {Data skew is a major problem for data processing platforms like MapReduce. Skew causes worker tasks to spill to disk what they cannot fit in memory, which slows down the task and the overall job. Moreover, performance of other jobs sharing same disk degrades. In many cases, this situation occurs even as the cluster has plenty of spare memory it is just not used evenly. We introduce SpongeFiles, a novel distributed-memory abstraction tailored to data processing environments like MapReduce. A SpongeFile is a logical byte array, comprised of large chunks that can be stored in a variety of locations in the cluster. Spilled data goes to SpongeFiles, which route it to the nearest location with sufficient capacity (local memory, remote memory, local disk, or remote disk as a last resort). By enabling memory-sapped nodes to tap into the spare capacity of their neighbors, SpongeFiles minimize expensive disk spilling, thereby improving performance. In our experiments with Hadoop and Pig, SpongeFiles reduce overall job runtimes by up to 55\% and by up to 85\% under disk contention.},
  booktitle = {Proceedings of the 2014 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '14},
  publisher = {{ACM}},
  urldate = {2017-04-05},
  date = {2014},
  pages = {551--562},
  keywords = {skew,data,handling},
  author = {Elmeleegy, Khaled and Olston, Christopher and Reed, Benjamin}
}

@inproceedings{chengRobustSkewresistantParallel2014,
  location = {{New York, NY, USA}},
  title = {Robust and {{Skew}}-Resistant {{Parallel Joins}} in {{Shared}}-{{Nothing Systems}}},
  isbn = {978-1-4503-2598-1},
  url = {http://doi.acm.org/10.1145/2661829.2661888},
  doi = {10.1145/2661829.2661888},
  abstract = {The performance of joins in parallel database management systems is critical for data intensive operations such as querying. Since data skew is common in many applications, poorly engineered join operations result in load imbalance and performance bottlenecks. State-of-the-art methods designed to handle this problem offer significant improvements over naive implementations. However, performance could be further improved by removing the dependency on global skew knowledge and broadcasting. In this paper, we propose PRPQ (partial redistribution \& partial query), an efficient and robust join algorithm for processing large-scale joins over distributed systems. We present the detailed implementation and a quantitative evaluation of our method. The experimental results demonstrate that the proposed PRPQ algorithm is indeed robust and scalable under a wide range of skew conditions. Specifically, compared to the state-of-art PRPD method, we achieve 16\% - 167\% performance improvement and 24\% - 54\% less network communication under different join workloads.},
  booktitle = {Proceedings of the 23rd {{ACM International Conference}} on {{Conference}} on {{Information}} and {{Knowledge Management}}},
  series = {{{CIKM}} '14},
  publisher = {{ACM}},
  urldate = {2017-04-05},
  date = {2014},
  pages = {1399--1408},
  keywords = {distributed joins,parallel joins,performance,prpd,prpq},
  author = {Cheng, Long and Kotoulas, Spyros and Ward, Tomas E. and Theodoropoulos, Georgios}
}

@article{kimSortVsHash2009,
  title = {Sort vs. {{Hash Revisited}}: {{Fast Join Implementation}} on {{Modern Multi}}-Core {{CPUs}}},
  volume = {2},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/1687553.1687564},
  doi = {10.14778/1687553.1687564},
  shorttitle = {Sort vs. {{Hash Revisited}}},
  abstract = {Join is an important database operation. As computer architectures evolve, the best join algorithm may change hand. This paper re-examines two popular join algorithms -- hash join and sort-merge join -- to determine if the latest computer architecture trends shift the tide that has favored hash join for many years. For a fair comparison, we implemented the most optimized parallel version of both algorithms on the latest Intel Core i7 platform. Both implementations scale well with the number of cores in the system and take advantages of latest processor features for performance. Our hash-based implementation achieves more than 100M tuples per second which is 17X faster than the best reported performance on CPUs and 8X faster than that reported for GPUs. Moreover, the performance of our hash join implementation is consistent over a wide range of input data sizes from 64K to 128M tuples and is not affected by data skew. We compare this implementation to our highly optimized sort-based implementation that achieves 47M to 80M tuples per second. We developed analytical models to study how both algorithms would scale with upcoming processor architecture trends. Our analysis projects that current architectural trends of wider SIMD, more cores, and smaller memory bandwidth per core imply better scalability potential for sort-merge join. Consequently, sort-merge join is likely to outperform hash join on upcoming chip multiprocessors. In summary, we offer multicore implementations of hash join and sort-merge join which consistently outperform all previously reported results. We further conclude that the tide that favors the hash join algorithm has not changed yet, but the change is just around the corner.},
  number = {2},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-05},
  date = {2009-08},
  pages = {1378--1389},
  author = {Kim, Changkyu and Kaldewey, Tim and Lee, Victor W. and Sedlar, Eric and Nguyen, Anthony D. and Satish, Nadathur and Chhugani, Jatin and Di Blas, Andrea and Dubey, Pradeep}
}

@inproceedings{vitorovicLoadBalancingSkew2016,
  title = {Load Balancing and Skew Resilience for Parallel Joins},
  doi = {10.1109/ICDE.2016.7498250},
  abstract = {We address the problem of load balancing for parallel joins.We show that the distribution of input data received and the output data produced by worker machines are both important for performance. As a result, previous work, which optimizes either for input or output, stands ineffective for load balancing. To that end, we propose a multi-stage load-balancing algorithm which considers the properties of both input and output data through sampling of the original join matrix. To do this efficiently, we propose a novel category of equi-weight histograms. To build them, we exploit state-of-the-art computational geometry algorithms for rectangle tiling. To our knowledge, we are the first to employ tiling algorithms for join load-balancing. In addition, we propose a novel, join-specialized tiling algorithm that has drastically lower time and space complexity than existing algorithms. Experiments show that our scheme outperforms state-of-the-art techniques by up to a factor of 15.},
  eventtitle = {2016 {{IEEE}} 32nd {{International Conference}} on {{Data Engineering}} ({{ICDE}})},
  booktitle = {2016 {{IEEE}} 32nd {{International Conference}} on {{Data Engineering}} ({{ICDE}})},
  date = {2016-05},
  pages = {313-324},
  keywords = {Computer architecture,Complexity theory,Computational geometry,Histograms,Load management,Partitioning algorithms,Sparse matrices},
  author = {Vitorovic, A. and Elseidy, M. and Koch, C.},
  file = {/home/amos/Zotero/storage/SH72G3MJ/Vitorovic et al. - 2016 - Load balancing and skew resilience for parallel jo.pdf;/home/amos/Zotero/storage/EZM6KJF8/Vitorovic et al. - 2016 - Load balancing and skew resilience for parallel jo.html}
}

@article{chenLIBRALightweightData2015,
  title = {{{LIBRA}}: {{Lightweight Data Skew Mitigation}} in {{MapReduce}}},
  volume = {26},
  issn = {1045-9219},
  doi = {10.1109/TPDS.2014.2350972},
  shorttitle = {{{LIBRA}}},
  abstract = {MapReduce is an effective tool for parallel data processing. One significant issue in practical MapReduce applications is data skew: the imbalance in the amount of data assigned to each task. This causes some tasks to take much longer to finish than others and can significantly impact performance. This paper presents LIBRA, a lightweight strategy to address the data skew problem among the reducers of MapReduce applications. Unlike previous work, LIBRA does not require any pre-run sampling of the input data or prevent the overlap between the map and the reduce stages. It uses an innovative sampling method which can achieve a highly accurate approximation to the distribution of the intermediate data by sampling only a small fraction of the intermediate data during the normal map processing. It allows the reduce tasks to start copying as soon as the chosen sample map tasks (only a small fraction of map tasks which are issued first) complete. It supports the split of large keys when application semantics permit and the total order of the output data. It considers the heterogeneity of the computing resources when balancing the load among the reduce tasks appropriately. LIBRA is applicable to a wide range of applications and is transparent to the users. We implement LIBRA in Hadoop and our experiments show that LIBRA has negligible overhead and can speed up the execution of some popular applications by up to a factor of 4.},
  number = {9},
  journaltitle = {IEEE Transactions on Parallel and Distributed Systems},
  date = {2015-09},
  pages = {2520-2533},
  keywords = {Hadoop,Indexes,partitioning,Approximation methods,Delays,LIBRA,MapReduce,Sampling methods,Semantics,application semantics,computing resources heterogeneity,data handling,data skew,innovative sampling method,intermediate data distribution,intermediate data sampling,lightweight data skew mitigation,load balancing,map processing,parallel data processing,resource allocation,sampling,sampling methods,distributed databases,Parallel processing},
  author = {Chen, Q. and Yao, J. and Xiao, Z.},
  file = {/home/amos/Zotero/storage/GK2UU9UD/Chen et al. - 2015 - LIBRA: Lightweight Data Skew Mitigation in MapRedu.pdf;/home/amos/Zotero/storage/FRCXGMQQ/Chen et al. - 2015 - LIBRA: Lightweight Data Skew Mitigation in MapRedu.html}
}

@inproceedings{liPaddedEncodingScheme2015,
  location = {{New York, NY, USA}},
  title = {A {{Padded Encoding Scheme}} to {{Accelerate Scans}} by {{Leveraging Skew}}},
  isbn = {978-1-4503-2758-9},
  url = {http://doi.acm.org/10.1145/2723372.2737787},
  doi = {10.1145/2723372.2737787},
  abstract = {In-memory data analytic systems that use vertical bit-parallel scan methods generally use encoding techniques. We observe that in such environments, there is an opportunity to turn skew in both the data and predicate distributions (usually a problem for query processing) into a benefit that can be leveraged to encode the column values. This paper proposes a padded encoding scheme to address this opportunity. The proposed scheme creates encodings that map common attribute values to codes that can easily be distinguished from other codes by only examining a few bits in the full code. Consequently, scans on columns stored using the padded encoding scheme can safely prune the computation without examining all the bits in the code, thereby reducing the memory bandwidth and CPU cycles that are consumed when evaluating scan queries. Our padded encoding method results in a fixed-length encoding, as fixed-length encodings are easier to manage. However, the proposed padded encoding may produce longer (fixed-length) codes than those produced by popular order-preserving encoding methods, such as dictionary-based encoding. This additional space overhead has the potential to negate the gains from early pruning of the scan computation. However, as we demonstrate empirically, the additional space overhead is generally small, and the padded encoding scheme provides significant performance improvements.},
  booktitle = {Proceedings of the 2015 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '15},
  publisher = {{ACM}},
  urldate = {2017-04-05},
  date = {2015},
  pages = {1509--1524},
  keywords = {skew,analytics,bit-parallel,encoding,scan},
  author = {Li, Yinan and Chasseur, Craig and Patel, Jignesh M.}
}

@article{alexiouAdaptiveRangeFilters2013,
  title = {Adaptive {{Range Filters}} for {{Cold Data}}: {{Avoiding Trips}} to {{Siberia}}},
  volume = {6},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2556549.2556556},
  doi = {10.14778/2556549.2556556},
  shorttitle = {Adaptive {{Range Filters}} for {{Cold Data}}},
  abstract = {Bloom filters are a great technique to test whether a key is not in a set of keys. This paper presents a novel data structure called ARF. In a nutshell, ARFs are for range queries what Bloom filters are for point queries. That is, an ARF can determine whether a set of keys does not contain any keys that are part of a specific range. This paper describes the principles and methods for efficient implementation of ARFs and presents the results of comprehensive experiments that assess the precision, space, and latency of ARFs. Furthermore, this paper shows how ARFs can be applied to a commercial database system that partitions data into hot and cold regions to optimize queries that involve only hot data.},
  number = {14},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-05},
  date = {2013-09},
  pages = {1714--1725},
  author = {Alexiou, Karolina and Kossmann, Donald and Larson, Per-$\backslash$AAke},
  file = {/home/amos/Zotero/storage/TP7QKLR6/Adaptive Range Filters for Cold Data - Avoiding Trips to Siberia.pdf}
}

@inproceedings{chengEfficientlyHandlingSkew2014,
  title = {Efficiently {{Handling Skew}} in {{Outer Joins}} on {{Distributed Systems}}},
  doi = {10.1109/CCGrid.2014.35},
  abstract = {Outer joins are ubiquitous in databases and big data systems. The question of how best to execute outer joins in large parallel systems is particularly challenging as real world datasets are characterized by data skew leading to performance issues. Although skew handling techniques have been extensively studied for inner joins, there is little published work solving the corresponding problem for parallel outer joins. Conventional approaches to this problem such as ones based on hash redistribution often lead to load balancing problems while duplication-based approaches incurs significant overhead in terms of network communication. In this paper, we propose a new algorithm, query with counters (QC), for directly handling skew in outer joins on distributed architectures. We present an efficient implementation of our approach based on the asynchronous partitioned global address space (APGAS) parallel programming model. We evaluate the performance of our approach on a cluster of 192 cores (16 nodes) and datasets of 1 billion tuples with different skew. Experimental results show that our method is scalable and, in cases of high skew, faster than the state-of-the-art.},
  eventtitle = {2014 14th {{IEEE}}/{{ACM International Symposium}} on {{Cluster}}, {{Cloud}} and {{Grid Computing}}},
  booktitle = {2014 14th {{IEEE}}/{{ACM International Symposium}} on {{Cluster}}, {{Cloud}} and {{Grid Computing}}},
  date = {2014-05},
  pages = {295-304},
  keywords = {APGAS,Density estimation robust algorithm,Histograms,Probes,QC,Radiation detectors,Scalability,Silicon,X10,asynchronous partitioned global address space,big data systems,data handling,data skew,distributed architectures,distributed join,distributed systems,duplication-based approaches,hash redistribution,load balancing problems,network communication,outer join,parallel join,parallel outer joins,parallel programming,parallel programming model,parallel systems,performance evaluation,performance issues,query with counters,resource allocation,skew handling,distributed databases,Databases},
  author = {Cheng, L. and Kotoulas, S. and Ward, T. E. and Theodoropoulos, G.},
  file = {/home/amos/Zotero/storage/EMPFN9HU/Cheng et al. - 2014 - Efficiently Handling Skew in Outer Joins on Distri.pdf;/home/amos/Zotero/storage/6VMHNEW5/Cheng et al. - 2014 - Efficiently Handling Skew in Outer Joins on Distri.html}
}

@article{bloomSpaceTimeTradeoffs1970,
  title = {Space/{{Time Trade}}-Offs in {{Hash Coding}} with {{Allowable Errors}}},
  volume = {13},
  issn = {0001-0782},
  url = {http://doi.acm.org/10.1145/362686.362692},
  doi = {10.1145/362686.362692},
  abstract = {In this paper trade-offs among certain computational factors in hash coding are analyzed. The paradigm problem considered is that of testing a series of messages one-by-one for membership in a given set of messages. Two new hash-coding methods are examined and compared with a particular conventional hash-coding method. The computational factors considered are the size of the hash area (space), the time required to identify a message as a nonmember of the given set (reject time), and an allowable error frequency.
The new methods are intended to reduce the amount of space required to contain the hash-coded information from that associated with conventional methods. The reduction in space is accomplished by exploiting the possibility that a small fraction of errors of commission may be tolerable in some applications, in particular, applications in which a large amount of data is involved and a core resident hash area is consequently not feasible using conventional methods.
In such applications, it is envisaged that overall performance could be improved by using a smaller core resident hash area in conjunction with the new methods and, when necessary, by using some secondary and perhaps time-consuming test to âcatchâ the small fraction of errors associated with the new methods. An example is discussed which illustrates possible areas of application for the new methods.
Analysis of the paradigm problem demonstrates that allowing a small number of test messages to be falsely identified as members of the given set will permit a much smaller hash area to be used without increasing reject time.},
  number = {7},
  journaltitle = {Commun. ACM},
  urldate = {2017-04-05},
  date = {1970-07},
  pages = {422--426},
  keywords = {hash addressing,hash coding,retrieval efficiency,retrieval trade-offs,scatter storage,searching,storage efficiency,storage layout},
  author = {Bloom, Burton H.}
}

@article{jrHierarchicalGroupingOptimize1963,
  title = {Hierarchical {{Grouping}} to {{Optimize}} an {{Objective Function}}},
  volume = {58},
  issn = {0162-1459},
  url = {http://www.tandfonline.com/doi/abs/10.1080/01621459.1963.10500845},
  doi = {10.1080/01621459.1963.10500845},
  abstract = {A procedure for forming hierarchical groups of mutually exclusive subsets, each of which has members that are maximally similar with respect to specified characteristics, is suggested for use in large-scale (n $>$ 100) studies when a precise optimal solution for a specified number of groups is not practical. Given n sets, this procedure permits their reduction to n â 1 mutually exclusive sets by considering the union of all possible n(n â 1)/2 pairs and selecting a union having a maximal value for the functional relation, or objective function, that reflects the criterion chosen by the investigator. By repeating this process until only one group remains, the complete hierarchical structure and a quantitative estimate of the loss associated with each stage in the grouping can be obtained. A general flowchart helpful in computer programming and a numerical example are included.},
  number = {301},
  journaltitle = {Journal of the American Statistical Association},
  urldate = {2017-04-10},
  date = {1963-03-01},
  pages = {236-244},
  author = {Jr, Joe H. Ward},
  file = {/home/amos/Zotero/storage/6R2Q5RNS/Jr - 1963 - Hierarchical Grouping to Optimize an Objective Fun.html}
}

@article{yuTwoBirdsOne2016,
  title = {Two {{Birds}}, {{One Stone}}: {{A Fast}}, {{Yet Lightweight}}, {{Indexing Scheme}} for {{Modern Database Systems}}},
  volume = {10},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/3025111.3025120},
  doi = {10.14778/3025111.3025120},
  shorttitle = {Two {{Birds}}, {{One Stone}}},
  abstract = {Classic database indexes (e.g., B+-Tree), though speed up queries, suffer from two main drawbacks: (1) An index usually yields 5\% to 15\% additional storage overhead which results in non-ignorable dollar cost in big data scenarios especially when deployed on modern storage devices. (2) Maintaining an index incurs high latency because the DBMS has to locate and update those index pages affected by the underlying table changes. This paper proposes Hippo a fast, yet scalable, database indexing approach. It significantly shrinks the index storage and mitigates maintenance overhead without compromising much on the query execution performance. Hippo stores disk page ranges instead of tuple pointers in the indexed table to reduce the storage space occupied by the index. It maintains simplified histograms that represent the data distribution and adopts a page grouping technique that groups contiguous pages into page ranges based on the similarity of their index key attribute distributions. When a query is issued, Hippo leverages the page ranges and histogram-based page summaries to recognize those pages such that their tuples are guaranteed not to satisfy the query predicates and inspects the remaining pages. Experiments based on real and synthetic datasets show that Hippo occupies up to two orders of magnitude less storage space than that of the B+-Tree while still achieving comparable query execution performance to that of the B+-Tree for 0.1\% -- 1\% selectivity factors. Also, the experiments show that Hippo outperforms BRIN (Block Range Index) in executing queries with various selectivity factors. Furthermore, Hippo achieves up to three orders of magnitude less maintenance overhead and up to an order of magnitude higher throughput (for hybrid query/update workloads) than its counterparts.},
  number = {4},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-10},
  date = {2016-11},
  pages = {385--396},
  author = {Yu, Jia and Sarwat, Mohamed}
}

@inproceedings{sidirourgosColumnImprintsSecondary2013,
  location = {{New York, NY, USA}},
  title = {Column {{Imprints}}: {{A Secondary Index Structure}}},
  isbn = {978-1-4503-2037-5},
  url = {http://doi.acm.org/10.1145/2463676.2465306},
  doi = {10.1145/2463676.2465306},
  shorttitle = {Column {{Imprints}}},
  abstract = {Large scale data warehouses rely heavily on secondary indexes, such as bitmaps and b-trees, to limit access to slow IO devices. However, with the advent of large main memory systems, cache conscious secondary indexes are needed to improve also the transfer bandwidth between memory and cpu. In this paper, we introduce column imprint, a simple but efficient cache conscious secondary index. A column imprint is a collection of many small bit vectors, each indexing the data points of a single cacheline. An imprint is used during query evaluation to limit data access and thus minimize memory traffic. The compression for imprints is cpu friendly and exploits the empirical observation that data often exhibits local clustering or partial ordering as a side-effect of the construction process. Most importantly, column imprint compression remains effective and robust even in the case of unclustered data, while other state-of-the-art solutions fail. We conducted an extensive experimental evaluation to assess the applicability and the performance impact of the column imprints. The storage overhead, when experimenting with real world datasets, is just a few percent over the size of the columns being indexed. The evaluation time for over 40000 range queries of varying selectivity revealed the efficiency of the proposed index compared to zonemaps and bitmaps with WAH compression.},
  booktitle = {Proceedings of the 2013 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '13},
  publisher = {{ACM}},
  urldate = {2017-04-10},
  date = {2013},
  pages = {893--904},
  keywords = {columnar databases,secondary index},
  author = {Sidirourgos, Lefteris and Kersten, Martin},
  file = {/home/amos/Zotero/storage/56IVC58X/Column Imprints A Secondary Index Structure.pdf}
}

@inproceedings{houleFastApproximateSimilarity2005,
  title = {Fast Approximate Similarity Search in Extremely High-Dimensional Data Sets},
  doi = {10.1109/ICDE.2005.66},
  abstract = {This paper introduces a practical index for approximate similarity queries of large multi-dimensional data sets: the spatial approximation sample hierarchy (SASH). A SASH is a multi-level structure of random samples, recursively constructed by building a SASH on a large randomly selected sample of data objects, and then connecting each remaining object to several of their approximate nearest neighbors from within the sample. Queries are processed by first locating approximate neighbors within the sample, and then using the pre-established connections to discover neighbors within the remainder of the data set. The SASH index relies on a pairwise distance measure, but otherwise makes no assumptions regarding the representation of the data. Experimental results are provided for query-by-example operations on protein sequence, image, and text data sets, including one consisting of more than 1 million vectors spanning more than 1.1 million terms - far in excess of what spatial search indices can handle efficiently. For sets of this size, the SASH can return a large proportion of the true neighbors roughly 2 orders of magnitude faster than sequential search.},
  eventtitle = {21st {{International Conference}} on {{Data Engineering}} ({{ICDE}}'05)},
  booktitle = {21st {{International Conference}} on {{Data Engineering}} ({{ICDE}}'05)},
  date = {2005-04},
  pages = {619-630},
  keywords = {query processing,Buildings,Content based retrieval,Extraterrestrial measurements,Informatics,Information retrieval,Joining processes,Nearest neighbor searches,Protein sequence,Spatial databases,approximate nearest neighbors,data objects,distributed databases,fast approximate similarity search,large multidimensional data sets,query formulation,spatial approximation sample hierarchy,very large databases,Data structures,data mining},
  author = {Houle, M. E. and Sakuma, Jun},
  file = {/home/amos/Zotero/storage/NEM7VCNS/Houle and Sakuma - 2005 - Fast approximate similarity search in extremely hi.pdf;/home/amos/Zotero/storage/8P9C4KIR/Houle and Sakuma - 2005 - Fast approximate similarity search in extremely hi.html}
}

@article{athanassoulisBFtreeApproximateTree2014,
  title = {{{BF}}-Tree: {{Approximate Tree Indexing}}},
  volume = {7},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2733085.2733094},
  doi = {10.14778/2733085.2733094},
  shorttitle = {{{BF}}-Tree},
  abstract = {The increasing volume of time-based generated data and the shift in storage technologies suggest that we might need to reconsider indexing. Several workloads - like social and service monitoring - often include attributes with implicit clustering because of their time-dependent nature. In addition, solid state disks (SSD) (using flash or other low-level technologies) emerge as viable competitors of hard disk drives (HDD). Capacity and access times of storage devices create a trade-off between SSD and HDD. Slow random accesses in HDD have been replaced by efficient random accesses in SSD, but their available capacity is one or more orders of magnitude more expensive than the one of HDD. Indexing, however, is designed assuming HDD as secondary storage, thus minimizing random accesses at the expense of capacity. Indexing data using SSD as secondary storage requires treating capacity as a scarce resource. To this end, we introduce approximate tree indexing, which employs probabilistic data structures (Bloom filters) to trade accuracy for size and produce smaller, yet powerful, tree indexes, which we name Bloom filter trees (BF-Trees). BF-Trees exploit pre-existing data ordering or partitioning to offer competitive search performance. We demonstrate, both by an analytical study and by experimental results, that by using workload knowledge and reducing indexing accuracy up to some extent, we can save substantially on capacity when indexing on ordered or partitioned attributes. In particular, in experiments with a synthetic workload, approximate indexing offers 2.22x-48x smaller index footprint with competitive response times, and in experiments with TPCH and a monitoring real-life dataset from an energy company, it offers 1.6x-4x smaller index footprint with competitive search times as well.},
  number = {14},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-10},
  date = {2014-10},
  pages = {1881--1892},
  author = {Athanassoulis, Manos and Ailamaki, Anastasia},
  file = {/home/amos/Zotero/storage/6SGMAA9W/BF-Tree - Approximate Tree Indexing.pdf}
}

@inproceedings{idreosDatabaseCracking2007,
  title = {Database {{Cracking}}.},
  volume = {7},
  url = {http://stratos.seas.harvard.edu/files/IKM_CIDR07.pdf},
  booktitle = {{{CIDR}}},
  urldate = {2017-04-11},
  date = {2007},
  pages = {68--78},
  author = {Idreos, Stratos and Kersten, Martin L. and Manegold, Stefan and others},
  file = {/home/amos/Zotero/storage/5JQ4LJEH/Database Cracking.pdf;/home/amos/Zotero/storage/DI2RAQIS/Idreos et al. - 2007 - Database Cracking..pdf}
}

@inproceedings{graefeSelfselectingSelftuningIncrementally2010,
  title = {Self-Selecting, Self-Tuning, Incrementally Optimized Indexes},
  url = {http://dl.acm.org/citation.cfm?id=1739087},
  booktitle = {Proceedings of the 13th {{International Conference}} on {{Extending Database Technology}}},
  publisher = {{ACM}},
  urldate = {2017-04-11},
  date = {2010},
  pages = {371--381},
  author = {Graefe, Goetz and Kuno, Harumi},
  file = {/home/amos/Zotero/storage/33SJRNK8/Graefe and Kuno - 2010 - Self-selecting, self-tuning, incrementally optimiz.pdf}
}

@inproceedings{kerstenCrackingDatabaseStore2005,
  title = {Cracking the Database Store},
  volume = {5},
  url = {http://soft-eng.cz/wp-content/uploads/2015/08/P18.pdf},
  booktitle = {{{CIDR}}},
  urldate = {2017-04-11},
  date = {2005},
  pages = {4--7},
  author = {Kersten, Martin L. and Manegold, Stefan and others},
  file = {/home/amos/Zotero/storage/2HI93C9U/Kersten et al. - 2005 - Cracking the database store.pdf;/home/amos/Zotero/storage/7B4TKYGX/Cracking the Database Store.pdf}
}

@article{halimStochasticDatabaseCracking2012,
  title = {Stochastic Database Cracking: {{Towards}} Robust Adaptive Indexing in Main-Memory Column-Stores},
  volume = {5},
  url = {http://dl.acm.org/citation.cfm?id=2168652},
  shorttitle = {Stochastic Database Cracking},
  number = {6},
  journaltitle = {Proceedings of the VLDB Endowment},
  urldate = {2017-04-11},
  date = {2012},
  pages = {502--513},
  author = {Halim, Felix and Idreos, Stratos and Karras, Panagiotis and Yap, Roland HC},
  file = {/home/amos/Zotero/storage/IVJGWTII/Halim et al. - 2012 - Stochastic database cracking Towards robust adapt.pdf}
}

@inproceedings{graefeAdaptiveIndexingRelational2010,
  title = {Adaptive Indexing for Relational Keys},
  url = {http://ieeexplore.ieee.org/abstract/document/5452743/},
  booktitle = {Data {{Engineering Workshops}} ({{ICDEW}}), 2010 {{IEEE}} 26th {{International Conference}} On},
  publisher = {{IEEE}},
  urldate = {2017-04-11},
  date = {2010},
  pages = {69--74},
  author = {Graefe, Goetz and Kuno, Harumi},
  file = {/home/amos/Zotero/storage/5BXPFFRP/Graefe and Kuno - 2010 - Adaptive indexing for relational keys.pdf}
}

@article{gantzDigitalUniverse20202012,
  title = {The Digital Universe in 2020: {{Big}} Data, Bigger Digital Shadows, and Biggest Growth in the Far East},
  volume = {2007},
  url = {https://www.emc-technology.com/collateral/analyst-reports/idc-the-digital-universe-in-2020.pdf},
  shorttitle = {The Digital Universe in 2020},
  number = {2012},
  journaltitle = {IDC iView: IDC Analyze the future},
  urldate = {2017-04-12},
  date = {2012},
  pages = {1--16},
  author = {Gantz, John and Reinsel, David}
}

@inproceedings{jermaineNovelIndexSupporting1999,
  location = {{San Francisco, CA, USA}},
  title = {A {{Novel Index Supporting High Volume Data Warehouse Insertion}}},
  isbn = {978-1-55860-615-9},
  url = {http://dl.acm.org/citation.cfm?id=645925.671517},
  booktitle = {Proceedings of the 25th {{International Conference}} on {{Very Large Data Bases}}},
  series = {{{VLDB}} '99},
  publisher = {{Morgan Kaufmann Publishers Inc.}},
  urldate = {2017-04-12},
  date = {1999},
  pages = {235--246},
  author = {Jermaine, Chris and Datta, Anindya and Omiecinski, Edward},
  file = {/home/amos/Zotero/storage/RD7BWQTR/A Novel Index Supporting High Volume Data Warehouse Insertions.pdf}
}

@article{baumannBitwiseDimensionalCoclustering2016,
  title = {Bitwise {{Dimensional Co}}-Clustering for {{Analytical Workloads}}},
  volume = {25},
  issn = {1066-8888},
  url = {http://dx.doi.org/10.1007/s00778-015-0417-y},
  doi = {10.1007/s00778-015-0417-y},
  abstract = {Analytical workloads in data warehouses often include heavy joins where queries involve multiple fact tables in addition to the typical star-patterns, dimensional grouping and selections. In this paper we propose a new processing and storage framework called bitwise dimensional co-clustering (BDCC) that avoids replication and thus keeps updates fast, yet is able to accelerate all these foreign key joins, efficiently support grouping and pushes down most dimensional selections. The core idea of BDCC is to cluster each table on a mix of dimensions, each possibly derived from attributes imported over an incoming foreign key and this way creating foreign key connected tables with partially shared clusterings. These are later used to accelerate any join between two tables that have some dimension in common and additionally permit to push down and propagate selections (reduce I/O) and accelerate aggregation and ordering operations. Besides the general framework, we describe an algorithm to derive such a physical co-clustering database automatically and describe query processing and query optimization techniques that can easily be fitted into existing relational engines. We present an experimental evaluation on the TPC-H benchmark in the Vectorwise system, showing that co-clustering can significantly enhance its already high performance and at the same time significantly reduce the memory consumption of the system.},
  number = {3},
  journaltitle = {The VLDB Journal},
  urldate = {2017-04-12},
  date = {2016-06},
  pages = {291--316},
  keywords = {query processing,Indexing,Clustering,Database design,OLAP,Sandwich operators,Storage,data warehouse},
  author = {Baumann, Stephan and Boncz, Peter and Sattler, Kai-Uwe},
  file = {/home/amos/Zotero/storage/CVUZCQ6E/Baumann et al. - 2016 - Bitwise Dimensional Co-clustering for Analytical W.pdf}
}

@inproceedings{wuCompressingBitmapIndexes2002,
  title = {Compressing Bitmap Indexes for Faster Search Operations},
  url = {http://ieeexplore.ieee.org/abstract/document/1029710/},
  booktitle = {Scientific and {{Statistical Database Management}}, 2002. {{Proceedings}}. 14th {{International Conference}} On},
  publisher = {{IEEE}},
  urldate = {2017-04-12},
  date = {2002},
  pages = {99--108},
  author = {Wu, Kesheng and Otoo, Ekow J. and Shoshani, Arie}
}

@inproceedings{amer-yahiaOptimizingQueriesCompressed2000,
  title = {Optimizing {{Queries}} on {{Compressed Bitmaps}}.},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.23.3416&rep=rep1&type=pdf},
  booktitle = {{{VLDB}}},
  publisher = {{Citeseer}},
  urldate = {2017-04-12},
  date = {2000},
  pages = {329--338},
  author = {Amer-Yahia, Sihem and Johnson, Theodore},
  file = {/home/amos/Zotero/storage/ENRZX2BF/Amer-Yahia and Johnson - 2000 - Optimizing Queries on Compressed Bitmaps..pdf}
}

@inproceedings{abadiTensorFlowSystemLargescale2016,
  title = {{{TensorFlow}}: {{A}} System for Large-Scale Machine Learning},
  url = {https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf},
  shorttitle = {{{TensorFlow}}},
  booktitle = {Proceedings of the 12th {{USENIX Symposium}} on {{Operating Systems Design}} and {{Implementation}} ({{OSDI}}). {{Savannah}}, {{Georgia}}, {{USA}}},
  urldate = {2017-04-13},
  date = {2016},
  author = {Abadi, MartÃ­n and Barham, Paul and Chen, Jianmin and Chen, Zhifeng and Davis, Andy and Dean, Jeffrey and Devin, Matthieu and Ghemawat, Sanjay and Irving, Geoffrey and Isard, Michael and others},
  file = {/home/amos/Zotero/storage/ACDKXTZH/Abadi et al. - 2016 - TensorFlow A system for large-scale machine learn.pdf}
}

@inproceedings{jagadishIncrementalOrganizationData1997,
  title = {Incremental Organization for Data Recording and Warehousing},
  volume = {97},
  url = {https://pdfs.semanticscholar.org/00a7/49a432197c91302fc817489903fe314b253b.pdf},
  booktitle = {{{VLDB}}},
  urldate = {2017-04-13},
  date = {1997},
  pages = {16--25},
  author = {Jagadish, H. V. and Narayan, P. P. S. and Seshadri, Sridhar and Sudarshan, S. and Kanneganti, Rama},
  file = {/home/amos/Zotero/storage/DHJRI2MA/Jagadish et al. - 1997 - Incremental organization for data recording and wa.pdf}
}

@inproceedings{slezakDataWarehouseTechnology2009,
  location = {{New York, NY, USA}},
  title = {Data {{Warehouse Technology}} by {{Infobright}}},
  isbn = {978-1-60558-551-2},
  url = {http://doi.acm.org/10.1145/1559845.1559933},
  doi = {10.1145/1559845.1559933},
  abstract = {We discuss Infobright technology with respect to its main features and architectural differentiators. We introduce the upcoming research and development projects that may be of special interest to the academic and industry communities.},
  booktitle = {Proceedings of the 2009 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '09},
  publisher = {{ACM}},
  urldate = {2017-04-16},
  date = {2009},
  pages = {841--846},
  keywords = {approximate query,column store,data clustering,data compression,data warehouse,database knowledge grid,ice,iee,mysql,open source,rough sets,two-level computing},
  author = {Ålezak, Dominik and Eastwood, Victoria}
}

@inproceedings{idreosOverviewDataExploration2015,
  location = {{New York, NY, USA}},
  title = {Overview of {{Data Exploration Techniques}}},
  isbn = {978-1-4503-2758-9},
  url = {http://doi.acm.org/10.1145/2723372.2731084},
  doi = {10.1145/2723372.2731084},
  abstract = {Data exploration is about efficiently extracting knowledge from data even if we do not know exactly what we are looking for. In this tutorial, we survey recent developments in the emerging area of database systems tailored for data exploration. We discuss new ideas on how to store and access data as well as new ideas on how to interact with a data system to enable users and applications to quickly figure out which data parts are of interest. In addition, we discuss how to exploit lessons-learned from past research, the new challenges data exploration crafts, emerging applications and future research directions.},
  booktitle = {Proceedings of the 2015 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '15},
  publisher = {{ACM}},
  urldate = {2017-04-16},
  date = {2015},
  pages = {277--281},
  keywords = {data,exploration},
  author = {Idreos, Stratos and Papaemmanouil, Olga and Chaudhuri, Surajit},
  file = {/home/amos/Zotero/storage/BF6TXQRL/Overview of Data Exploration Techniques.pdf}
}

@article{weissTechnicalOverviewOracle2012,
  title = {A Technical Overview of the Oracle Exadata Database Machine and Exadata Storage Server},
  journaltitle = {Oracle White Paper. Oracle Corporation, Redwood Shores},
  date = {2012},
  author = {Weiss, Ronald}
}

@inproceedings{sunFinegrainedPartitioningAggressive2014,
  location = {{New York, NY, USA}},
  title = {Fine-Grained {{Partitioning}} for {{Aggressive Data Skipping}}},
  isbn = {978-1-4503-2376-5},
  url = {http://doi.acm.org/10.1145/2588555.2610515},
  doi = {10.1145/2588555.2610515},
  abstract = {Modern query engines are increasingly being required to process enormous datasets in near real-time. While much can be done to speed up the data access, a promising technique is to reduce the need to access data through data skipping. By maintaining some metadata for each block of tuples, a query may skip a data block if the metadata indicates that the block does not contain relevant data. The effectiveness of data skipping, however, depends on how well the blocking scheme matches the query filters. In this paper, we propose a fine-grained blocking technique that reorganizes the data tuples into blocks with a goal of enabling queries to skip blocks aggressively. We first extract representative filters in a workload as features using frequent itemset mining. Based on these features, each data tuple can be represented as a feature vector. We then formulate the blocking problem as a optimization problem on the feature vectors, called Balanced MaxSkip Partitioning, which we prove is NP-hard. To find an approximate solution efficiently, we adopt the bottom-up clustering framework. We prototyped our blocking techniques on Shark, an open-source data warehouse system. Our experiments on TPC-H and a real-world workload show that our blocking technique leads to 2-5x improvement in query response time over traditional range-based blocking techniques.},
  booktitle = {Proceedings of the 2014 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '14},
  publisher = {{ACM}},
  urldate = {2017-04-17},
  date = {2014},
  pages = {1115--1126},
  keywords = {query processing,partitioning,algorithms,data warehouse},
  author = {Sun, Liwen and Franklin, Michael J. and Krishnan, Sanjay and Xin, Reynold S.},
  file = {/home/amos/Zotero/storage/U4MHADKQ/Fine-grained Partitioning for Aggressive Data Skipping.pdf}
}

@inproceedings{zamanianLocalityawarePartitioningParallel2015,
  location = {{New York, NY, USA}},
  title = {Locality-Aware {{Partitioning}} in {{Parallel Database Systems}}},
  isbn = {978-1-4503-2758-9},
  url = {http://doi.acm.org/10.1145/2723372.2723718},
  doi = {10.1145/2723372.2723718},
  abstract = {Parallel database systems horizontally partition large amounts of structured data in order to provide parallel data processing capabilities for analytical workloads in shared-nothing clusters. One major challenge when horizontally partitioning large amounts of data is to reduce the network costs for a given workload and a database schema. A common technique to reduce the network costs in parallel database systems is to co-partition tables on their join key in order to avoid expensive remote join operations. However, existing partitioning schemes are limited in that respect since only subsets of tables in complex schemata sharing the same join key can be co-partitioned unless tables are fully replicated. In this paper we present a novel partitioning scheme called predicate-based reference partition (or PREF for short) that allows to co-partition sets of tables based on given join predicates. Moreover, based on PREF, we present two automatic partitioning design algorithms to maximize data-locality. One algorithm only needs the schema and data whereas the other algorithm additionally takes the workload as input. In our experiments we show that our automated design algorithms can partition database schemata of different complexity and thus help to effectively reduce the runtime of queries under a given workload when compared to existing partitioning approaches.},
  booktitle = {Proceedings of the 2015 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '15},
  publisher = {{ACM}},
  urldate = {2017-04-18},
  date = {2015},
  pages = {17--30},
  keywords = {partitioning,schemes},
  author = {Zamanian, Erfan and Binnig, Carsten and Salama, Abdallah},
  file = {/home/amos/Zotero/storage/ULBEL7AM/Locality-aware Partitioning in Parallel Database Systems.pdf}
}

@article{serafiniClayFinegrainedAdaptive2016,
  title = {Clay: {{Fine}}-Grained {{Adaptive Partitioning}} for {{General Database Schemas}}},
  volume = {10},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/3025111.3025125},
  doi = {10.14778/3025111.3025125},
  shorttitle = {Clay},
  abstract = {Transaction processing database management systems (DBMSs) are critical for today's data-intensive applications because they enable an organization to quickly ingest and query new information. Many of these applications exceed the capabilities of a single server, and thus their database has to be deployed in a distributed DBMS. The key factor affecting such a system's performance is how the database is partitioned. If the database is partitioned incorrectly, the number of distributed transactions can be high. These transactions have to synchronize their operations over the network, which is considerably slower and leads to poor performance. Previous work on elastic database repartitioning has focused on a certain class of applications whose database schema can be represented in a hierarchical tree structure. But many applications cannot be partitioned in this manner, and thus are subject to distributed transactions that impede their performance and scalability. In this paper, we present a new on-line partitioning approach, called Clay, that supports both tree-based schemas and more complex "general" schemas with arbitrary foreign key relationships. Clay dynamically creates blocks of tuples to migrate among servers during repartitioning, placing no constraints on the schema but taking care to balance load and reduce the amount of data migrated. Clay achieves this goal by including in each block a set of hot tuples and other tuples co-accessed with these hot tuples. To evaluate our approach, we integrate Clay in a distributed, main-memory DBMS and show that it can generate partitioning schemes that enable the system to achieve up to 15Ã better throughput and 99\% lower latency than existing approaches.},
  number = {4},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-18},
  date = {2016-11},
  pages = {445--456},
  author = {Serafini, Marco and Taft, Rebecca and Elmore, Aaron J. and Pavlo, Andrew and Aboulnaga, Ashraf and Stonebraker, Michael},
  file = {/home/amos/Zotero/storage/BHKVCMZF/Clay - Fine-Grained Adaptive Partitioning for General Database Schemas.pdf}
}

@inproceedings{moerkotteSmallMaterializedAggregates1998,
  location = {{San Francisco, CA, USA}},
  title = {Small {{Materialized Aggregates}}: {{A Light Weight Index Structure}} for {{Data Warehousing}}},
  isbn = {1-55860-566-5},
  url = {http://dl.acm.org/citation.cfm?id=645924.671173},
  shorttitle = {Small {{Materialized Aggregates}}},
  booktitle = {Proceedings of the 24rd {{International Conference}} on {{Very Large Data Bases}}},
  series = {{{VLDB}} '98},
  publisher = {{Morgan Kaufmann Publishers Inc.}},
  urldate = {2017-04-18},
  date = {1998},
  pages = {476--487},
  author = {Moerkotte, Guido}
}

@inproceedings{shettyBuildingWorkloadindependentStorage2013,
  location = {{Berkeley, CA, USA}},
  title = {Building {{Workload}}-Independent {{Storage}} with {{VT}}-Trees},
  url = {http://dl.acm.org/citation.cfm?id=2591272.2591275},
  abstract = {As the Internet and the amount of data grows, the variability of data sizes grows too--from small MP3 tags to large VM images. With applications using increasingly more complex queries and larger data-sets, data access patterns have become more complex and randomized. Current storage systems focus on optimizing for one band of workloads at the expense of other workloads due to limitations in existing storage system data structures. We designed a novel workload-independent data structure called the VT-tree which extends the LSM-tree to efficiently handle sequential and file-system workloads. We designed a system based solely on VT-trees which offers concurrent access to data via file system and database APIs, transactional guarantees, and consequently provides efficient and scalable access to both large and small data items regardless of the access pattern. Our evaluation shows that our user-level system has 2-6.6Ã better performance for random-write workloads and only a small average overhead for other workloads.},
  booktitle = {Proceedings of the 11th {{USENIX Conference}} on {{File}} and {{Storage Technologies}}},
  series = {{{FAST}}'13},
  publisher = {{USENIX Association}},
  urldate = {2017-04-18},
  date = {2013},
  pages = {17--30},
  author = {Shetty, Pradeep and Spillane, Richard and Malpani, Ravikant and Andrews, Binesh and Seyster, Justin and Zadok, Erez}
}

@article{benderDonThrashHow2012,
  title = {Don'{{T Thrash}}: {{How}} to {{Cache Your Hash}} on {{Flash}}},
  volume = {5},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2350229.2350275},
  doi = {10.14778/2350229.2350275},
  shorttitle = {Don'{{T Thrash}}},
  abstract = {This paper presents new alternatives to the well-known Bloom filter data structure. The Bloom filter, a compact data structure supporting set insertion and membership queries, has found wide application in databases, storage systems, and networks. Because the Bloom filter performs frequent random reads and writes, it is used almost exclusively in RAM, limiting the size of the sets it can represent. This paper first describes the quotient filter, which supports the basic operations of the Bloom filter, achieving roughly comparable performance in terms of space and time, but with better data locality. Operations on the quotient filter require only a small number of contiguous accesses. The quotient filter has other advantages over the Bloom filter: it supports deletions, it can be dynamically resized, and two quotient filters can be efficiently merged. The paper then gives two data structures, the buffered quotient filter and the cascade filter, which exploit the quotient filter advantages and thus serve as SSD-optimized alternatives to the Bloom filter. The cascade filter has better asymptotic I/O performance than the buffered quotient filter, but the buffered quotient filter outperforms the cascade filter on small to medium data sets. Both data structures significantly outperform recently-proposed SSD-optimized Bloom filter variants, such as the elevator Bloom filter, buffered Bloom filter, and forest-structured Bloom filter. In experiments, the cascade filter and buffered quotient filter performed insertions 8.6--11 times faster than the fastest Bloom filter variant and performed lookups 0.94--2.56 times faster.},
  number = {11},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-18},
  date = {2012-07},
  pages = {1627--1637},
  author = {Bender, Michael A. and Farach-Colton, Martin and Johnson, Rob and Kraner, Russell and Kuszmaul, Bradley C. and Medjedovic, Dzejla and Montes, Pablo and Shetty, Pradeep and Spillane, Richard P. and Zadok, Erez}
}

@inproceedings{fanCuckooFilterPractically2014,
  location = {{New York, NY, USA}},
  title = {Cuckoo {{Filter}}: {{Practically Better Than Bloom}}},
  isbn = {978-1-4503-3279-8},
  url = {http://doi.acm.org/10.1145/2674005.2674994},
  doi = {10.1145/2674005.2674994},
  shorttitle = {Cuckoo {{Filter}}},
  abstract = {In many networking systems, Bloom filters are used for high-speed set membership tests. They permit a small fraction of false positive answers with very good space efficiency. However, they do not permit deletion of items from the set, and previous attempts to extend "standard" Bloom filters to support deletion all degrade either space or performance. We propose a new data structure called the cuckoo filter that can replace Bloom filters for approximate set membership tests. Cuckoo filters support adding and removing items dynamically while achieving even higher performance than Bloom filters. For applications that store many items and target moderately low false positive rates, cuckoo filters have lower space overhead than space-optimized Bloom filters. Our experimental results also show that cuckoo filters outperform previous data structures that extend Bloom filters to support deletions substantially in both time and space.},
  booktitle = {Proceedings of the 10th {{ACM International}} on {{Conference}} on {{Emerging Networking Experiments}} and {{Technologies}}},
  series = {{{CoNEXT}} '14},
  publisher = {{ACM}},
  urldate = {2017-04-18},
  date = {2014},
  pages = {75--88},
  keywords = {bloom filters,compression,cuckoo hashing},
  author = {Fan, Bin and Andersen, Dave G. and Kaminsky, Michael and Mitzenmacher, Michael D.},
  file = {/home/amos/Zotero/storage/HXTY2AHS/Cuckoo Filter - Practically Better Than Bloom.pdf}
}

@inproceedings{leisAdaptiveRadixTree2013,
  title = {The Adaptive Radix Tree: {{ARTful}} Indexing for Main-Memory Databases},
  doi = {10.1109/ICDE.2013.6544812},
  shorttitle = {The Adaptive Radix Tree},
  abstract = {Main memory capacities have grown up to a point where most databases fit into RAM. For main-memory database systems, index structure performance is a critical bottleneck. Traditional in-memory data structures like balanced binary search trees are not efficient on modern hardware, because they do not optimally utilize on-CPU caches. Hash tables, also often used for main-memory indexes, are fast but only support point queries. To overcome these shortcomings, we present ART, an adaptive radix tree (trie) for efficient indexing in main memory. Its lookup performance surpasses highly tuned, read-only search trees, while supporting very efficient insertions and deletions as well. At the same time, ART is very space efficient and solves the problem of excessive worst-case space consumption, which plagues most radix trees, by adaptively choosing compact and efficient data structures for internal nodes. Even though ART's performance is comparable to hash tables, it maintains the data in sorted order, which enables additional operations like range scan and prefix lookup.},
  eventtitle = {2013 {{IEEE}} 29th {{International Conference}} on {{Data Engineering}} ({{ICDE}})},
  booktitle = {2013 {{IEEE}} 29th {{International Conference}} on {{Data Engineering}} ({{ICDE}})},
  date = {2013-04},
  pages = {38-49},
  keywords = {Indexing,ART performance,ARTful indexing,Arrays,RAM,Subspace constraints,Vegetation,adaptive radix tree,balanced binary search tree,database indexing,deletion,hash table,in-memory data structure,index structure performance,insertion,internal node,lookup performance,main memory index,main-memory database system,min memory capacity,on-CPU cache utilization,point query,prefix lookup,range scan,read-only search tree,sorted order data,table lookup,tree data structures,tree searching,worst-case space consumption,Cache storage},
  author = {Leis, V. and Kemper, A. and Neumann, T.},
  file = {/home/amos/Zotero/storage/VVQ5FRSG/Leis et al. - 2013 - The adaptive radix tree: ARTful indexing for main-.pdf;/home/amos/Zotero/storage/6TK4IA5X/Leis et al. - 2013 - The adaptive radix tree: ARTful indexing for main-.html}
}

@article{oneilLogstructuredMergetreeLSMtree1996,
  langid = {english},
  title = {The Log-Structured Merge-Tree ({{LSM}}-Tree)},
  volume = {33},
  issn = {0001-5903, 1432-0525},
  url = {https://link.springer.com/article/10.1007/s002360050048},
  doi = {10.1007/s002360050048},
  abstract = {High-performance transaction system applications typically insert rows in a History table to provide an activity trace; at the same time the transaction system generates log records for purposes of system recovery. Both types of generated information can benefit from efficient indexing. An example in a well-known setting is the TPC-A benchmark application, modified to support efficient queries on the history for account activity for specific accounts. This requires an index by account-id on the fast-growing History table. Unfortunately, standard disk-based index structures such as the B-tree will effectively double the I/O cost of the transaction to maintain an index such as this in real time, increasing the total system cost up to fifty percent. Clearly a method for maintaining a real-time index at low cost is desirable. The log-structured mergetree (LSM-tree) is a disk-based data structure designed to provide low-cost indexing for a file experiencing a high rate of record inserts (and deletes) over an extended period. The LSM-tree uses an algorithm that defers and batches index changes, cascading the changes from a memory-based component through one or more disk components in an efficient manner reminiscent of merge sort. During this process all index values are continuously accessible to retrievals (aside from very short locking periods), either through the memory component or one of the disk components. The algorithm has greatly reduced disk arm movements compared to a traditional access methods such as B-trees, and will improve cost-performance in domains where disk arm costs for inserts with traditional access methods overwhelm storage media costs. The LSM-tree approach also generalizes to operations other than insert and delete. However, indexed finds requiring immediate response will lose I/O efficiency in some cases, so the LSM-tree is most useful in applications where index inserts are more common than finds that retrieve the entries. This seems to be a common property for history tables and log files, for example. The conclusions of Sect. 6 compare the hybrid use of memory and disk components in the LSM-tree access method with the commonly understood advantage of the hybrid method to buffer disk pages in memory.},
  number = {4},
  journaltitle = {Acta Informatica},
  shortjournal = {Acta Informatica},
  urldate = {2017-04-18},
  date = {1996-06-01},
  pages = {351-385},
  author = {OâNeil, Patrick and Cheng, Edward and Gawlick, Dieter and OâNeil, Elizabeth},
  file = {/home/amos/Zotero/storage/ZV59QXWX/OâNeil et al. - 1996 - The log-structured merge-tree (LSM-tree).html}
}

@inproceedings{changBigtableDistributedStorage2006,
  location = {{Berkeley, CA, USA}},
  title = {Bigtable: {{A Distributed Storage System}} for {{Structured Data}}},
  url = {http://dl.acm.org/citation.cfm?id=1267308.1267323},
  shorttitle = {Bigtable},
  abstract = {Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size: petabytes of data across thousands of commodity servers. Many projects at Google store data in Bigtable, including web indexing, Google Earth, and Google Finance. These applications place very different demands on Bigtable, both in terms of data size (from URLs to web pages to satellite imagery) and latency requirements (from backend bulk processing to real-time data serving). Despite these varied demands, Bigtable has successfully provided a flexible, high-performance solution for all of these Google products. In this paper we describe the simple data model provided by Bigtable, which gives clients dynamic control over data layout and format, and we describe the design and implementation of Bigtable.},
  booktitle = {Proceedings of the 7th {{USENIX Symposium}} on {{Operating Systems Design}} and {{Implementation}} - {{Volume}} 7},
  series = {{{OSDI}} '06},
  publisher = {{USENIX Association}},
  urldate = {2017-04-18},
  date = {2006},
  pages = {15--15},
  author = {Chang, Fay and Dean, Jeffrey and Ghemawat, Sanjay and Hsieh, Wilson C. and Wallach, Deborah A. and Burrows, Mike and Chandra, Tushar and Fikes, Andrew and Gruber, Robert E.}
}

@article{shanbhagAmoebaShapeChanging2016,
  title = {Amoeba: {{A Shape Changing Storage System}} for {{Big Data}}},
  volume = {9},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/3007263.3007311},
  doi = {10.14778/3007263.3007311},
  shorttitle = {Amoeba},
  abstract = {Data partitioning significantly improves the query performance in distributed database systems. A large number of techniques have been proposed to efficiently partition a dataset for a given query workload. However, many modern analytic applications involve ad-hoc or exploratory analysis where users do not have a representative query workload upfront. Furthermore, workloads change over time as businesses evolve or as analysts gain better understanding of their data. Static workload-based data partitioning techniques are therefore not suitable for such settings. In this paper, we describe the demonstration of Amoeba, a distributed storage system which uses adaptive multi-attribute data partitioning to efficiently support ad-hoc as well as recurring queries. Amoeba applies a robust partitioning algorithm such that ad-hoc queries on all attributes have similar performance gains. Thereafter, Amoeba adaptively repartitions the data based on the observed query sequence, i.e., the system improves over time. All along Amoeba offers both adaptivity (i.e., adjustments according to workload changes) as well as robustness (i.e., avoiding performance spikes due to workload changes). We propose to demonstrate Amoeba on scenarios from an internet-of-things startup that tracks user driving patterns. We invite the audience to interactively fire fast ad-hoc queries, observe multi-dimensional adaptivity, and play with a robust/reactive knob in Amoeba. The web front end displays the layout changes, runtime costs, and compares it to Spark with both default and workload-aware partitioning.},
  number = {13},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-18},
  date = {2016-09},
  pages = {1569--1572},
  author = {Shanbhag, Anil and Jindal, Alekh and Lu, Yi and Madden, Samuel}
}

@article{luAdaptDBAdaptivePartitioning2017,
  title = {{{AdaptDB}}: {{Adaptive Partitioning}} for {{Distributed Joins}}},
  volume = {10},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/3055540.3055551},
  doi = {10.14778/3055540.3055551},
  shorttitle = {{{AdaptDB}}},
  abstract = {Big data analytics often involves complex join queries over two or more tables. Such join processing is expensive in a distributed setting both because large amounts of data must be read from disk, and because of data shuffling across the network. Many techniques based on data partitioning have been proposed to reduce the amount of data that must be accessed, often focusing on finding the best partitioning scheme for a particular workload, rather than adapting to changes in the workload over time. In this paper, we present AdaptDB, an adaptive storage manager for analytical database workloads in a distributed setting. It works by partitioning datasets across a cluster and incrementally refining data partitioning as queries are run. AdaptDB introduces a novel hyper-join that avoids expensive data shuffling by identifying storage blocks of the joining tables that overlap on the join attribute, and only joining those blocks. Hyper-join performs well when each block in one table overlaps with few blocks in the other table, since that will minimize the number of blocks that have to be accessed. To minimize the number of overlapping blocks for common join queries, AdaptDB users smooth repartitioning to repartition small portions of the tables on join attributes as queries run. A prototype of AdaptDB running on top of Spark improves query performance by 2--3x on TPC-H as well as real-world dataset, versus a system that employs scans and shuffle-joins.},
  number = {5},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-18},
  date = {2017-01},
  pages = {589--600},
  author = {Lu, Yi and Shanbhag, Anil and Jindal, Alekh and Madden, Samuel},
  file = {/home/amos/Zotero/storage/JISUL7NM/AdaptDB - Adaptive Partitioning for Distributed Joins.pdf}
}

@online{CitusdataCitus2017,
  title = {Citusdata/Citus},
  url = {https://github.com/citusdata/citus},
  abstract = {citus - Scalable PostgreSQL for real-time workloads},
  journaltitle = {GitHub},
  urldate = {2017-04-18},
  date = {2017}
}

@inproceedings{agrawalAutomaticPhysicalDesign2006,
  location = {{New York, NY, USA}},
  title = {Automatic {{Physical Design Tuning}}: {{Workload As}} a {{Sequence}}},
  isbn = {1-59593-434-0},
  url = {http://doi.acm.org/10.1145/1142473.1142549},
  doi = {10.1145/1142473.1142549},
  shorttitle = {Automatic {{Physical Design Tuning}}},
  abstract = {The area of automatic selection of physical database design to optimize the performance of a relational database system based on a workload of SQL queries and updates has gained prominence in recent years. Major database vendors have released automated physical database design tools with the goal of reducing the total cost of ownership. An important assumption underlying these tools is that the workload is a set of SQL statements. In this paper, we show that being able to treat the workload as a sequence, i.e., exploiting the ordering of statements can significantly broaden the usage of such tools. We present scenarios where exploiting sequence information in the workload is crucial for performance tuning. We also propose techniques for addressing the technical challenges arising from treating the workload as a sequence. We evaluate the effectiveness of our techniques through experiments on Microsoft SQL Server.},
  booktitle = {Proceedings of the 2006 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '06},
  publisher = {{ACM}},
  urldate = {2017-04-18},
  date = {2006},
  pages = {683--694},
  keywords = {physical design,sequence,tuning,workload},
  author = {Agrawal, Sanjay and Chu, Eric and Narasayya, Vivek},
  file = {/home/amos/Zotero/storage/FYMRJ96K/Automatic Physical Design Tuning - Workload as a Sequence.pdf}
}

@inproceedings{agrawalDatabaseTuningAdvisor2005,
  location = {{New York, NY, USA}},
  title = {Database {{Tuning Advisor}} for {{Microsoft SQL Server}} 2005: {{Demo}}},
  isbn = {1-59593-060-4},
  url = {http://doi.acm.org/10.1145/1066157.1066292},
  doi = {10.1145/1066157.1066292},
  shorttitle = {Database {{Tuning Advisor}} for {{Microsoft SQL Server}} 2005},
  abstract = {Database Tuning Advisor (DTA) is a physical database design tool that is part of Microsoft's SQL Server 2005 relational database management system. Previously known as "Index Tuning Wizard" in SQL Server 7.0 and SQL Server 2000, DTA adds new functionality that is not available in other contemporary physical design tuning tools. Novel aspects of DTA that will be demonstrated include: (a) Ability to take into account both performance and manageability requirements of DBAs (b) Fully integrated recommendations for indexes, materialized views and horizontal partitioning (c) Transparently leverage a test server to offload tuning load from production server and (d) Easy programmability and scriptability.},
  booktitle = {Proceedings of the 2005 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '05},
  publisher = {{ACM}},
  urldate = {2017-04-18},
  date = {2005},
  pages = {930--932},
  author = {Agrawal, Sanjay and Chaudhuri, Surajit and Kollar, Lubor and Marathe, Arun and Narasayya, Vivek and Syamala, Manoj}
}

@inproceedings{zilioDB2DesignAdvisor2004,
  location = {{Toronto, Canada}},
  title = {{{DB2 Design Advisor}}: {{Integrated Automatic Physical Database Design}}},
  isbn = {0-12-088469-0},
  url = {http://dl.acm.org/citation.cfm?id=1316689.1316783},
  shorttitle = {{{DB2 Design Advisor}}},
  abstract = {The DB2 Design Advisor in IBMÂ® DB2Â® Universal DatabaseTM (DB2 UDB) Version 8.2 for LinuxÂ®, UNIXÂ® and WindowsÂ® is a tool that, for a given workload, automatically recommends physical design features that are any subset of indexes, materialized query tables (also called materialized views), shared-nothing database partitionings, and multidimensional clustering of tables. Our work is the very first industrial-strength tool that covers the design of as many as four different features, a significant advance to existing tools, which support no more than just indexes and materialized views. Building such a tool is challenging, because of not only the large search space introduced by the interactions among features, but also the extensibility needed by the tool to support additional features in the future. We adopt a novel "hybrid" approach in the Design Advisor that allows us to take important interdependencies into account as well as to encapsulate design features as separate components to lower the reengineering cost. The Design Advisor also features a built-in module that automatically reduces the given workload, and therefore provides great scalability for the tool. Our experimental results demonstrate that our tool can quickly provide good physical design recommendations that satisfy users' requirements.},
  booktitle = {Proceedings of the {{Thirtieth International Conference}} on {{Very Large Data Bases}} - {{Volume}} 30},
  series = {{{VLDB}} '04},
  publisher = {{VLDB Endowment}},
  urldate = {2017-04-18},
  date = {2004},
  pages = {1087--1097},
  author = {Zilio, Daniel C. and Rao, Jun and Lightstone, Sam and Lohman, Guy and Storm, Adam and Garcia-Arellano, Christian and Fadden, Scott}
}

@inproceedings{dagevilleAutomaticSQLTuning2004,
  location = {{Toronto, Canada}},
  title = {Automatic {{SQL Tuning}} in {{Oracle 10G}}},
  isbn = {0-12-088469-0},
  url = {http://dl.acm.org/citation.cfm?id=1316689.1316784},
  abstract = {SQL tuning is a very critical aspect of database performance tuning. It is an inherently complex activity requiring a high level of expertise in several domains: query optimization, to improve the execution plan selected by the query optimizer; access design, to identify missing access structures; and SQL design, to restructure and simplify the text of a badly written SQL statement. Furthermore, SQL tuning is a time consuming task due to the large volume and evolving nature of the SQL workload and its underlying data. In this paper we present the new Automatic SQL Tuning feature of Oracle 10g. This technology is implemented as a core enhancement of the Oracle query optimizer and offers a comprehensive solution to the SQL tuning challenges mentioned above. Automatic SQL Tuning introduces the concept of SQL profiling to transparently improve execution plans. It also generates SQL tuning recommendations by performing cost-based access path and SQL structure "what-if" analyses. This feature is exposed to the user through both graphical and command line interfaces. The Automatic SQL Tuning is an integral part of the Oracle's framework for self-managing databases. The superiority of this new technology is demonstrated by comparing the results of Automatic SQL Tuning to manual tuning using a real customer workload.},
  booktitle = {Proceedings of the {{Thirtieth International Conference}} on {{Very Large Data Bases}} - {{Volume}} 30},
  series = {{{VLDB}} '04},
  publisher = {{VLDB Endowment}},
  urldate = {2017-04-18},
  date = {2004},
  pages = {1098--1109},
  author = {Dageville, Benoit and Das, Dinesh and Dias, Karl and Yagoub, Khaled and Zait, Mohamed and Ziauddin, Mohamed}
}

@inproceedings{graefeFastLoadsFast2009,
  langid = {english},
  title = {Fast {{Loads}} and {{Fast Queries}}},
  url = {https://link.springer.com/chapter/10.1007/978-3-642-03730-6_10},
  doi = {10.1007/978-3-642-03730-6_10},
  abstract = {For efficient query processing, a relational table should be indexed in multiple ways; for efficient database loading, indexes should be omitted. Moerkotteâs âsmall materialized aggregatesâ can be used to alleviate this tension, notably in the form of Netezzaâs âzone maps.â Their most significant advantageous characteristics are that (i) load bandwidth is maximized by avoiding the cost of index maintenance, (ii) there is no need for complex index tuning, and (iii) scans for typical queries are very fast. Their most significant limiting characteristics are that (iv) they are effective only for query predicates on columns correlated with the load sequence, (v) individual outlier values can sharply reduce their effectiveness, and (vi) they fail to improve search performance within a zone.In this research, we introduce zone filters and zone indexes that address these limitations without reducing the advantages. The new data structures can be created as side effects of the load process, with all required analyses accomplished while a moderate amount of new data still remains in the buffer pool. Traditional sorting and indexing are not required. Nonetheless, query performance matches that of zxone maps where those apply, exceeds it for predicates for which zone maps are ineffective, and can be comparable to query processing in a database with traditional indexing, as demonstrated in our simulations.},
  eventtitle = {International {{Conference}} on {{Data Warehousing}} and {{Knowledge Discovery}}},
  booktitle = {Data {{Warehousing}} and {{Knowledge Discovery}}},
  publisher = {{Springer, Berlin, Heidelberg}},
  urldate = {2017-04-22},
  date = {2009-08-31},
  pages = {111-124},
  author = {Graefe, Goetz},
  file = {/home/amos/Zotero/storage/I36B6CSD/Graefe - 2009 - Fast Loads and Fast Queries.html;/home/amos/Zotero/storage/K2ERCJ2V/Graefe - 2009 - Fast Loads and Fast Queries.html}
}

@inproceedings{qinAdaptiveDataSkipping2016,
  location = {{New York, NY, USA}},
  title = {Adaptive {{Data Skipping}} in {{Main}}-{{Memory Systems}}},
  isbn = {978-1-4503-3531-7},
  url = {http://doi.acm.org/10.1145/2882903.2914836},
  doi = {10.1145/2882903.2914836},
  abstract = {As modern main-memory optimized data systems increasingly rely on fast scans, lightweight indexes that allow for data skipping play a crucial role in data filtering to reduce system I/O. Scans benefit from data skipping when the data order is sorted, semi-sorted, or comprised of clustered values. However data skipping loses effectiveness over arbitrary data distributions. Applying data skipping techniques over non-sorted data can significantly decrease query performance since the extra cost of metadata reads result in no corresponding scan performance gains. We introduce adaptive data skipping as a framework for structures and techniques that respond to a vast array of data distributions and query workloads. We reveal an adaptive zonemaps design and implementation on a main-memory column store prototype to demonstrate that adaptive data skipping has potential for 1.4X speedup.},
  booktitle = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '16},
  publisher = {{ACM}},
  urldate = {2017-04-22},
  date = {2016},
  pages = {2255--2256},
  keywords = {adaptive,adaptive data skipping,adaptive zonemap,adaptive zonemaps,data skipping,lightweight index,lightweight indexing,zonemap,zonemaps},
  author = {Qin, Wilson and Idreos, Stratos}
}

@inproceedings{jurgensPISAPerformanceModels1999,
  title = {{{PISA}}: {{Performance}} Models for {{Index Structures}} with and without {{Aggregated}} Data},
  doi = {10.1109/SSDM.1999.787623},
  shorttitle = {{{PISA}}},
  abstract = {Different models to estimate the performance of tree-based index structures exist. Materialized aggregates in the inner nodes of such index structures are used to speed up range queries on aggregates. This is achieved by avoiding traversing the index tree down to the leaves through aggregates precomputed in the inner nodes. None of the existing models deals with these aggregated data. In this paper, we extend the existing models to take account of aggregated data. Our main contribution is a new generic performance model to estimate the Performance of Index Structures with and without Aggregated data (PISA) that covers both aspects. In addition, the PISA model is adaptable to the distribution of the data and to the location of the query boxes (e.g. uniform, normal and skewed distributions). Experiments confirm that, in most cases, the PISA model is more accurate than other models},
  eventtitle = {Proceedings. {{Eleventh International Conference}} on {{Scientific}} and {{Statistical Database Management}}},
  booktitle = {Proceedings. {{Eleventh International Conference}} on {{Scientific}} and {{Statistical Database Management}}},
  date = {1999-08},
  pages = {78-87},
  keywords = {Indexing,database indexing,tree data structures,Aggregates,Computer science,Data structures,Data warehouses,Econometrics,Information systems,Multidimensional systems,PISA model,Statistics,aggregated data,data distribution,data warehouses,index structures,inner nodes,materialized aggregates,performance models,query box location,range queries,software performance evaluation,tree-based index structures},
  author = {Jurgens, M. and Lenz, H. J.},
  file = {/home/amos/Zotero/storage/AVZSACZX/Jurgens and Lenz - 1999 - PISA: Performance models for Index Structures with.pdf;/home/amos/Zotero/storage/BZXJK354/Jurgens and Lenz - 1999 - PISA: Performance models for Index Structures with.html}
}

@article{alyAQWAAdaptiveQuery2015,
  title = {{{AQWA}}: {{Adaptive Query Workload Aware Partitioning}} of {{Big Spatial Data}}},
  volume = {8},
  issn = {2150-8097},
  url = {https://doi.org/10.14778/2831360.2831361},
  doi = {10.14778/2831360.2831361},
  shorttitle = {{{AQWA}}},
  abstract = {The unprecedented spread of location-aware devices has resulted in a plethora of location-based services in which huge amounts of spatial data need to be efficiently processed by large-scale computing clusters. Existing cluster-based systems for processing spatial data employ static data-partitioning structures that cannot adapt to data changes, and that are insensitive to the query workload. Hence, these systems are incapable of consistently providing good performance. To close this gap, we present AQWA, an adaptive and query-workload-aware mechanism for partitioning large-scale spatial data. AQWA does not assume prior knowledge of the data distribution or the query workload. Instead, as data is consumed and queries are processed, the data partitions are incrementally updated. With extensive experiments using real spatial data from Twitter, and various workloads of range and k-nearest-neighbor queries, we demonstrate that AQWA can achieve an order of magnitude enhancement in query performance compared to the state-of-the-art systems.},
  number = {13},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-22},
  date = {2015-09},
  pages = {2062--2073},
  author = {Aly, Ahmed M. and Mahmood, Ahmed R. and Hassan, Mohamed S. and Aref, Walid G. and Ouzzani, Mourad and Elmeleegy, Hazem and Qadah, Thamir}
}

@inproceedings{eltabakhEagleeyedElephantSplitoriented2013,
  location = {{New York, NY, USA}},
  title = {Eagle-Eyed {{Elephant}}: {{Split}}-Oriented {{Indexing}} in {{Hadoop}}},
  isbn = {978-1-4503-1597-5},
  url = {http://doi.acm.org/10.1145/2452376.2452388},
  doi = {10.1145/2452376.2452388},
  shorttitle = {Eagle-Eyed {{Elephant}}},
  abstract = {An increasingly important analytics scenario for Hadoop involves multiple (often ad hoc) grouping and aggregation queries with selection predicates over a slowly changing dataset. These queries are typically expressed via high-level query languages such as Jaql, Pig, and Hive, and are used either directly for business-intelligence applications or to prepare the data for statistical model building and machine learning. In such scenarios it has been increasingly recognized that, as in classical databases, techniques for avoiding access to irrelevant data can dramatically improve query performance. Prior work on Hadoop, however, has simply ported classical techniques to the MapReduce setting, focusing on record-level indexing and key-based partition elimination. Unfortunately, record-level indexing only slightly improves overall query performance, because it does not minimize the number of mapper "waves", which is determined by the number of processed splits. Moreover, key-based partitioning requires data reorganization, which is usually impractical in Hadoop settings. We therefore need to re-envision how data access mechanisms are defined and implemented. To this end, we introduce the Eagle-Eyed Elephant (E3) framework for boosting the efficiency of query processing in Hadoop by avoiding accesses of data splits that are irrelevant to the query at hand. Using novel techniques involving inverted indexes over splits, domain segmentation, materialized views, and adaptive caching, E3 avoids accessing irrelevant splits even in the face of evolving workloads and data. Our experiments show that E3 can achieve up to 20x cost savings with small to moderate storage overheads.},
  booktitle = {Proceedings of the 16th {{International Conference}} on {{Extending Database Technology}}},
  series = {{{EDBT}} '13},
  publisher = {{ACM}},
  urldate = {2017-04-22},
  date = {2013},
  pages = {89--100},
  author = {Eltabakh, Mohamed Y. and Ãzcan, Fatma and Sismanis, Yannis and Haas, Peter J. and Pirahesh, Hamid and Vondrak, Jan}
}

@article{jiangSnapToQueryProvidingInteractive2015,
  title = {{{SnapToQuery}}: {{Providing Interactive Feedback During Exploratory Query Specification}}},
  volume = {8},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2809974.2809986},
  doi = {10.14778/2809974.2809986},
  shorttitle = {{{SnapToQuery}}},
  abstract = {A critical challenge in the data exploration process is discovering and issuing the "right" query, especially when the space of possible queries is large. This problem of exploratory query specification is exacerbated by the use of interactive user interfaces driven by mouse, touch, or next-generation, three-dimensional, motion capture-based devices; which, are often imprecise due to jitter and sensitivity issues. In this paper, we propose SnapToQuery, a novel technique that guides users through the query space by providing interactive feedback during the query specification process by "snapping" to the user's likely intended queries. These intended queries can be derived from prior query logs, or from the data itself, using methods described in this paper. In order to provide interactive response times over large datasets, we propose two data reduction techniques when snapping to these queries. Performance experiments demonstrate that our algorithms help maintain an interactive experience while allowing for accurate guidance. User studies over three kinds of devices (mouse, touch, and motion capture) show that SnapToQuery can help users specify queries quicker and more accurately; resulting in a query specification time speedup of 1.4Ã for mouse and touch-based devices and 2.2Ã for motion capture-based devices.},
  number = {11},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-22},
  date = {2015-07},
  pages = {1250--1261},
  author = {Jiang, Lilong and Nandi, Arnab}
}

@article{muhlbauerInstantLoadingMain2013,
  title = {Instant {{Loading}} for {{Main Memory Databases}}},
  volume = {6},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2556549.2556555},
  doi = {10.14778/2556549.2556555},
  abstract = {eScience and big data analytics applications are facing the challenge of efficiently evaluating complex queries over vast amounts of structured text data archived in network storage solutions. To analyze such data in traditional disk-based database systems, it needs to be bulk loaded, an operation whose performance largely depends on the wire speed of the data source and the speed of the data sink, i.e., the disk. As the speed of network adapters and disks has stagnated in the past, loading has become a major bottleneck. The delays it is causing are now ubiquitous as text formats are a preferred storage format for reasons of portability. But the game has changed: Ever increasing main memory capacities have fostered the development of in-memory database systems and very fast network infrastructures are on the verge of becoming economical. While hardware limitations for fast loading have disappeared, current approaches for main memory databases fail to saturate the now available wire speeds of tens of Gbit/s. With Instant Loading, we contribute a novel CSV loading approach that allows scalable bulk loading at wire speed. This is achieved by optimizing all phases of loading for modern super-scalar multi-core CPUs. Large main memory capacities and Instant Loading thereby facilitate a very efficient data staging processing model consisting of instantaneous load-work-unload cycles across data archives on a single node. Once data is loaded, updates and queries are efficiently processed with the flexibility, security, and high performance of relational main memory databases.},
  number = {14},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-04-27},
  date = {2013-09},
  pages = {1702--1713},
  author = {MÃ¼hlbauer, Tobias and RÃ¶diger, Wolf and Seilbeck, Robert and Reiser, Angelika and Kemper, Alfons and Neumann, Thomas}
}

@inproceedings{abouziedInvisibleLoadingAccessdriven2013,
  location = {{New York, NY, USA}},
  title = {Invisible {{Loading}}: {{Access}}-Driven {{Data Transfer}} from {{Raw Files}} into {{Database Systems}}},
  isbn = {978-1-4503-1597-5},
  url = {http://doi.acm.org/10.1145/2452376.2452377},
  doi = {10.1145/2452376.2452377},
  shorttitle = {Invisible {{Loading}}},
  abstract = {Commercial analytical database systems suffer from a high "time-to-first-analysis": before data can be processed, it must be modeled and schematized (a human effort), transferred into the database's storage layer, and optionally clustered and indexed (a computational effort). For many types of structured data, this upfront effort is unjustifiable, so the data are processed directly over the file system using the Hadoop framework, despite the cumulative performance benefits of processing this data in an analytical database system. In this paper we describe a system that achieves the immediate gratification of running MapReduce jobs directly over a file system, while still making progress towards the long-term performance benefits of database systems. The basic idea is to piggyback on MapReduce jobs, leverage their parsing and tuple extraction operations to incrementally load and organize tuples into a database system, while simultaneously processing the file system data. We call this scheme Invisible Loading, as we load fractions of data at a time at almost no marginal cost in query latency, but still allow future queries to run much faster.},
  booktitle = {Proceedings of the 16th {{International Conference}} on {{Extending Database Technology}}},
  series = {{{EDBT}} '13},
  publisher = {{ACM}},
  urldate = {2017-04-27},
  date = {2013},
  pages = {1--10},
  author = {Abouzied, Azza and Abadi, Daniel J. and Silberschatz, Avi}
}

@inproceedings{alagiannisNoDBEfficientQuery2012,
  location = {{New York, NY, USA}},
  title = {{{NoDB}}: {{Efficient Query Execution}} on {{Raw Data Files}}},
  isbn = {978-1-4503-1247-9},
  url = {http://doi.acm.org/10.1145/2213836.2213864},
  doi = {10.1145/2213836.2213864},
  shorttitle = {{{NoDB}}},
  abstract = {As data collections become larger and larger, data loading evolves to a major bottleneck. Many applications already avoid using database systems, e.g., scientific data analysis and social networks, due to the complexity and the increased data-to-query time. For such applications data collections keep growing fast, even on a daily basis, and we are already in the era of data deluge where we have much more data than what we can move, store, let alone analyze. Our contribution in this paper is the design and roadmap of a new paradigm in database systems, called NoDB, which do not require data loading while still maintaining the whole feature set of a modern database system. In particular, we show how to make raw data files a first-class citizen, fully integrated with the query engine. Through our design and lessons learned by implementing the NoDB philosophy over a modern DBMS, we discuss the fundamental limitations as well as the strong opportunities that such a research path brings. We identify performance bottlenecks specific for in situ processing, namely the repeated parsing and tokenizing overhead and the expensive data type conversion costs. To address these problems, we introduce an adaptive indexing mechanism that maintains positional information to provide efficient access to raw data files, together with a flexible caching structure. Our implementation over PostgreSQL, called PostgresRaw, is able to avoid the loading cost completely, while matching the query performance of plain PostgreSQL and even outperforming it in many cases. We conclude that NoDB systems are feasible to design and implement over modern database architectures, bringing an unprecedented positive effect in usability and performance.},
  booktitle = {Proceedings of the 2012 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '12},
  publisher = {{ACM}},
  urldate = {2017-04-27},
  date = {2012},
  pages = {241--252},
  keywords = {adaptive loading,in situ querying,positional map},
  author = {Alagiannis, Ioannis and Borovica, Renata and Branco, Miguel and Idreos, Stratos and Ailamaki, Anastasia}
}

@inproceedings{chengParallelInsituData2014,
  location = {{New York, NY, USA}},
  title = {Parallel {{In}}-Situ {{Data Processing}} with {{Speculative Loading}}},
  isbn = {978-1-4503-2376-5},
  url = {http://doi.acm.org/10.1145/2588555.2593673},
  doi = {10.1145/2588555.2593673},
  abstract = {Traditional databases incur a significant data-to-query delay due to the requirement to load data inside the system before querying. Since this is not acceptable in many domains generating massive amounts of raw data, e.g., genomics, databases are entirely discarded. External tables, on the other hand, provide instant SQL querying over raw files. Their performance across a query workload is limited though by the speed of repeated full scans, tokenizing, and parsing of the entire file. In this paper, we propose SCANRAW, a novel database physical operator for in-situ processing over raw files that integrates data loading and external tables seamlessly while preserving their advantages: optimal performance across a query workload and zero time-to-query. Our major contribution is a parallel super-scalar pipeline implementation that allows SCANRAW to take advantage of the current many- and multi-core processors by overlapping the execution of independent stages. Moreover, SCANRAW overlaps query processing with loading by speculatively using the additional I/O bandwidth arising during the conversion process for storing data into the database such that subsequent queries execute faster. As a result, SCANRAW makes optimal use of the available system resources -- CPU cycles and I/O bandwidth -- by switching dynamically between tasks to ensure that optimal performance is achieved. We implement SCANRAW in a state-of-the-art database system and evaluate its performance across a variety of synthetic and real-world datasets. Our results show that SCANRAW with speculative loading achieves optimal performance for a query sequence at any point in the processing. Moreover, SCANRAW maximizes resource utilization for the entire workload execution while speculatively loading data and without interfering with normal query processing.},
  booktitle = {Proceedings of the 2014 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '14},
  publisher = {{ACM}},
  urldate = {2017-04-27},
  date = {2014},
  pages = {1287--1298},
  keywords = {data loading,external tables,raw file processing},
  author = {Cheng, Yu and Rusu, Florin},
  file = {/home/amos/Zotero/storage/AZ2H7AYS/Parallel In-Situ Data Processing with Speculative Loading.pdf}
}

@inproceedings{ebensteinFluxQueryExecutionFramework2016,
  location = {{New York, NY, USA}},
  title = {{{FluxQuery}}: {{An Execution Framework}} for {{Highly Interactive Query Workloads}}},
  isbn = {978-1-4503-3531-7},
  url = {http://doi.acm.org/10.1145/2882903.2882945},
  doi = {10.1145/2882903.2882945},
  shorttitle = {{{FluxQuery}}},
  abstract = {Modern computing devices and user interfaces have necessitated highly interactive querying. Some of these interfaces issue a large number of dynamically changing and continuous queries to the backend. In others, users expect to inspect results during the query formulation process, in order to guide or help them towards specifying a full-fledged query. Thus, users end up issuing a fast-changing workload to the underlying database. In such situations, the user's query intent can be thought of as being in flux. In this paper, we show that the traditional query execution engines are not well-suited for this new class of highly interactive workloads. We propose a novel model to interpret the variability of likely queries in a workload. We implemented a cyclic scan-based approach to process queries from such workloads in an efficient and practical manner while reducing the overall system load. We evaluate and compare our methods with traditional systems and demonstrate the scalability of our approach, enabling thousands of queries to run simultaneously within interactive response times given low memory and CPU requirements.},
  booktitle = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '16},
  publisher = {{ACM}},
  urldate = {2017-05-08},
  date = {2016},
  pages = {1333--1345},
  keywords = {cyclic join,cyclic scan,database querying,elevator scan,fast fluxjoin,fluxjoin,fluxquery,gestural querying,interactive databases,join,query intent,query intent model,shared scan,shared server},
  author = {Ebenstein, Roee and Kamat, Niranjan and Nandi, Arnab}
}

@inproceedings{kimERMIAFastMemoryOptimized2016,
  location = {{New York, NY, USA}},
  title = {{{ERMIA}}: {{Fast Memory}}-{{Optimized Database System}} for {{Heterogeneous Workloads}}},
  isbn = {978-1-4503-3531-7},
  url = {http://doi.acm.org/10.1145/2882903.2882905},
  doi = {10.1145/2882903.2882905},
  shorttitle = {{{ERMIA}}},
  abstract = {Large main memories and massively parallel processors have triggered not only a resurgence of high-performance transaction processing systems optimized for large main-memory and massively parallel processors, but also an increasing demand for processing heterogeneous workloads that include read-mostly transactions. Many modern transaction processing systems adopt a lightweight optimistic concurrency control (OCC) scheme to leverage its low overhead in low contention workloads. However, we observe that the lightweight OCC is not suitable for heterogeneous workloads, causing significant starvation of read-mostly transactions and overall performance degradation. In this paper, we present ERMIA, a memory-optimized database system built from scratch to cater the need of handling heterogeneous workloads. ERMIA adopts snapshot isolation concurrency control to coordinate heterogeneous transactions and provides serializability when desired. Its physical layer supports the concurrency control schemes in a scalable way. Experimental results show that ERMIA delivers comparable or superior performance and near-linear scalability in a variety of workloads, compared to a recent lightweight OCC-based system. At the same time, ERMIA maintains high throughput on read-mostly transactions when the performance of the OCC-based system drops by orders of magnitude.},
  booktitle = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '16},
  publisher = {{ACM}},
  urldate = {2017-05-08},
  date = {2016},
  pages = {1675--1687},
  keywords = {append-only storage,epoch-based resource management,heterogeneous workloads,indirection arrays,log manager,main-memory databases,multicore scalability,multiversion concurrency control,serial safety net},
  author = {Kim, Kangnyeon and Wang, Tianzheng and Johnson, Ryan and Pandis, Ippokratis}
}

@inproceedings{lometHighPerformanceTemporal2015,
  title = {High Performance Temporal Indexing on Modern Hardware},
  doi = {10.1109/ICDE.2015.7113368},
  abstract = {Transaction time databases can be put to a number of valuable uses, auditing, regulatory compliance, readable backups, and enabling multi-version concurrency control. While additional storage for retaining multiple versions is unavoidable, compression and the declining cost of disk storage largely removes that impediment to supporting multi-version data. Not clear has been whether effective indexing of historical versions, can be achieved at high performance. The current paper shows how temporal indexing can exploit the latch-free infrastructure provided for the Bw-tree by the LLAMA cache/storage subsystem to support high performance. Further, it demonstrates how the LLAMA mapping table can be exploited to simultaneously enable migration of historical data, e.g. to cloud storage, while overcoming the index node time splitting difficulty that has arisen in the past when historical nodes are migrated.},
  eventtitle = {2015 {{IEEE}} 31st {{International Conference}} on {{Data Engineering}}},
  booktitle = {2015 {{IEEE}} 31st {{International Conference}} on {{Data Engineering}}},
  date = {2015-04},
  pages = {1203-1214},
  keywords = {Indexing,database indexing,Buffer storage,Bw-tree,Cache storage,Cleaning,cloud storage,concurrency control,disk storage,Hardware,historical data migration,historical nodes,index node time splitting difficulty,latch-free,latch-free infrastructure,LLAMA cache-storage subsystem,LLAMA mapping table,log structured,Modern hardware,multi-version indexing,temporal database,temporal databases,temporal indexing,transaction processing,transaction time databases},
  author = {Lomet, D. B. and Nawab, F.},
  file = {/home/amos/Zotero/storage/DAETECCT/Lomet and Nawab - 2015 - High performance temporal indexing on modern hardw.pdf;/home/amos/Zotero/storage/4JUDKR5B/Lomet and Nawab - 2015 - High performance temporal indexing on modern hardw.html}
}

@inproceedings{larsonEvolvingArchitectureSQL2015,
  title = {Evolving the Architecture of {{SQL Server}} for Modern Hardware Trends},
  doi = {10.1109/ICDE.2015.7113371},
  abstract = {The basic architecture of SQL Server, as well as other major database systems, goes back to a time when main memories were (very) small, data lived on disk, machines had a single (slow) processor, and OLTP was the only workload that mattered. This is not an optimal design for today's environment with large main memories, plenty of cores, and where transactional and analytical processing are equally important. To adapt to these trends and take advantage of the opportunities they offer SQL Server has added support for column store indexes and in-memory tables over the last two releases. The two features are aimed at dramatically improving performance on analytical and transactional workloads, respectively. This paper gives an overview of the design of the two features and the performance improvements they provide.},
  eventtitle = {2015 {{IEEE}} 31st {{International Conference}} on {{Data Engineering}}},
  booktitle = {2015 {{IEEE}} 31st {{International Conference}} on {{Data Engineering}}},
  date = {2015-04},
  pages = {1239-1245},
  keywords = {Indexes,Buffer storage,transaction processing,analytical processing,Concurrency control,data mining,database systems,Dictionaries,Engines,inmemory tables,Market research,modern hardware trends,OLTP,optimal design,Servers,SQL,SQL server architecture,transactional processing},
  author = {Larson, P. A. and Hanson, E. N. and Zwilling, M.},
  file = {/home/amos/Zotero/storage/V2TVVVXC/Larson et al. - 2015 - Evolving the architecture of SQL Server for modern.pdf;/home/amos/Zotero/storage/QPB5HEUP/Larson et al. - 2015 - Evolving the architecture of SQL Server for modern.html}
}

@inproceedings{cahillSerializableIsolationSnapshot2008,
  location = {{New York, NY, USA}},
  title = {Serializable {{Isolation}} for {{Snapshot Databases}}},
  isbn = {978-1-60558-102-6},
  url = {http://doi.acm.org/10.1145/1376616.1376690},
  doi = {10.1145/1376616.1376690},
  abstract = {Many popular database management systems offer snapshot isolation rather than full serializability. There are well-known anomalies permitted by snapshot isolation that can lead to violations of data consistency by interleaving transactions that individually maintain consistency. Until now, the only way to prevent these anomalies was to modify the applications by introducing artificial locking or update conflicts, following careful analysis of conflicts between all pairs of transactions. This paper describes a modification to the concurrency control algorithm of a database management system that automatically detects and prevents snapshot isolation anomalies at runtime for arbitrary applications, thus providing serializable isolation. The new algorithm preserves the properties that make snapshot isolation attractive, including that readers do not block writers and vice versa. An implementation and performance study of the algorithm are described, showing that the throughput approaches that of snapshot isolation in most cases.},
  booktitle = {Proceedings of the 2008 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  series = {{{SIGMOD}} '08},
  publisher = {{ACM}},
  urldate = {2017-05-08},
  date = {2008},
  pages = {729--738},
  keywords = {multiversion concurrency control,snapshot isolation,serializability theory},
  author = {Cahill, Michael J. and RÃ¶hm, Uwe and Fekete, Alan D.}
}

@inproceedings{zhangDLStoreDistributedHybrid2016,
  title = {{{DL}}-{{Store}}: {{A Distributed Hybrid OLTP}} and {{OLAP Data Processing Engine}}},
  doi = {10.1109/ICDCS.2016.71},
  shorttitle = {{{DL}}-{{Store}}},
  abstract = {There has been a recent push in the database community towards supporting real-time analytical queries (OLAP) while sustaining a large volume of fine-grained updates (OLTP). Supporting these types of workloads require both an efficient data storage layer as well as a distributed architecture. In this demo, we address the latter point with our Distributed Lineage-based Data Store (DL-Store), which is a distributed data processing engine. DL-Store is built on top of L-Store, which is a lineage-based storage architecture designed to handle mixed OLTP and OLAP workloads, and provides scalability and elasticity by supporting multiple L-Store nodes. To maintain the desired consistency semantics, DL-Store employs a distributed transaction handler component which can horizontally scaled by provisioning additional transaction manager nodes. We leverage partitioning in the record space of the transactions to minimize communication across transaction managers while ensuring consistent execution. The demo shows our implementation of DL-Store over Apache Spark using a variety of use cases.},
  eventtitle = {2016 {{IEEE}} 36th {{International Conference}} on {{Distributed Computing Systems}} ({{ICDCS}})},
  booktitle = {2016 {{IEEE}} 36th {{International Conference}} on {{Distributed Computing Systems}} ({{ICDCS}})},
  date = {2016-06},
  pages = {769-770},
  keywords = {Computer architecture,storage management,transaction processing,data mining,Apache Spark,Computational modeling,Concurrent computing,consistency semantics,database community,Databases,distributed hybrid OLTP-OLAP data processing engine,Distributed Lineage-based Data Store,distributed lineage-based storage architecture,distributed processing,distributed transaction handler component,DL-Store,fine-grained updates,mixed OLTP-OLAP workloads,OLAP-OLTP,real-time analytical queries,Spark,Sparks,Transaction handling},
  author = {Zhang, K. and Sadoghi, M. and Jacobsen, H. A.},
  file = {/home/amos/Zotero/storage/MWG96T9Q/Zhang et al. - 2016 - DL-Store: A Distributed Hybrid OLTP and OLAP Data .pdf;/home/amos/Zotero/storage/JUE3RMNQ/Zhang et al. - 2016 - DL-Store: A Distributed Hybrid OLTP and OLAP Data .html}
}

@article{yuStaringAbyssEvaluation2014,
  title = {Staring into the {{Abyss}}: {{An Evaluation}} of {{Concurrency Control}} with {{One Thousand Cores}}},
  volume = {8},
  issn = {2150-8097},
  url = {http://dx.doi.org/10.14778/2735508.2735511},
  doi = {10.14778/2735508.2735511},
  shorttitle = {Staring into the {{Abyss}}},
  abstract = {Computer architectures are moving towards an era dominated by many-core machines with dozens or even hundreds of cores on a single chip. This unprecedented level of on-chip parallelism introduces a new dimension to scalability that current database management systems (DBMSs) were not designed for. In particular, as the number of cores increases, the problem of concurrency control becomes extremely challenging. With hundreds of threads running in parallel, the complexity of coordinating competing accesses to data will likely diminish the gains from increased core counts. To better understand just how unprepared current DBMSs are for future CPU architectures, we performed an evaluation of concurrency control for on-line transaction processing (OLTP) workloads on many-core chips. We implemented seven concurrency control algorithms on a main-memory DBMS and using computer simulations scaled our system to 1024 cores. Our analysis shows that all algorithms fail to scale to this magnitude but for different reasons. In each case, we identify fundamental bottlenecks that are independent of the particular database implementation and argue that even state-of-the-art DBMSs suffer from these limitations. We conclude that rather than pursuing incremental solutions, many-core chips may require a completely redesigned DBMS architecture that is built from ground up and is tightly coupled with the hardware.},
  number = {3},
  journaltitle = {Proc. VLDB Endow.},
  urldate = {2017-05-08},
  date = {2014-11},
  pages = {209--220},
  author = {Yu, Xiangyao and Bezerra, George and Pavlo, Andrew and Devadas, Srinivas and Stonebraker, Michael}
}

@online{DatabaseTheoryWhat,
  title = {Database Theory - {{What}} Is the Difference between {{Strict 2Phase Locking}} and {{2Phase Locking}}? - {{Computer Science Stack Exchange}}},
  url = {https://cs.stackexchange.com/questions/37655/what-is-the-difference-between-strict-2phase-locking-and-2phase-locking},
  shorttitle = {Database Theory - {{What}} Is the Difference between {{Strict 2Phase Locking}} and {{2Phase Locking}}?},
  urldate = {2017-05-10},
  file = {/home/amos/Zotero/storage/SC4634NS/database theory - What is the difference between S.html}
}

@inproceedings{tuSpeedyTransactionsMulticore2013,
  location = {{New York, NY, USA}},
  title = {Speedy {{Transactions}} in {{Multicore In}}-Memory {{Databases}}},
  isbn = {978-1-4503-2388-8},
  url = {http://doi.acm.org/10.1145/2517349.2522713},
  doi = {10.1145/2517349.2522713},
  abstract = {Silo is a new in-memory database that achieves excellent performance and scalability on modern multicore machines. Silo was designed from the ground up to use system memory and caches efficiently. For instance, it avoids all centralized contention points, including that of centralized transaction ID assignment. Silo's key contribution is a commit protocol based on optimistic concurrency control that provides serializability while avoiding all shared-memory writes for records that were only read. Though this might seem to complicate the enforcement of a serial order, correct logging and recovery is provided by linking periodically-updated epochs with the commit protocol. Silo provides the same guarantees as any serializable database without unnecessary scalability bottlenecks or much additional latency. Silo achieves almost 700,000 transactions per second on a standard TPC-C workload mix on a 32-core machine, as well as near-linear scalability. Considered per core, this is several times higher than previously reported results.},
  booktitle = {Proceedings of the {{Twenty}}-{{Fourth ACM Symposium}} on {{Operating Systems Principles}}},
  series = {{{SOSP}} '13},
  publisher = {{ACM}},
  urldate = {2017-05-10},
  date = {2013},
  pages = {18--32},
  author = {Tu, Stephen and Zheng, Wenting and Kohler, Eddie and Liskov, Barbara and Madden, Samuel}
}

@article{raeOnlineAsynchronousSchema2013,
  title = {Online, Asynchronous Schema Change in {{F1}}},
  volume = {6},
  number = {11},
  journaltitle = {Proceedings of the VLDB Endowment},
  date = {2013},
  pages = {1045--1056},
  author = {Rae, Ian and Rollins, Eric and Shute, Jeff and Sodhi, Sukhdeep and Vingralek, Radek},
  file = {/home/amos/Zotero/storage/XDNW8267/p1045-rae.pdf}
}

@inproceedings{guptaLoadSharingDistributed1999,
  title = {Load Sharing in Distributed Systems},
  booktitle = {Proceedings of the {{National Workshop}} on {{Distributed Computing}}},
  date = {1999},
  author = {Gupta, Deepak and Bepari, Pradip},
  file = {/home/amos/Zotero/storage/4QB83AA2/load_sharing_in_distributed_systems.pdf}
}

@inproceedings{poosalaEstimationQueryresultDistribution1996,
  title = {Estimation of Query-Result Distribution and Its Application in Parallel-Join Load Balancing},
  booktitle = {{{VLDB}}},
  date = {1996},
  pages = {448--459},
  author = {Poosala, Viswanath and Ioannidis, Yannis E.},
  file = {/home/amos/Zotero/storage/UG554X5T/download.pdf}
}

@article{stonebrakerVoltDBMainMemory2013,
  title = {The {{VoltDB Main Memory DBMS}}.},
  volume = {36},
  number = {2},
  journaltitle = {IEEE Data Eng. Bull.},
  date = {2013},
  pages = {21--27},
  author = {Stonebraker, Michael and Weisberg, Ariel},
  file = {/home/amos/Zotero/storage/RFWM8PVH/voltdb1.pdf}
}

@unpublished{IntroductionApacheTajo,
  title = {Introduction to {{Apache Tajo}}: {{Future}} of {{Data Warehouse}}.Pdf},
  url = {http://s3.amazonaws.com/ppt-download/introductiontoapachetajo-futureofdatawarehouse-160115065059.pdf?response-content-disposition=attachment&Signature=CV2zN17oyjTnOD0QW4ODRLlQCPE%3D&Expires=1471677801&AWSAccessKeyId=AKIAJ6D6SEMXSASXHDAQ},
  urldate = {2016-08-20},
  file = {/home/amos/Zotero/storage/ZIP52BAW/Introduction to Apache Tajo Future of Data Warehouse.pdf}
}

@unpublished{SQLEverythingMemory,
  title = {{{SQL}} on Everything, in Memory.Pdf},
  url = {https://s3.amazonaws.com/ppt-download/calcite-strata-ny-2014-141020165641-conversion-gate01.pdf?response-content-disposition=attachment&Signature=eZn5ylEW7lTE5X5jTCIi1LP8Ns4%3D&Expires=1484719008&AWSAccessKeyId=AKIAJ6D6SEMXSASXHDAQ},
  urldate = {2017-01-18},
  file = {/home/amos/Zotero/storage/5QK3GWBB/SQL on everything, in memory.pdf}
}

@book{AssemblersLoadersPdf,
  title = {Assemblers and {{Loaders}}.Pdf},
  url = {http://www.davidsalomon.name/assem.advertis/asl.pdf},
  urldate = {2016-07-13},
  file = {/home/amos/Zotero/storage/HX9P84F7/Assemblers and Loaders.pdf}
}

@book{LinkersLoadersPdf,
  title = {Linkers and {{Loaders}}.Pdf},
  url = {http://www.becbapatla.ac.in/cse/naveenv/docs/LL1.pdf},
  urldate = {2016-07-13},
  file = {/home/amos/Zotero/storage/GIBWPRZE/Linkers and Loaders.pdf}
}

@book{LinuxSystemPerformance,
  title = {Linux {{System}} and {{Performance Monitoring}}.Pdf},
  url = {https://eq76kg.bl3302.livefilestore.com/y3m7rpQLS9yD98exex-yDnHEHWh8y1tksFUQubfQsB2nrgi60TuiBJVpmXuAW0dvrmBJZY639-Uj7LiI1fugGf6E0_9z5-a7NZIz5iLwRDdZ1ImKthM2LyX0f_SSgH0n3KOl-DHLLIGm2zi0LZsOmHzYg/Linux%20System%20and%20Performance%20Monitoring.pdf?download&psid=1},
  urldate = {2016-08-10},
  file = {/home/amos/Zotero/storage/HHRNFN5B/Linux System and Performance Monitoring.pdf}
}

@book{ReadingsDatabaseSystems,
  title = {Readings in {{Database Systems}}.Pdf},
  url = {http://www.redbook.io/pdf/redbook-5th-edition.pdf},
  urldate = {2016-08-10},
  file = {/home/amos/Zotero/storage/D6ZEVUA6/Readings in Database Systems.pdf}
}

@article{HowNeo4jCo,
  entrysubtype = {newspaper},
  title = {How {{Neo4j Co}}âExists {{With Oracle RDBMS}}.Pdf},
  url = {https://info.neo4j.com/rs/773-GON-065/images/Neo4j-Co-exists-with-Oracle-RDBMS-WP.pdf?_ga=1.133221518.1647250192.1484059543},
  urldate = {2017-01-10},
  file = {/home/amos/Zotero/storage/X2GE6GXB/How Neo4j Coâexists With Oracle RDBMS.pdf}
}

@article{LeftleaningRedBlackTrees,
  entrysubtype = {magazine},
  title = {Left-Leaning {{Red}}-{{Black Trees}}.Pdf},
  url = {https://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf},
  urldate = {2017-01-06},
  file = {/home/amos/Zotero/storage/798KJPKV/Left-leaning Red-Black Trees.pdf}
}

@article{UnnestingArbitraryQueries,
  entrysubtype = {magazine},
  title = {Unnesting {{Arbitrary Queries}}.Pdf},
  url = {http://www.btw-2015.de/res/proceedings/Hauptband/Wiss/Neumann-Unnesting_Arbitrary_Querie.pdf},
  urldate = {2016-12-21},
  file = {/home/amos/Zotero/storage/383EF5EV/Unnesting Arbitrary Queries.pdf}
}

@article{VoltDBTechnicalOverview,
  entrysubtype = {magazine},
  title = {{{VoltDB}} Technical Overview.Pdf},
  url = {https://cdn2.hubspot.net/hubfs/2180197/content/white_papers/hv_white_papers/hv-white-paper-voltdb-technical-overview.pdf?t=1483556409405},
  urldate = {2017-01-09},
  file = {/home/amos/Zotero/storage/VMHR9PRK/VoltDB technical overview.pdf}
}

@inproceedings{dewittCaseFracturedMirrors2002,
  title = {A {{Case}} for {{Fractured Mirrors}}},
  booktitle = {Proceedings 2002 {{VLDB Conference}}: 28th {{International Conference}} on {{Very Large Databases}} ({{VLDB}})},
  publisher = {{Morgan Kaufmann}},
  date = {2002},
  pages = {430},
  author = {DeWitt, Ravishankar Ramamurthy David J. and Su, Qi},
  file = {/home/amos/Zotero/storage/NRSECQ5J/A Case for Fractured Mirrors.pdf}
}

@article{jindalComparisonKnivesBread2013,
  title = {A Comparison of Knives for Bread Slicing},
  volume = {6},
  number = {6},
  journaltitle = {Proceedings of the VLDB Endowment},
  date = {2013},
  pages = {361--372},
  author = {Jindal, Alekh and Palatinus, Endre and Pavlov, Vladimir and Dittrich, Jens},
  file = {/home/amos/Zotero/storage/Y3I7JZER/A Comparison of Knives for Bread Slicing.pdf}
}

@inproceedings{kesterAccessPathSelection2017,
  langid = {english},
  title = {Access {{Path Selection}} in {{Main}}-{{Memory Optimized Data Systems}}: {{Should I Scan}} or {{Should I Probe}}?},
  isbn = {978-1-4503-4197-4},
  url = {http://dl.acm.org/citation.cfm?doid=3035918.3064049},
  doi = {10.1145/3035918.3064049},
  shorttitle = {Access {{Path Selection}} in {{Main}}-{{Memory Optimized Data Systems}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2017},
  pages = {715-730},
  author = {Kester, Michael S. and Athanassoulis, Manos and Idreos, Stratos},
  file = {/home/amos/Zotero/storage/GBB7EB63/Access Path Selection in Main-Memory Optimized Data Systems - Should I Scan or Should I Probe.pdf}
}

@inproceedings{alvarezComparisonAdaptiveRadix2015,
  title = {A Comparison of Adaptive Radix Trees and Hash Tables},
  booktitle = {Data {{Engineering}} ({{ICDE}}), 2015 {{IEEE}} 31st {{International Conference}} On},
  publisher = {{IEEE}},
  date = {2015},
  pages = {1227--1238},
  author = {Alvarez, Victor and Richter, Stefan and Chen, Xiao and Dittrich, Jens},
  file = {/home/amos/Zotero/storage/YCIQ5S2F/A Comparison of Adaptive Radix Trees and Hash Tables.pdf}
}

@thesis{shapiroComprehensiveStudyConvergent2011,
  title = {A Comprehensive Study of Convergent and Commutative Replicated Data Types},
  institution = {{InriaâCentre Paris-Rocquencourt; INRIA}},
  date = {2011},
  author = {Shapiro, Marc and PreguiÃ§a, Nuno and Baquero, Carlos and Zawirski, Marek},
  file = {/home/amos/Zotero/storage/ZBGL3IVU/A Comprehensive Study of Convergent and Commutative Replicated Data Types.pdf}
}

@article{berensonCritiqueANSISQL2007,
  title = {A Critique of {{ANSI SQL}} Isolation Levels},
  journaltitle = {arXiv preprint cs/0701157},
  date = {2007},
  author = {Berenson, Hal and Bernstein, Phil and Gray, Jim and Melton, Jim and O'Neil, Elizabeth and O'Neil, Patrick},
  file = {/home/amos/Zotero/storage/CTN925CZ/A Critique of ANSI SQL Isolation Levels.pdf}
}

@book{amer-yahiaAdvancesDatabaseTechnology2014,
  langid = {english},
  location = {{Konstanz}},
  title = {Advances in Database Technology - {{EDBT}} 2014 17th {{International Conference}} on {{Extending Database Technology}}, {{Athens}}, {{Greece}}, {{March}} 24-28, 2014 ; Proceedings},
  isbn = {978-3-89318-065-3},
  url = {http://openproceedings.org/edbticdt2014/EDBT_toc.html},
  publisher = {{Univ. of Konstanz, Univ. Library}},
  urldate = {2017-11-07},
  date = {2014},
  author = {Amer-Yahia, Sihem and {EDBT} and {International Conference on Extending Database Technology} and {EDBT}},
  file = {/home/amos/Zotero/storage/66YFB7CD/Adapting Tree Structures for Processing with SIMD Instructions.pdf},
  note = {OCLC: 935769706}
}

@article{karpathiotakisAdaptiveQueryProcessing2014,
  title = {Adaptive Query Processing on {{RAW}} Data},
  volume = {7},
  number = {12},
  journaltitle = {Proceedings of the VLDB Endowment},
  date = {2014},
  pages = {1119--1130},
  author = {Karpathiotakis, Manos and Branco, Miguel and Alagiannis, Ioannis and Ailamaki, Anastasia},
  file = {/home/amos/Zotero/storage/TRF7YKRM/Adaptive Query Processing on RAW Data.pdf}
}

@inproceedings{zhouAdvancedPartitioningTechniques2012,
  title = {Advanced Partitioning Techniques for Massively Distributed Computation},
  booktitle = {Proceedings of the 2012 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  date = {2012},
  pages = {13--24},
  author = {Zhou, Jingren and Bruno, Nicolas and Lin, Wei},
  file = {/home/amos/Zotero/storage/T6VEMCQF/Advanced Partitioning Techniques for Massively Distributed Computation.pdf}
}

@book{rossFirstCourseProbability2010,
  location = {{Upper Saddle River, N.J}},
  title = {A First Course in Probability},
  edition = {8th ed},
  isbn = {978-0-13-603313-4},
  pagetotal = {530},
  publisher = {{Pearson Prentice Hall}},
  date = {2010},
  keywords = {Probabilities},
  author = {Ross, Sheldon M.},
  file = {/home/amos/Zotero/storage/YDA5MCMK/A First Course in Probability 8th Edition.pdf},
  note = {OCLC: ocn237199460}
}

@book{vitterAlgorithmsDataStructures2008,
  langid = {english},
  location = {{Boston}},
  title = {Algorithms and Data Structures for External Memory},
  isbn = {978-1-60198-106-6},
  pagetotal = {174},
  number = {2,4},
  series = {Foundations and Trends in Theoretical Computer Science},
  publisher = {{Now Publ}},
  date = {2008},
  author = {Vitter, Jeffrey Scott},
  file = {/home/amos/Zotero/storage/G6WYWYDG/Algorithms and Data Structures for External Memory.pdf},
  note = {OCLC: 602246095}
}

@collection{candanDatabaseSystemsAdvanced2017,
  location = {{Cham}},
  title = {Database {{Systems}} for {{Advanced Applications}}},
  volume = {10177},
  isbn = {978-3-319-55752-6 978-3-319-55753-3},
  url = {http://link.springer.com/10.1007/978-3-319-55753-3},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  publisher = {{Springer International Publishing}},
  urldate = {2017-11-07},
  date = {2017},
  editor = {Candan, SelÃ§uk and Chen, Lei and Pedersen, Torben Bach and Chang, Lijun and Hua, Wen},
  file = {/home/amos/Zotero/storage/NSWVIPET/An Adaptive Data Partitioning Scheme for Accelerating Exploratory Spark SQL Queries.pdf},
  doi = {10.1007/978-3-319-55753-3}
}

@inproceedings{braunAnalyticsMotionHigh2015,
  langid = {english},
  title = {Analytics in {{Motion}}: {{High Performance Event}}-{{Processing AND Real}}-{{Time Analytics}} in the {{Same Database}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2742783},
  doi = {10.1145/2723372.2742783},
  shorttitle = {Analytics in {{Motion}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2015},
  pages = {251-264},
  author = {Braun, Lucas and Liang, Ning and Etter, Thomas and Gasparis, Georgios and Kaufmann, Martin and Kossmann, Donald and Widmer, Daniel and Avitzur, Aharon and Iliopoulos, Anthony and Levy, Eliezer},
  file = {/home/amos/Zotero/storage/7Z2GBLV9/Analytics in Motion.pdf}
}

@book{edbtAdvancesDatabaseTechnology2017,
  langid = {english},
  location = {{Konstanz}},
  title = {Advances in Database Technology - {{EDBT}} 2017 20th {{International Conference}} on {{Extending Database Technology}}, {{Venice}}, {{Italy}}, {{March}} 21-24, 2017: Proceedings},
  isbn = {978-3-89318-073-8},
  url = {https://openproceedings.org/html/pages/2017_edbt.html},
  shorttitle = {Advances in Database Technology - {{EDBT}} 2017 20th {{International Conference}} on {{Extending Database Technology}}, {{Venice}}, {{Italy}}, {{March}} 21-24, 2017},
  publisher = {{University of Konstanz, University Library}},
  urldate = {2017-11-07},
  date = {2017},
  author = {{EDBT} and Markl, Volker and Orlando, Salvatore and Mitschang, Bernhard and Andritsos, Periklis and Sattler, Kai-Uwe and BreÃ, Sebastian and {EDBT} and {International Conference on Extending Database Technology}},
  file = {/home/amos/Zotero/storage/E2CA668Y/Analytics on Fast Data - Main-Memory Database Systems versus Modern Streaming Systems.pdf},
  note = {OCLC: 986240053}
}

@inproceedings{brunoOnlineApproachPhysical2007,
  title = {An Online Approach to Physical Design Tuning},
  booktitle = {Data {{Engineering}}, 2007. {{ICDE}} 2007. {{IEEE}} 23rd {{International Conference}} On},
  publisher = {{IEEE}},
  date = {2007},
  pages = {826--835},
  author = {Bruno, Nicolas and Chaudhuri, Surajit},
  file = {/home/amos/Zotero/storage/YZUU52HE/An Online Approach to Physical Design Tuning.pdf}
}

@article{chaudhuriOverviewDataWarehousing1997,
  title = {An Overview of Data Warehousing and {{OLAP}} Technology},
  volume = {26},
  number = {1},
  journaltitle = {ACM Sigmod record},
  date = {1997},
  pages = {65--74},
  author = {Chaudhuri, Surajit and Dayal, Umeshwar},
  file = {/home/amos/Zotero/storage/A5QBQ56F/An Overview of Data Warehousing and OLAP Technology.pdf}
}

@article{sunPartitioningFrameworkAggressive2014,
  title = {A Partitioning Framework for Aggressive Data Skipping},
  volume = {7},
  number = {13},
  journaltitle = {Proceedings of the VLDB Endowment},
  date = {2014},
  pages = {1617--1620},
  author = {Sun, Liwen and Krishnan, Sanjay and Xin, Reynold S. and Franklin, Michael J.},
  file = {/home/amos/Zotero/storage/RC2AXFME/A Partitioning Framework for Aggressive Data Skipping.pdf}
}

@article{szabo-wexlerApproximateMembershipSets,
  title = {Approximate {{Membership}} of {{Sets}}: {{A Survey}}},
  shorttitle = {Approximate {{Membership}} of {{Sets}}},
  author = {Szabo-Wexler, Elias},
  file = {/home/amos/Zotero/storage/BY9MQFT5/Approximate Membership of Sets - A Survey.pdf}
}

@inproceedings{wangAPUSFastScalable2017,
  title = {{{APUS}}: {{Fast}} and Scalable {{Paxos}} on {{RDMA}}},
  shorttitle = {{{APUS}}},
  booktitle = {Proceedings of the {{Eighth ACM Symposium}} on {{Cloud Computing}} ({{Santa Clara}}, {{CA}}, {{USA}}},
  date = {2017},
  author = {Wang, Cheng and Jiang, Jianyu and Chen, Xusheng and Yi, Ning and Cui, Heming},
  file = {/home/amos/Zotero/storage/TI9ELECW/APUS - Fast and Scalable PAXOS on RDMA.pdf}
}

@article{alsubaieeAsterixDBScalableOpen2014,
  title = {{{AsterixDB}}: {{A}} Scalable, Open Source {{BDMS}}},
  volume = {7},
  shorttitle = {{{AsterixDB}}},
  number = {14},
  journaltitle = {Proceedings of the VLDB Endowment},
  date = {2014},
  pages = {1905--1916},
  author = {Alsubaiee, Sattam and Altowim, Yasser and Altwaijry, Hotham and Behm, Alexander and Borkar, Vinayak and Bu, Yingyi and Carey, Michael and Cetindil, Inci and Cheelangi, Madhusudan and Faraaz, Khurram},
  file = {/home/amos/Zotero/storage/XMPYGWD8/AsterixDB - A Scalable, Open Source BDMS.pdf}
}

@article{graefeSurveyBtreeLocking2010,
  langid = {english},
  title = {A Survey of {{B}}-Tree Locking Techniques},
  volume = {35},
  issn = {03625915},
  url = {http://portal.acm.org/citation.cfm?doid=1806907.1806908},
  doi = {10.1145/1806907.1806908},
  number = {3},
  journaltitle = {ACM Transactions on Database Systems},
  urldate = {2017-11-07},
  date = {2010-07-01},
  pages = {1-26},
  author = {Graefe, Goetz},
  file = {/home/amos/Zotero/storage/5IDSNNUQ/A Survey of B-Tree Locking Techniques.pdf}
}

@article{mittalSurveyCPUGPUHeterogeneous2015,
  langid = {english},
  title = {A {{Survey}} of {{CPU}}-{{GPU Heterogeneous Computing Techniques}}},
  volume = {47},
  issn = {03600300},
  url = {http://dl.acm.org/citation.cfm?doid=2775083.2788396},
  doi = {10.1145/2788396},
  number = {4},
  journaltitle = {ACM Computing Surveys},
  urldate = {2017-11-07},
  date = {2015-07-21},
  pages = {1-35},
  author = {Mittal, Sparsh and Vetter, Jeffrey S.},
  file = {/home/amos/Zotero/storage/H2KDQKP3/A Survey of CPU-GPU Heterogeneous Computing Techniques.pdf}
}

@article{simmhanSurveyDataProvenance2005,
  title = {A Survey of Data Provenance Techniques},
  volume = {47405},
  journaltitle = {Computer Science Department, Indiana University, Bloomington IN},
  date = {2005},
  author = {Simmhan, Yogesh L. and Plale, Beth and Gannon, Dennis},
  file = {/home/amos/Zotero/storage/SM2VZTB8/A Survey of Data Provenance Techniques.pdf}
}

@article{christenSurveyIndexingTechniques2012,
  title = {A {{Survey}} of {{Indexing Techniques}} for {{Scalable Record Linkage}} and {{Deduplication}}},
  volume = {24},
  issn = {1041-4347},
  url = {http://ieeexplore.ieee.org/document/5887335/},
  doi = {10.1109/TKDE.2011.127},
  number = {9},
  journaltitle = {IEEE Transactions on Knowledge and Data Engineering},
  urldate = {2017-11-07},
  date = {2012-09},
  pages = {1537-1555},
  author = {Christen, Peter},
  file = {/home/amos/Zotero/storage/NKRN3Z2R/A Survey of Indexing Techniques for Scalable Record Linkage and Deduplication.pdf}
}

@book{poelstraTreatiseAltcoins2014,
  title = {â{{A}} Treatise on Altcoins},
  date = {2014},
  author = {Poelstra, Andrew},
  file = {/home/amos/Zotero/storage/NIQZFRWS/A Treatise on Altcoins.pdf}
}

@inproceedings{nehmeAutomatedPartitioningDesign2011,
  title = {Automated Partitioning Design in Parallel Database Systems},
  booktitle = {Proceedings of the 2011 {{ACM SIGMOD International Conference}} on {{Management}} of Data},
  publisher = {{ACM}},
  date = {2011},
  pages = {1137--1148},
  author = {Nehme, Rimma and Bruno, Nicolas},
  file = {/home/amos/Zotero/storage/I6GRGDEW/Automated Partitioning Design in Parallel Database Systems.pdf}
}

@inproceedings{agrawalAutomatedSelectionMaterialized2000,
  title = {Automated Selection of Materialized Views and Indexes in {{SQL}} Databases},
  volume = {2000},
  booktitle = {{{VLDB}}},
  date = {2000},
  pages = {496--505},
  author = {Agrawal, Sanjay and Chaudhuri, Surajit and Narasayya, Vivek R.},
  file = {/home/amos/Zotero/storage/9F7MJJ5D/Automated Selection of Materialized Views and Indexes for SQL Databases.pdf}
}

@inproceedings{makreshanskiBatchDBEfficientIsolated2017,
  langid = {english},
  title = {{{BatchDB}}: {{Efficient Isolated Execution}} of {{Hybrid OLTP}}+{{OLAP Workloads}} for {{Interactive Applications}}},
  isbn = {978-1-4503-4197-4},
  url = {http://dl.acm.org/citation.cfm?doid=3035918.3035959},
  doi = {10.1145/3035918.3035959},
  shorttitle = {{{BatchDB}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2017},
  pages = {37-50},
  author = {Makreshanski, Darko and Giceva, Jana and Barthels, Claude and Alonso, Gustavo},
  file = {/home/amos/Zotero/storage/2CTAZQHN/BatchDB - Efficient Isolated Execution of Hybrid OLTP+OLAP Workloads for Interactive Applications.pdf}
}

@article{idreosBigDataExploration2013,
  title = {Big {{Data Exploration}}},
  journaltitle = {Big Data Computing},
  date = {2013},
  author = {Idreos, Stratos},
  file = {/home/amos/Zotero/storage/K4SXHWWV/Big Data Exploration.pdf}
}

@article{nakamotoBitcoinPeertoPeerElectronic,
  title = {Bitcoin: {{A Peer}}-to-{{Peer Electronic Cash System Bitcoin}}: {{A Peer}}-to-{{Peer Electronic Cash System}}},
  shorttitle = {Bitcoin},
  author = {Nakamoto, Satoshi},
  file = {/home/amos/Zotero/storage/T5MB9BQZ/Bitcoin - A Peer-to-Peer Electronic Cash System.pdf}
}

@inproceedings{chanBitmapIndexDesign1998,
  title = {Bitmap Index Design and Evaluation},
  volume = {27},
  booktitle = {{{ACM SIGMOD Record}}},
  publisher = {{ACM}},
  date = {1998},
  pages = {355--366},
  author = {Chan, Chee-Yong and Ioannidis, Yannis E.},
  file = {/home/amos/Zotero/storage/5HDK2K88/Bitmap Index Design and Evaluation.pdf}
}

@inproceedings{searsBLSMGeneralPurpose2012,
  title = {{{bLSM}}: A General Purpose Log Structured Merge Tree},
  shorttitle = {{{bLSM}}},
  booktitle = {Proceedings of the 2012 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  date = {2012},
  pages = {217--228},
  author = {Sears, Russell and Ramakrishnan, Raghu},
  file = {/home/amos/Zotero/storage/SPNP62Y5/bLSM - A General Purpose Log Structured Merge Tree.pdf}
}

@inproceedings{borneaBuildingEfficientRDF2013,
  title = {Building an Efficient {{RDF}} Store over a Relational Database},
  booktitle = {Proceedings of the 2013 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  date = {2013},
  pages = {121--132},
  author = {Bornea, Mihaela A. and Dolby, Julian and Kementsietsidis, Anastasios and Srinivas, Kavitha and Dantressangle, Patrick and Udrea, Octavian and Bhattacharjee, Bishwaranjan},
  file = {/home/amos/Zotero/storage/ENIERDJU/Building an efficient RDF store over a relational database.pdf}
}

@inproceedings{thomsonCalvinFastDistributed2012,
  title = {Calvin: Fast Distributed Transactions for Partitioned Database Systems},
  shorttitle = {Calvin},
  booktitle = {Proceedings of the 2012 {{ACM SIGMOD International Conference}} on {{Management}} of {{Data}}},
  publisher = {{ACM}},
  date = {2012},
  pages = {1--12},
  author = {Thomson, Alexander and Diamond, Thaddeus and Weng, Shu-Chun and Ren, Kun and Shao, Philip and Abadi, Daniel J.},
  file = {/home/amos/Zotero/storage/ZHJX59WK/Calvin - Fast Distributed Transactions for Partitioned Database Systems.pdf}
}

@book{davisCatalanNumbers2006,
  title = {Catalan Numbers},
  publisher = {{Berkeley Math Circle Handouts, http://mathcircle. berkeley. edu/BMC6/pdf0607/catalan. pdf}},
  date = {2006},
  author = {Davis, Tom},
  file = {/home/amos/Zotero/storage/MVA8MJG6/Catalan Numbers.pdf}
}

@book{bernsteinRRENCYCONTROLRECOVERY1987,
  title = {{{RRENCY CONTROL AND RECOVERY IN DATABASE SYSTEMS}}},
  publisher = {{Addison- Wesley}},
  date = {1987},
  author = {Bernstein, Philip A. and Hadzilacos, Vassos and Goodman, Nathan},
  file = {/home/amos/Zotero/storage/T3JG876E/Concurrency Control and Recovery in Database Systems.pdf}
}

@inproceedings{shapiroConflictfreeReplicatedData2011,
  title = {Conflict-Free Replicated Data Types},
  booktitle = {Symposium on {{Self}}-{{Stabilizing Systems}}},
  publisher = {{Springer}},
  date = {2011},
  pages = {386--400},
  author = {Shapiro, Marc and PreguiÃ§a, Nuno and Baquero, Carlos and Zawirski, Marek},
  file = {/home/amos/Zotero/storage/VZQRC3BB/Conflict-free Replicated Data Types.pdf}
}

@article{grayConsensusTransactionCommit2006,
  title = {Consensus on Transaction Commit},
  volume = {31},
  number = {1},
  journaltitle = {ACM Transactions on Database Systems (TODS)},
  date = {2006},
  pages = {133--160},
  author = {Gray, Jim and Lamport, Leslie},
  file = {/home/amos/Zotero/storage/RM2KEHZ6/Consensus on Transaction Commit.pdf}
}

@inproceedings{franklinContinuousAnalyticsRethinking2009,
  title = {Continuous {{Analytics}}: {{Rethinking Query Processing}} in a {{Network}}-{{Effect World}}.},
  shorttitle = {Continuous {{Analytics}}},
  booktitle = {{{CIDR}}},
  date = {2009},
  author = {Franklin, Michael J. and Krishnamurthy, Sailesh and Conway, Neil and Li, Alan and Russakovsky, Alex and Thombre, Neil},
  file = {/home/amos/Zotero/storage/IFKVVXU3/Continuous Analytics - Rethinking Query Processing in a Network-Effect World.pdf}
}

@incollection{cormodeCountminSketch2009,
  title = {Count-Min Sketch},
  booktitle = {Encyclopedia of {{Database Systems}}},
  publisher = {{Springer}},
  date = {2009},
  pages = {511--516},
  author = {Cormode, Graham},
  file = {/home/amos/Zotero/storage/ISACWN4R/Count-Min Sketch.pdf}
}

@book{kruszynskiInteractiveMeasurementsThreedimensional2010,
  langid = {english},
  location = {{Eindhoven}},
  title = {Interactive Measurements of Three-Dimensional Branching Objects},
  isbn = {978-90-6196-556-5},
  publisher = {{Eindhoven University of Technology}},
  date = {2010},
  author = {KruszyÅski, Krzysztof Jakub},
  file = {/home/amos/Zotero/storage/8PS9TBY9/Database Cracking - Towards Auto-tuning Database Kernels.pdf},
  note = {OCLC: 897792572}
}

@inproceedings{hankinsDataMorphingAdaptive2003,
  title = {Data Morphing: An Adaptive, Cache-Conscious Storage Technique},
  shorttitle = {Data Morphing},
  booktitle = {Proceedings of the 29th International Conference on {{Very}} Large Data Bases-{{Volume}} 29},
  publisher = {{VLDB Endowment}},
  date = {2003},
  pages = {417--428},
  author = {Hankins, Richard A. and Patel, Jignesh M.},
  file = {/home/amos/Zotero/storage/G9F786PT/Data Morphing - An Adaptive, Cache-Conscious Storage Technique.pdf}
}

@book{edbtAdvancesDatabaseTechnology2016,
  langid = {english},
  location = {{Konstanz}},
  title = {Advances in Database Technology - {{EDBT}} 2016 19th {{International Conference}} on {{Extending Database Technology}}, {{Bordeaux}}, {{France}}, {{March}} 15-18, 2016: Proceedings},
  isbn = {978-3-89318-070-7},
  url = {https://dx.doi.org/10.5441/002/edbt.2016.01},
  shorttitle = {Advances in Database Technology - {{EDBT}} 2016 19th {{International Conference}} on {{Extending Database Technology}}, {{Bordeaux}}, {{France}}, {{March}} 15-18, 2016},
  publisher = {{University of Konstanz, University Library}},
  urldate = {2017-11-07},
  date = {2016},
  author = {{EDBT} and Pitoura, Evaggelia and Maabout, Sofian and Koutrika, Georgia and Marian, Amelie and Tanca, Letizia and Manolescu, Ioana and Stefanidis, Kostas and {International Conference on Extending Database Technology} and {EDBT}},
  file = {/home/amos/Zotero/storage/32IM2X27/Designing Access Methods - The RUM Conjecture.pdf},
  note = {OCLC: 957156764}
}

@inproceedings{athanassoulisDesignTradeoffsData2016,
  langid = {english},
  title = {Design {{Tradeoffs}} of {{Data Access Methods}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2912569},
  doi = {10.1145/2882903.2912569},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2016},
  pages = {2195-2200},
  author = {Athanassoulis, Manos and Idreos, Stratos},
  file = {/home/amos/Zotero/storage/T2E37QUA/Design Tradeoffs of Data Access Methods.pdf}
}

@article{binnigDistributedSnapshotIsolation2014,
  langid = {english},
  title = {Distributed Snapshot Isolation: Global Transactions Pay Globally, Local Transactions Pay Locally},
  volume = {23},
  issn = {1066-8888, 0949-877X},
  url = {http://link.springer.com/10.1007/s00778-014-0359-9},
  doi = {10.1007/s00778-014-0359-9},
  shorttitle = {Distributed Snapshot Isolation},
  number = {6},
  journaltitle = {The VLDB Journal},
  urldate = {2017-11-07},
  date = {2014-12},
  pages = {987-1011},
  author = {Binnig, Carsten and Hildenbrand, Stefan and FÃ¤rber, Franz and Kossmann, Donald and Lee, Juchang and May, Norman},
  file = {/home/amos/Zotero/storage/HYZ66FGD/Distributed snapshot isolation - global transactions pay globally, local transactions pay locally.pdf}
}

@inproceedings{yangDruidRealtimeAnalytical2014,
  langid = {english},
  title = {Druid: A Real-Time Analytical Data Store},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2595631},
  doi = {10.1145/2588555.2595631},
  shorttitle = {Druid},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2014},
  pages = {157-168},
  author = {Yang, Fangjin and Tschetter, Eric and LÃ©autÃ©, Xavier and Ray, Nelson and Merlino, Gian and Ganguli, Deep},
  file = {/home/amos/Zotero/storage/THP94LQT/Druid, A Real-time Analytical Data Store.pdf}
}

@inproceedings{wangExploitingCommonPatterns2017,
  langid = {english},
  title = {Exploiting {{Common Patterns}} for {{Tree}}-{{Structured Data}}},
  isbn = {978-1-4503-4197-4},
  url = {http://dl.acm.org/citation.cfm?doid=3035918.3035956},
  doi = {10.1145/3035918.3035956},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2017},
  pages = {883-896},
  author = {Wang, Zhiyi and Chen, Shimin},
  file = {/home/amos/Zotero/storage/FNMIZGLJ/Exploiting Common Patterns for Tree-Structured Data.pdf}
}

@inproceedings{zhangExtractingDatabasesDark2016,
  langid = {english},
  title = {Extracting {{Databases}} from {{Dark Data}} with {{DeepDive}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2904442},
  doi = {10.1145/2882903.2904442},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2016},
  pages = {847-859},
  author = {Zhang, Ce and Shin, Jaeho and RÃ©, Christopher and Cafarella, Michael and Niu, Feng},
  file = {/home/amos/Zotero/storage/R8YBBTTN/Extracting Databases from Dark Data with DeepDive.pdf}
}

@inproceedings{zengGOLAGeneralizedOnLine2015,
  langid = {english},
  title = {G-{{OLA}}: {{Generalized On}}-{{Line Aggregation}} for {{Interactive Analysis}} on {{Big Data}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2735381},
  doi = {10.1145/2723372.2735381},
  shorttitle = {G-{{OLA}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2015},
  pages = {913-918},
  author = {Zeng, Kai and Agarwal, Sameer and Dave, Ankur and Armbrust, Michael and Stoica, Ion},
  file = {/home/amos/Zotero/storage/IZNAYRH9/G-OLA - Generalized On-Line Aggregation for Interactive Analysis on Big Data.pdf}
}

@inproceedings{mottinGraphExplorationUsers2017,
  langid = {english},
  title = {Graph {{Exploration}}: {{From Users}} to {{Large Graphs}}},
  isbn = {978-1-4503-4197-4},
  url = {http://dl.acm.org/citation.cfm?doid=3035918.3054778},
  doi = {10.1145/3035918.3054778},
  shorttitle = {Graph {{Exploration}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2017},
  pages = {1737-1740},
  author = {Mottin, Davide and MÃ¼ller, Emmanuel},
  file = {/home/amos/Zotero/storage/GYYNB4WT/Graph Exploration - From Users to Large Graphs.pdf}
}

@inproceedings{kankanamgeGraphflowActiveGraph2017,
  langid = {english},
  title = {Graphflow: {{An Active Graph Database}}},
  isbn = {978-1-4503-4197-4},
  url = {http://dl.acm.org/citation.cfm?doid=3035918.3056445},
  doi = {10.1145/3035918.3056445},
  shorttitle = {Graphflow},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2017},
  pages = {1695-1698},
  author = {Kankanamge, Chathura and Sahu, Siddhartha and Mhedbhi, Amine and Chen, Jeremy and Salihoglu, Semih},
  file = {/home/amos/Zotero/storage/R6F3UJV9/Graphflow - An Active Graph Database.pdf}
}

@inproceedings{alagiannisH2OHandsfreeAdaptive2014,
  langid = {english},
  title = {{{H2O}}: A Hands-Free Adaptive Store},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2610502},
  doi = {10.1145/2588555.2610502},
  shorttitle = {{{H2O}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2014},
  pages = {1103-1114},
  author = {Alagiannis, Ioannis and Idreos, Stratos and Ailamaki, Anastasia},
  file = {/home/amos/Zotero/storage/FUAHYF4K/H2O - A Hands-free Adaptive Store.pdf}
}

@article{graefeImplementingSortingDatabase2006,
  langid = {english},
  title = {Implementing Sorting in Database Systems},
  volume = {38},
  issn = {03600300},
  url = {http://portal.acm.org/citation.cfm?doid=1132960.1132964},
  doi = {10.1145/1132960.1132964},
  number = {3},
  journaltitle = {ACM Computing Surveys},
  urldate = {2017-11-07},
  date = {2006-09-30},
  pages = {10-es},
  author = {Graefe, Goetz},
  file = {/home/amos/Zotero/storage/FGKFNV8Y/Implementing Sorting in Database Systems.pdf}
}

@inproceedings{zoumpatianosIndexingInteractiveExploration2014,
  langid = {english},
  title = {Indexing for Interactive Exploration of Big Data Series},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2610498},
  doi = {10.1145/2588555.2610498},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2014},
  pages = {1555-1566},
  author = {Zoumpatianos, Kostas and Idreos, Stratos and Palpanas, Themis},
  file = {/home/amos/Zotero/storage/9QRAKYLL/Indexing for Interactive Exploration of Big Data Series.pdf}
}

@book{jurgensIndexStructuresData2002,
  location = {{Berlin ; New York}},
  title = {Index Structures for Data Warehouses},
  isbn = {978-3-540-43368-2},
  pagetotal = {132},
  number = {1859},
  series = {Lecture Notes in Computer Science},
  publisher = {{Springer}},
  date = {2002},
  keywords = {Database design,Data warehousing},
  author = {JÃ¼rgens, Marcus},
  file = {/home/amos/Zotero/storage/33NN646Q/Index Structures for Data Warehouse.pdf}
}

@book{hoggIntroductionMathematicalStatistics2004,
  langid = {english},
  location = {{Beijing}},
  title = {Introduction to Mathematical Statistics = æ°çç»è®¡å­¦å¯¼è®º},
  isbn = {978-7-04-015557-0},
  publisher = {{Higher Education Press}},
  date = {2004},
  author = {Hogg, Robert V and Craig, Allen T},
  file = {/home/amos/Zotero/storage/JVZUR5DU/Introduction to Mathematical Statistics, Fifth Edition.pdf},
  note = {OCLC: 660357967}
}

@book{rossIntroductionProbabilityModels2010,
  location = {{Amsterdam ; Boston}},
  title = {Introduction to Probability Models},
  edition = {10th ed},
  isbn = {978-0-12-375686-2},
  pagetotal = {784},
  publisher = {{Academic Press}},
  date = {2010},
  keywords = {Probabilities},
  author = {Ross, Sheldon M.},
  file = {/home/amos/Zotero/storage/HKMHQKA3/Introduction to Probability Models, Tenth Edition.pdf},
  note = {OCLC: ocn444116127}
}

@collection{associationforcomputingmachineryProceedings2016International2016,
  langid = {english},
  title = {Proceedings of the 2016 {{International Conference}} on {{Management}} of {{Data}}.},
  isbn = {978-1-4503-3531-7},
  date = {2016},
  editor = {{Association for Computing Machinery} and {Special Interest Group on Management of Data}},
  file = {/home/amos/Zotero/storage/MJJ75FH5/iOLAP - Managing Uncertainty for Efficient Incremental OLAP.pdf},
  note = {OCLC: 994257745}
}

@collection{acmworkshoponwirelesstrafficmeasurementandmodelingPapersPresented20052005,
  langid = {english},
  location = {{Berkeley, Calif.}},
  title = {Papers Presented at the 2005 Workshop on Wireless Traffic Measurements and Modeling: {{Seattle}}, {{Washington}}, {{June}} 5, 2005},
  isbn = {978-1-931971-33-1},
  shorttitle = {Papers Presented at the 2005 Workshop on Wireless Traffic Measurements and Modeling},
  publisher = {{USENIX Association}},
  date = {2005},
  editor = {{ACM Workshop on Wireless Traffic Measurement and Modeling} and Papadopoulis, Maria and Papagiannaki, Dina and Papagiannaki, Konstantina and {USENIX Association} and {ACM SIGMOBILE} and {ACM Special Interest Group in Operating Systems} and {ACM Digital Library}},
  file = {/home/amos/Zotero/storage/IWFBB5KV/Just say NO to Paxos Overhead Replacing Consensus with Network Ordering.pdf},
  note = {OCLC: 437626779}
}

@inproceedings{leisMorseldrivenParallelismNUMAaware2014,
  langid = {english},
  title = {Morsel-Driven Parallelism: A {{NUMA}}-Aware Query Evaluation Framework for the Many-Core Age},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2610507},
  doi = {10.1145/2588555.2610507},
  shorttitle = {Morsel-Driven Parallelism},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2014},
  pages = {743-754},
  author = {Leis, Viktor and Boncz, Peter and Kemper, Alfons and Neumann, Thomas},
  file = {/home/amos/Zotero/storage/M5288VBD/Morsel-Driven Parallelism - A NUMA-Aware Query Evaluation Framework for the Many-Core Age.pdf}
}

@inproceedings{murrayNaiadTimelyDataflow2013,
  langid = {english},
  title = {Naiad: A Timely Dataflow System},
  isbn = {978-1-4503-2388-8},
  url = {http://dl.acm.org/citation.cfm?doid=2517349.2522738},
  doi = {10.1145/2517349.2522738},
  shorttitle = {Naiad},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2013},
  pages = {439-455},
  author = {Murray, Derek G. and McSherry, Frank and Isaacs, Rebecca and Isard, Michael and Barham, Paul and Abadi, MartÃ­n},
  file = {/home/amos/Zotero/storage/KIGIGKRD/Naiad - A Timely Dataflow System.pdf}
}

@book{edbtAdvancesDatabaseTechnology2015,
  langid = {english},
  location = {{Konstanz}},
  title = {Advances in Database Technology - {{EDBT}} 2015 18th {{International Conference}} on {{Extending Database Technology}}, {{Brussels}}, {{Belgium}}, {{March}} 23-27, 2015: Proceedings},
  isbn = {978-3-89318-067-7},
  url = {http://openproceedings.org/html/pages/2015_edbt.html},
  shorttitle = {Advances in Database Technology - {{EDBT}} 2015 18th {{International Conference}} on {{Extending Database Technology}}, {{Brussels}}, {{Belgium}}, {{March}} 23-27, 2015},
  publisher = {{University of Konstanz, University Library}},
  urldate = {2017-11-07},
  date = {2015},
  author = {{EDBT} and Alonso, Gustav and {International Conference on Extending Database Technology} and {EDBT}},
  file = {/home/amos/Zotero/storage/ZYD5S2JX/Online Data Partitioning in Distributed Database Systems.pdf},
  note = {OCLC: 951739373}
}

@inproceedings{dehneParallelRealTimeOLAP2012,
  title = {Parallel {{Real}}-{{Time OLAP}} on {{Multi}}-Core {{Processors}}},
  isbn = {978-1-4673-1395-7 978-0-7695-4691-9},
  url = {http://ieeexplore.ieee.org/document/6217470/},
  doi = {10.1109/CCGrid.2012.19},
  publisher = {{IEEE}},
  urldate = {2017-11-07},
  date = {2012-05},
  pages = {588-594},
  author = {Dehne, Frank and Zaboli, Hamdireza},
  file = {/home/amos/Zotero/storage/4D87XY6K/Parallel Real-Time OLAP on Multi-Core Processors.pdf}
}

@inproceedings{cuiAxosMadeTransparent2015,
  langid = {english},
  title = {P {\textsc{Axos}} Made Transparent},
  isbn = {978-1-4503-3834-9},
  url = {http://dl.acm.org/citation.cfm?doid=2815400.2815427},
  doi = {10.1145/2815400.2815427},
  shorttitle = {P},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2015},
  pages = {105-120},
  author = {Cui, Heming and Gu, Rui and Liu, Cheng and Chen, Tianyu and Yang, Junfeng},
  file = {/home/amos/Zotero/storage/MEMTZQJ3/PAXOS Made Transparent.pdf}
}

@book{pascucciPDEMartingaleMethods2011,
  location = {{Milano}},
  title = {{{PDE}} and {{Martingale Methods}} in {{Option Pricing}}},
  isbn = {978-88-470-1780-1 978-88-470-1781-8},
  url = {http://link.springer.com/10.1007/978-88-470-1781-8},
  series = {Bocconi \& {{Springer Series}}},
  publisher = {{Springer Milan}},
  urldate = {2017-11-07},
  date = {2011},
  author = {Pascucci, Andrea},
  editorb = {Salsa, Sandro and Favero, Carlo A. and MÃ¼ller, Peter and Peccati, Lorenzo and Platen, Eckhard and Runggaldier, Wolfgang J.},
  editorbtype = {redactor},
  file = {/home/amos/Zotero/storage/E35PETN6/PDE and Martingale Methods in Option Pricing.pdf},
  doi = {10.1007/978-88-470-1781-8}
}

@inproceedings{arbelPredicateRCURCU2015,
  langid = {english},
  title = {Predicate {{RCU}}: An {{RCU}} for Scalable Concurrent Updates},
  isbn = {978-1-4503-3205-7},
  url = {http://dl.acm.org/citation.cfm?doid=2688500.2688518},
  doi = {10.1145/2688500.2688518},
  shorttitle = {Predicate {{RCU}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2015},
  pages = {21-30},
  author = {Arbel, Maya and Morrison, Adam},
  file = {/home/amos/Zotero/storage/AFWC7JU2/Predicate RCU - An RCU for Scalable Concurrent Updates.pdf}
}

@book{bernsteinPrinciplesTransactionProcessing2009,
  location = {{Burlington, MA}},
  title = {Principles of Transaction Processing},
  edition = {2nd ed},
  isbn = {978-1-55860-623-4},
  pagetotal = {378},
  series = {The {{Morgan Kaufmann}} Series in Data Management Systems},
  publisher = {{Morgan Kaufmann Publishers}},
  date = {2009},
  keywords = {Transaction systems (Computer systems)},
  author = {Bernstein, Philip A. and Newcomer, Eric},
  file = {/home/amos/Zotero/storage/52ETASXP/Principles of Transactional Processing.pdf},
  note = {OCLC: ocn301534813}
}

@inproceedings{polychroniouRethinkingSIMDVectorization2015,
  langid = {english},
  title = {Rethinking {{SIMD Vectorization}} for {{In}}-{{Memory Databases}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2747645},
  doi = {10.1145/2723372.2747645},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2015},
  pages = {1493-1508},
  author = {Polychroniou, Orestis and Raghavan, Arun and Ross, Kenneth A.},
  file = {/home/amos/Zotero/storage/C8ND4TZI/Rethinking SIMD Vectorization for In-Memory Databases.pdf}
}

@article{cormodeSynopsesMassiveData2011,
  langid = {english},
  title = {Synopses for {{Massive Data}}: {{Samples}}, {{Histograms}}, {{Wavelets}}, {{Sketches}}},
  volume = {4},
  issn = {1931-7883, 1931-7891},
  url = {http://www.nowpublishers.com/article/Details/DBS-004},
  doi = {10.1561/1900000004},
  shorttitle = {Synopses for {{Massive Data}}},
  number = {1-3},
  journaltitle = {Foundations and Trends in Databases},
  urldate = {2017-11-07},
  date = {2011},
  pages = {1-294},
  author = {Cormode, Graham},
  file = {/home/amos/Zotero/storage/ZZBJ7KVG/Synopses for Massive Data - Samples, Histograms, Wavelets, Sketches.pdf}
}

@article{larsargeBufferTreeTechnique2003,
  langid = {english},
  title = {The {{Buffer Tree}}: {{A Technique}} for {{Designing Batched External Data Structures}}},
  volume = {37},
  issn = {0178-4617, 1432-0541},
  url = {http://link.springer.com/10.1007/s00453-003-1021-x},
  doi = {10.1007/s00453-003-1021-x},
  shorttitle = {The {{Buffer Tree}}},
  number = {1},
  journaltitle = {Algorithmica},
  urldate = {2017-11-07},
  date = {2003-09},
  pages = {1-24},
  author = {{Lars Arge}},
  file = {/home/amos/Zotero/storage/L3YQJLJ7/The Buffer Tree - A Technique for Designing Batched External Data Structures.pdf}
}

@inproceedings{zaschkePHtreeSpaceefficientStorage2014,
  langid = {english},
  title = {The {{PH}}-Tree: A Space-Efficient Storage Structure and Multi-Dimensional Index},
  isbn = {978-1-4503-2376-5},
  url = {http://dl.acm.org/citation.cfm?doid=2588555.2588564},
  doi = {10.1145/2588555.2588564},
  shorttitle = {The {{PH}}-Tree},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2014},
  pages = {397-408},
  author = {ZÃ¤schke, Tilmann and Zimmerli, Christoph and Norrie, Moira C.},
  file = {/home/amos/Zotero/storage/P2VFD7DC/The PH-Tree â A Space-Efficient Storage Structure and Multi-Dimensional Index.pdf}
}

@inproceedings{kumarJoinNotJoin2016,
  langid = {english},
  title = {To {{Join}} or {{Not}} to {{Join}}?: {{Thinking Twice}} about {{Joins}} before {{Feature Selection}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2882952},
  doi = {10.1145/2882903.2882952},
  shorttitle = {To {{Join}} or {{Not}} to {{Join}}?},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2016},
  pages = {19-34},
  author = {Kumar, Arun and Naughton, Jeffrey and Patel, Jignesh M. and Zhu, Xiaojin},
  file = {/home/amos/Zotero/storage/MKHUJ8NB/To Join or Not to Join.pdf}
}

@inproceedings{chenRealTimeDataWarehousing2010,
  title = {Towards {{Near Real}}-{{Time Data Warehousing}}},
  isbn = {978-1-4244-6695-5},
  url = {http://ieeexplore.ieee.org/document/5474842/},
  doi = {10.1109/AINA.2010.54},
  publisher = {{IEEE}},
  urldate = {2017-11-07},
  date = {2010},
  pages = {1150-1157},
  author = {Chen, Li and Rahayu, Wenny and Taniar, David},
  file = {/home/amos/Zotero/storage/5FI4GRLD/Towards Near Real-Time Data Warehousing.pdf}
}

@inproceedings{athanassoulisUpBitScalableInMemory2016,
  langid = {english},
  title = {{{UpBit}}: {{Scalable In}}-{{Memory Updatable Bitmap Indexing}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2915964},
  doi = {10.1145/2882903.2915964},
  shorttitle = {{{UpBit}}},
  publisher = {{ACM Press}},
  urldate = {2017-11-07},
  date = {2016},
  pages = {1319-1332},
  author = {Athanassoulis, Manos and Yan, Zheng and Idreos, Stratos},
  file = {/home/amos/Zotero/storage/RAMIWQVZ/UpBit - Scalable In-Memory Updatable Bitmap Indexing.pdf}
}

@unpublished{HyPerOneDBMS,
  title = {{{HyPer}} - {{One DBMS}} for {{All}}.Pdf},
  file = {/home/amos/Zotero/storage/LLN7SQKG/HyPer - One DBMS for All.pdf}
}

@inproceedings{navarroGraphDBStoringLarge2014,
  langid = {english},
  title = {{{GraphDB}} â {{Storing Large Graphs}} on {{Secondary Memory}}},
  isbn = {978-3-319-01863-8},
  abstract = {The volume of complex network data has been exponentially increased in the last years madding graph mining area the focus of a lot of research efforts. Most algorithms for mining this kind of data assume, however, that the complex network fits in primary memory. Unfortunately, such assumption is not always true. Even considering that, in some cases, using big computer clusters (in a MapReduce fashion, for instance) might be a suitable way to circumvent part of the difficulties of mining big data, efficiently storing and retrieving complex network data is still a great challenge. Thus the main goal of this work is to introduce the definition of a new data structure, called GraphDB-tree that can be used to efficiently store and retrieve complex networks, and also, allowing efficient queries in large complex networks.},
  booktitle = {New {{Trends}} in {{Databases}} and {{Information Systems}}},
  series = {Advances in {{Intelligent Systems}} and {{Computing}}},
  publisher = {{Springer International Publishing}},
  date = {2014},
  pages = {177-186},
  keywords = {Complex Network,Graph Database,Large Graph,Link Prediction,Query Time},
  author = {Navarro, Lucas Fonseca and Appel, Ana Paula and Junior, Estevam Rafael Hruschka},
  editor = {Catania, Barbara and Cerquitelli, Tania and Chiusano, Silvia and Guerrini, Giovanna and KÃ¤mpf, Mirko and Kemper, Alfons and Novikov, Boris and Palpanas, Themis and PokornÃ½, Jaroslav and Vakali, Athena},
  file = {/home/amos/Zotero/storage/G645IQ8T/Navarro et al_2014_GraphDB â Storing Large Graphs on Secondary Memory.pdf}
}

@inproceedings{shun2013ligra,
  title = {Ligra: A Lightweight Graph Processing Framework for Shared Memory},
  volume = {48},
  booktitle = {{{ACM Sigplan Notices}}},
  date = {2013},
  pages = {135-146},
  author = {Shun, Julian and Blelloch, Guy E},
  number = {8},
  organization = {{ACM}}
}

@online{Neo4j2017,
  title = {Neo4j},
  url = {https://neo4j.com},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{ArangoDB2017,
  title = {{{ArangoDB}}},
  url = {https://www.arangodb.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{GraphDB2017,
  title = {{{GraphDB}}},
  url = {https://www.ontotext.com/products/graphdb/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{TigerGraph2017,
  title = {{{TigerGraph}}},
  url = {https://www.tigergraph.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{AllegroGraph2017,
  title = {{{AllegroGraph}}},
  url = {https://franz.com/agraph/allegrograph/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{OrientDB2017c,
  title = {{{OrientDB}}},
  url = {https://orientdb.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{JanusGraph2017,
  title = {{{JanusGraph}}},
  url = {http://janusgraph.org/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{Virtuoso2017,
  title = {Virtuoso},
  url = {https://virtuoso.openlinksw.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{DataStax2017,
  title = {{{DataStax}}},
  url = {https://www.datastax.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{SPARQL2017,
  title = {{{SPARQL}}},
  url = {https://en.wikipedia.org/wiki/SPARQL},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{Stardog2017,
  title = {Stardog},
  url = {https://www.stardog.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{Blazegraph2017,
  title = {Blazegraph},
  url = {https://www.blazegraph.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{SparkGraphX2017,
  title = {Spark {{GraphX}}},
  url = {https://spark.apache.org/graphx/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{ApacheGiraph2017,
  title = {Apache {{Giraph}}},
  url = {http://giraph.apache.org/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@incollection{de_virgilio_virtuoso:_2010,
  langid = {english},
  location = {{Berlin, Heidelberg}},
  title = {Virtuoso: {{RDF Support}} in a {{Native RDBMS}}},
  isbn = {978-3-642-04328-4 978-3-642-04329-1},
  url = {http://link.springer.com/10.1007/978-3-642-04329-1_21},
  shorttitle = {Virtuoso},
  publisher = {{Springer Berlin Heidelberg}},
  date = {2010},
  pages = {501-519},
  author = {Erling, Orri and Mikhailov, Ivan},
  editor = {de Virgilio, Roberto and Giunchiglia, Fausto and Tanca, Letizia},
  options = {useprefix=true},
  doi = {10.1007/978-3-642-04329-1_21}
}

@inproceedings{sun_sqlgraph:_2015,
  langid = {english},
  title = {{{SQLGraph}}: {{An Efficient Relational}}-{{Based Property Graph Store}}},
  isbn = {978-1-4503-2758-9},
  url = {http://dl.acm.org/citation.cfm?doid=2723372.2723732},
  doi = {10.1145/2723372.2723732},
  shorttitle = {{{SQLGraph}}},
  publisher = {{ACM Press}},
  date = {2015},
  pages = {1887-1901},
  author = {Sun, Wen and Fokoue, Achille and Srinivas, Kavitha and Kementsietsidis, Anastasios and Hu, Gang and Xie, Guotong},
  venue = {Melbourne, Victoria, Australia}
}

@inproceedings{fan_case_2015,
  title = {The {{Case Against Specialized Graph Analytics Engines}}},
  abstract = {Graph analytic processing has started to become a nearly ubiquitous component in the enterprise data analytics ecosystem. In response to this growing need, various specialized graph processing engines have been created in recent years. Sadly, the use of relational database management systems (RDBMSs) for graph processing is largely ignored in most enterprise settings. This oversight is surprising since in most enterprise settings, RDBMSs are already present and used for a variety of other analytic tasks. This situation then begs the question of whether the use of RDBMS for graph processing is fundamentally lacking in some respect compared to the specialized graph processing engines. In this paper, we aim to address this question both from the programmer productivity perspective and from the performance perspective. We present Grail â a syntactic layer for querying graph in a vertex-centric way in an RDBMS, which can be compiled to translate graph queries to SQL. In a single node setting, we also compare Grail to GraphLab and Giraph, and examine the performance implications of using Grail, showing that the RDBMS engine is competitive to these specialized engines. Given that RDBMSs are ubiquitous in enterprise settings, and have a robust and mature technology that has been hardened over decades, and are part of existing administrative methods in place, we argue that it is time to reconsider if specialized graph engines have a role to play in most enterprises.},
  date = {2015},
  keywords = {SQL,Compiler,Graph (abstract data type),Programmer,Programming productivity,Relational database management system},
  author = {Fan, Jing and Raj, Adalbert Gerald Soosai and Patel, Jignesh M.}
}

@inproceedings{wilkinson_efficient_2003,
  title = {Efficient {{RDF Storage}} and {{Retrieval}} in {{Jena2}}},
  url = {http://dl.acm.org/citation.cfm?id=2889905.2889914},
  abstract = {RDF and related Semantic Web technologies have been the recent focus of much research activity. This work has led to new specifications for RDF and OWL. However, efficient implementations of these standards are needed to realize the vision of a world-wide semantic Web. In particular, implementations that scale to large, enterprise-class data sets are required. Jena2 is the second generation of Jena, a leading semantic web programmers' toolkit. This paper describes the persistence subsystem of Jena2 which is intended to support large datasets. This paper describes its features, the changes from Jena1, relevant details of the implementation and performance tuning issues. Query optimization for RDF is identified as a promising area for future research.},
  series = {{{SWDB}}'03},
  publisher = {{CEUR-WS.org}},
  date = {2003},
  pages = {120-139},
  author = {Wilkinson, Kevin and Sayers, Craig and Kuno, Harumi and Reynolds, Dave},
  venue = {Aachen, Germany, Germany}
}

@inproceedings{abadi_scalable_2007,
  title = {Scalable {{Semantic Web Data Management Using Vertical Partitioning}}},
  isbn = {978-1-59593-649-3},
  url = {http://dl.acm.org/citation.cfm?id=1325851.1325900},
  abstract = {Efficient management of RDF data is an important factor in realizing the Semantic Web vision. Performance and scalability issues are becoming increasingly pressing as Semantic Web technology is applied to real-world applications. In this paper, we examine the reasons why current data management solutions for RDF data scale poorly, and explore the fundamental scalability limitations of these approaches. We review the state of the art for improving performance for RDF databases and consider a recent suggestion, "property tables." We then discuss practically and empirically why this solution has undesirable features. As an improvement, we propose an alternative solution: vertically partitioning the RDF data. We compare the performance of vertical partitioning with prior art on queries generated by a Web-based RDF browser over a large-scale (more than 50 million triples) catalog of library data. Our results show that a vertical partitioned schema achieves similar performance to the property table technique while being much simpler to design. Further, if a column-oriented DBMS (a database architected specially for the vertically partitioned case) is used instead of a row-oriented DBMS, another order of magnitude performance improvement is observed, with query times dropping from minutes to several seconds.},
  series = {{{VLDB}} '07},
  publisher = {{VLDB Endowment}},
  date = {2007},
  pages = {411-422},
  author = {Abadi, Daniel J. and Marcus, Adam and Madden, Samuel R. and Hollenbach, Kate},
  venue = {Vienna, Austria}
}

@inproceedings{bornea_building_2013,
  title = {Building an Efficient {{RDF}} Store over a Relational Database},
  isbn = {978-1-4503-2037-5},
  url = {http://dl.acm.org/citation.cfm?id=2463676.2463718},
  doi = {10.1145/2463676.2463718},
  publisher = {{ACM}},
  date = {2013-06},
  pages = {121-132},
  author = {Bornea, Mihaela A. and Dolby, Julian and Kementsietsidis, Anastasios and Srinivas, Kavitha and Dantressangle, Patrick and Udrea, Octavian and Bhattacharjee, Bishwaranjan}
}

@inproceedings{jindal_graph_2015,
  title = {Graph Analytics Using Vertica Relational Database},
  isbn = {978-1-4799-9926-2},
  url = {http://ieeexplore.ieee.org/document/7363873/},
  doi = {10.1109/BigData.2015.7363873},
  publisher = {{IEEE}},
  date = {2015-10},
  pages = {1191-1200},
  author = {Jindal, Alekh and Madden, Samuel and Castellanos, Malu and Hsu, Meichun},
  venue = {Santa Clara, CA, USA}
}

@article{noauthor_neo4j_nodate,
  langid = {english},
  title = {Neo4j: {{https://neo4j.com/}}},
  url = {https://neo4j.com/},
  abstract = {Meet Neo4j: The graph database platform powering today's mission-critical enterprise applications, including artificial intelligence, fraud detection and recommendations.}
}

@article{noauthor_multi-model_nodate,
  langid = {american},
  title = {{{ArangoDB}}: {{https://www.arangodb.com/}}},
  url = {https://www.arangodb.com/},
  abstract = {ArangoDB is an easy to use mostly memory, high performance, open source NoSQL database with a unique combination of features.}
}

@article{noauthor_janusgraph:_nodate,
  title = {{{JanusGraph}}: {{http://janusgraph.org/}}},
  url = {http://janusgraph.org/},
  abstract = {JanusGraph: Distributed graph database}
}

@article{noauthor_graph_nodate,
  langid = {english},
  title = {{{OrientDB}}: {{https://orientdb.com/}}},
  url = {https://orientdb.com/},
  abstract = {OrientDB - The World's First Distributed Multi-Model NoSQL Database with a Graph Database Engine. OrientDB ignited the Multi-Model movement in 2011 with its invention of a new generation Distributed NoSQL engine capable of working with Graph, Document, Key-Value, GeoSpatial and Reactive models.}
}

@inproceedings{shun_ligra:_2013,
  langid = {english},
  title = {Ligra: A Lightweight Graph Processing Framework for Shared Memory},
  isbn = {978-1-4503-1922-5},
  url = {http://dl.acm.org/citation.cfm?doid=2442516.2442530},
  doi = {10.1145/2442516.2442530},
  shorttitle = {Ligra},
  publisher = {{ACM Press}},
  date = {2013},
  pages = {135},
  author = {Shun, Julian and Blelloch, Guy E.},
  venue = {Shenzhen, China}
}

@inproceedings{zhu_gemini:_2016,
  title = {Gemini: {{A Computation}}-Centric {{Distributed Graph Processing System}}},
  isbn = {978-1-931971-33-1},
  url = {http://dl.acm.org/citation.cfm?id=3026877.3026901},
  shorttitle = {Gemini},
  abstract = {Traditionally distributed graph processing systems have largely focused on scalability through the optimizations of inter-node communication and load balance. However, they often deliver unsatisfactory overall processing efficiency compared with shared-memory graph computing frameworks. We analyze the behavior of several graph-parallel systems and find that the added overhead for achieving scalability becomes a major limiting factor for efficiency, especially with modern multi-core processors and high-speed interconnection networks. Based on our observations, we present Gemini, a distributed graph processing system that applies multiple optimizations targeting computation performance to build scalability on top of efficiency. Gemini adopts (1) a sparse-dense signal-slot abstraction to extend the hybrid push-pull computation model from shared-memory to distributed scenarios, (2) a chunk-based partitioning scheme enabling low-overhead scaling out designs and locality-preserving vertex accesses, (3) a dual representation scheme to compress accesses to vertex indices, (4) NUMA-aware sub-partitioning for efficient intra-node memory accesses, plus (5) locality-aware chunking and fine-grained work-stealing for improving both internode and intra-node load balance, respectively. Our evaluation on an 8-node high-performance cluster (using five widely used graph applications and five real-world graphs) shows that Gemini significantly outperforms all well-known existing distributed graph processing systems, delivering up to 39.8Ã (from 8.91Ã) improvement over the fastest among them.},
  series = {{{OSDI}}'16},
  publisher = {{USENIX Association}},
  date = {2016},
  pages = {301-316},
  author = {Zhu, Xiaowei and Chen, Wenguang and Zheng, Weimin and Ma, Xiaosong},
  venue = {Berkeley, CA, USA}
}

@inproceedings{aberger_emptyheaded:_2016,
  langid = {english},
  title = {{{EmptyHeaded}}: {{A Relational Engine}} for {{Graph Processing}}},
  isbn = {978-1-4503-3531-7},
  url = {http://dl.acm.org/citation.cfm?doid=2882903.2915213},
  doi = {10.1145/2882903.2915213},
  shorttitle = {{{EmptyHeaded}}},
  publisher = {{ACM Press}},
  date = {2016},
  pages = {431-446},
  author = {Aberger, Christopher R. and Tu, Susan and Olukotun, Kunle and RÃ©, Christopher},
  venue = {San Francisco, California, USA}
}

@article{sundaram_graphmat:_2015,
  langid = {english},
  title = {{{GraphMat}}: High Performance Graph Analytics Made Productive},
  volume = {8},
  issn = {21508097},
  url = {http://dl.acm.org/citation.cfm?doid=2809974.2809983},
  doi = {10.14778/2809974.2809983},
  shorttitle = {{{GraphMat}}},
  number = {11},
  journaltitle = {Proceedings of the VLDB Endowment},
  date = {2015-07},
  pages = {1214-1225},
  author = {Sundaram, Narayanan and Satish, Nadathur and Patwary, Md Mostofa Ali and Dulloor, Subramanya R. and Anderson, Michael J. and Vadlamudi, Satya Gautam and Das, Dipankar and Dubey, Pradeep}
}

@inproceedings{grossman_making_2018,
  langid = {english},
  title = {Making Pull-Based Graph Processing Performant},
  isbn = {978-1-4503-4982-6},
  url = {http://dl.acm.org/citation.cfm?doid=3178487.3178506},
  doi = {10.1145/3178487.3178506},
  publisher = {{ACM Press}},
  date = {2018},
  pages = {246-260},
  author = {Grossman, Samuel and Litz, Heiner and Kozyrakis, Christos},
  venue = {Vienna, Austria}
}

@inproceedings{blumofe_cilk:_1995,
  langid = {english},
  title = {Cilk: An Efficient Multithreaded Runtime System},
  url = {http://portal.acm.org/citation.cfm?doid=209936.209958},
  doi = {10.1145/209936.209958},
  shorttitle = {Cilk},
  publisher = {{ACM Press}},
  date = {1995},
  pages = {207-216},
  author = {Blumofe, Robert D. and Joerg, Christopher F. and Kuszmaul, Bradley C. and Leiserson, Charles E. and Randall, Keith H. and Zhou, Yuli},
  venue = {Santa Barbara, California, United States}
}

@inproceedings{zhang_numa-aware_2015,
  langid = {english},
  title = {{{NUMA}}-Aware Graph-Structured Analytics},
  isbn = {978-1-4503-3205-7},
  url = {http://dl.acm.org/citation.cfm?doid=2688500.2688507},
  doi = {10.1145/2688500.2688507},
  publisher = {{ACM Press}},
  date = {2015},
  pages = {183-193},
  author = {Zhang, Kaiyuan and Chen, Rong and Chen, Haibo},
  venue = {San Francisco, CA, USA}
}

@inproceedings{nguyen_lightweight_2013,
  langid = {english},
  title = {A Lightweight Infrastructure for Graph Analytics},
  isbn = {978-1-4503-2388-8},
  url = {http://dl.acm.org/citation.cfm?doid=2517349.2522739},
  doi = {10.1145/2517349.2522739},
  publisher = {{ACM Press}},
  date = {2013},
  pages = {456-471},
  author = {Nguyen, Donald and Lenharth, Andrew and Pingali, Keshav},
  venue = {Farminton, Pennsylvania}
}

@inproceedings{zhang2017making,
  title = {Making Caches Work for Graph Analytics},
  booktitle = {Big {{Data}} ({{Big Data}}), 2017 {{IEEE International Conference}} On},
  date = {2017},
  pages = {293-302},
  author = {Zhang, Yunming and Kiriansky, Vladimir and Mendis, Charith and Amarasinghe, Saman and Zaharia, Matei},
  organization = {{IEEE}}
}

@inproceedings{gonzalez2012powergraph,
  title = {Powergraph: Distributed Graph-Parallel Computation on Natural Graphs.},
  volume = {12},
  booktitle = {{{OSDI}}},
  date = {2012},
  pages = {2},
  author = {Gonzalez, Joseph E and Low, Yucheng and Gu, Haijie and Bickson, Danny and Guestrin, Carlos},
  number = {1}
}

@article{shams2017graph,
  title = {Graph-Based Collaborative Ranking},
  volume = {67},
  journaltitle = {Expert Systems with Applications},
  date = {2017},
  pages = {59-70},
  author = {Shams, Bita and Haratizadeh, Saman},
  publisher = {{Elsevier}}
}

@online{AgensGraph2017,
  title = {{{AgensGraph}}},
  url = {https://bitnine.net/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{CosmosDB2017,
  title = {{{CosmosDB}}},
  url = {https://docs.microsoft.com/en-us/azure/cosmos-db/introduction},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{AmazonNeptune2017,
  title = {Amazon {{Neptune}}},
  url = {https://aws.amazon.com/neptune/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{OraclePGX2017,
  title = {Oracle {{PGX}}},
  url = {https://www.oracle.com/technetwork/oracle-labs/parallel-graph-analytix},
  urldate = {2016-11-23},
  date = {2017-03-20}
}

@online{Sparksee2017,
  title = {Sparksee},
  url = {http://www.sparsity-technologies.com/},
  urldate = {2016-11-23},
  date = {2017-03-20}
}


