[General]
plugin_priority=itemimage, itemsync, itemtext, itemtags, itemnotes, itemencrypted, itemfakevim, itempinned, itemweb

[Commands]
1\Command="copyq:\nvar filter_ = '^image/.*'\nif (filter() == filter_)\n  filter('')\nelse\n  filter(filter_)"
1\Icon=\xf1c5
1\InMenu=true
1\Name=Filter Images
1\Shortcut=ctrl+i
10\Command="copyq:\nvar code = str(input())\nvar data = fromBase64(code)\nremoveData(mimeText)\nsetData(\"text/plain\", data)"
10\Icon=\xf121
10\InMenu=true
10\Input=text/plain
10\Name=Decode Base64
10\Shortcut=ctrl+b
11\Command="copyq:\nvar app = 'chromium'\nvar fileTemplate = Dir().temp().absoluteFilePath('copyq-XXXXXX.html')\nvar item = selectedItemData(0)\n\nvar file = TemporaryFile()\nfile.setFileTemplate(fileTemplate)\nfile.openWriteOnly()\nfile.write(input())\nfile.close()\nvar filePath = file.fileName()\n\nhide()\nexecute(app, filePath)"
11\InMenu=true
11\Input=text/plain
11\Name=Open HTML
11\Shortcut=ctrl+o
12\Command="copyq:\nvar shortcut = str(data(mimeShortcut))\nif (shortcut == 'ctrl+j')\n  selectItems(currentItem() + 1)\nelse if (shortcut == 'ctrl+k')\n  selectItems(currentItem() - 1)"
12\Icon=\xf002
12\InMenu=true
12\Name=Next/Previous Found Item
12\Shortcut=ctrl+j, ctrl+k
13\Automatic=true
13\Command="copyq:\nvar clipboardMode = str(input())\nif (clipboardMode == 'selection')\n  ignore()"
13\Enable=false
13\Icon=\xf05e
13\Input=application/x-copyq-clipboard-mode
13\Name=Ignore Selection from IDEA
13\Window=IDEA
14\Command="copyq:\nvar suffices = {\n  'image/svg': 'svg',\n  'image/png': 'png',\n  'image/jpeg': 'jpg',\n  'image/jpg': 'jpg',\n  'image/bmp': 'bmp',\n  'text/html': 'html',\n  'text/plain' : 'txt',\n}\n\nfunction hasSuffix(fileName)\n{\n  return /\\.[0-9a-zA-z]+$/.test(fileName);\n}\n\nfunction addSuffix(fileName, format)\n{\n  var suffix = suffices[format]\n  return suffix ? fileName + \".\" + suffix : fileName\n}\n\nfunction filterFormats(format)\n{\n  return /^[a-z]/.test(format) && !/^application\\/x/.test(format)\n}\n\nfunction itemFormats(row)\n{\n  return str(read('?', row))\n    .split('\\n')\n    .filter(filterFormats)\n}\n\nfunction formatPriority(format)\n{\n  var k = Object.keys(suffices);\n  var i = k.indexOf(format);\n  return i === -1 ? k.length : i\n}\n\nfunction reorderFormats(formats)\n{\n  formats.sort(function(lhs, rhs){\n    var i = formatPriority(lhs);\n    var j = formatPriority(rhs);\n    return i === j ? lhs.localeCompare(rhs) : i - j;\n  })\n}\n\nif (selectedtab()) tab(selectedtab())\nvar row = selectedtab() ? currentitem() : -1\nvar formats = itemFormats(row)\nreorderFormats(formats)\n\ncurrentpath(Dir().homePath())\nvar defaultFileName = 'untitled'\n\nvar keyFormat = 'Format'\nvar keyFileName = 'File'\nvar defaultFormat = formats[0]\n\nvar result = dialog(\n  '.title', 'Save Item As...',\n  '.width', 250,\n  keyFormat, [defaultFormat].concat(formats),\n  keyFileName, File(defaultFileName)\n) || abort()\n\nvar fileName = result[keyFileName]\nvar format = result[keyFormat]\n\nif (!format || !fileName)\n  abort()\n\nif (!hasSuffix(fileName))\n  fileName = addSuffix(fileName, format)\n\nvar f = File(fileName)\nif (!f.open()) {\n  popup('Failed to open \"' + f.fileName() + '\"', f.errorString())\n  abort()\n}\n\nf.write(selectedtab() ? getitem(currentitem())[format] : clipboard(format))\npopup(\"Item Saved\", 'Item saved as \"' + f.fileName() + '\".')"
14\Icon=\xf0c7
14\InMenu=true
14\Name=Save As...
15\Command=copyq: plugins.itemencrypted.encryptItems()
15\Icon=\xf023
15\InMenu=true
15\Input=!OUTPUT
15\Name=Encrypt (needs GnuPG)
15\Output=application/x-copyq-encrypted
16\Command=copyq: plugins.itemencrypted.decryptItems()
16\Icon=\xf09c
16\InMenu=true
16\Input=application/x-copyq-encrypted
16\Name=Decrypt
16\Output=application/x-copyq-item
17\Command=copyq: plugins.itemencrypted.copyEncryptedItems()
17\Icon=\xf13e
17\InMenu=true
17\Input=application/x-copyq-encrypted
17\Name=Decrypt and Copy
18\Command=copyq: plugins.itemencrypted.pasteEncryptedItems()
18\Icon=\xf13e
18\InMenu=true
18\Input=application/x-copyq-encrypted
18\Name=Decrypt and Paste
19\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
19\Icon=\xf02b
19\InMenu=true
19\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
19\Name=Tag as \x201cImportant\x201d
2\Command="global.copyImage = function(image) {\n    var imageDir = Dir().homePath() + '/Pictures/Screenshots/'\n    var imageFileName = 'copied-' + dateString('yyyy-MM-dd-HH_mm_ss_zzz') + '.png'\n    var imagePath = imageDir + imageFileName\n\n    if (!Dir().mkpath(imageDir)) {\n      popup('Failed to create directory for images')\n      abort()\n    }\n\n    var f = new File(imagePath)\n    if (!f.openWriteOnly() || f.write(image) == -1) {\n      popup('Failed to save image', f.errorString())\n      abort()\n    }\n    f.close()\n\n    notes = [\n      '[[file:' + imagePath + ']]',\n      imagePath\n    ]\n    uri = 'file://' + imagePath\n\n    args = [\n      \"image/png\", image,\n      mimeItemNotes, notes.join('\\n'),\n      mimeText, imagePath,\n      mimeUriList, uri,\n    ]\n\n    copy.apply(this, args)\n    copySelection.apply(this, args)\n    write.apply(this, args)\n}\n"
2\IsScript=true
2\Name=copyImage
20\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
20\Icon=\xf02b
20\InMenu=true
20\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
20\Name=Remove tag \x201cImportant\x201d
21\Command=copyq: plugins.itemtags.tag()
21\Icon=\xf02b
21\InMenu=true
21\Name=Add a Tag
22\Command=copyq: plugins.itemtags.untag()
22\Icon=\xf02b
22\InMenu=true
22\Input=application/x-copyq-tags
22\Name=Remove a Tag
23\Command=copyq: plugins.itemtags.clearTags()
23\Icon=\xf02b
23\InMenu=true
23\Input=application/x-copyq-tags
23\Name=Clear all tags
24\Command=copyq: plugins.itempinned.pin()
24\Icon=\xf08d
24\InMenu=true
24\Input=!OUTPUT
24\Name=Pin
24\Output=application/x-copyq-item-pinned
25\Command=copyq: plugins.itempinned.unpin()
25\Icon=\xf08d
25\InMenu=true
25\Input=application/x-copyq-item-pinned
25\Name=Unpin
3\Command="copyq:\nhide()\nselect(index())\n//copy(mimeItems, input())\nsleep(50)\nif (currentWindowTitle().match(/^FreeRDP/))\n  sleep(200)\npaste()\nfilter('')"
3\Icon=\xf0ea
3\InMenu=true
3\Input=application/x-copyq-item
3\Name=Paste with delay
3\Shortcut=enter
4\Command="copyq:\nvar app = 'upload'\nvar fileTemplate = Dir().temp().absoluteFilePath('copyq-XXXXXX')\nvar file = TemporaryFile()\nvar formats = dataFormats()\n\nfile.setFileTemplate(fileTemplate)\nfile.openWriteOnly()\nif (formats.indexOf(\"image/png\") > -1) {\n    file.write(data(\"image/png\"))\n    app = 'uploadimg'\n} else if (data(\"text/plain\").size() > 0)\n    file.write(data(\"text/plain\"))\nelse {\n    popup('nothing uploaded')\n    abort()\n}\nfile.close()\nfilePath = file.fileName()\nhide()\nexecute(app, filePath)\n"
4\Icon=\xf03e
4\InMenu=true
4\Input=application/x-copyq-item
4\Name=Upload
4\Shortcut=ctrl+u
5\Command="global.copyUriList = function(text) {\n  var paths = str(text).split('\\n')\n  var plain = []\n  var encoded = []\n  var prefix = 'file://'\n  for (var i in paths) {\n    var path = paths[i]\n    if (path && File(path).exists() && plain.indexOf(prefix + path) === -1) {\n      plain.push(prefix + path)\n      encoded.push(prefix + encodeURI(path))\n    }\n  }\n\n  args = [\n    mimeText, text,\n    mimeUriList, plain.join('\\r\\n'),\n    'application/x-kde4-urilist', encoded.join('\\r\\n')\n  ]\n\n  copy.apply(this, args)\n  copySelection.apply(this, args)\n  write.apply(this, args)\n}\n"
5\Icon=\xf56e
5\IsScript=true
5\Name=copyUriList
6\Automatic=true
6\Command="copyq:\nvar dictionary = {\n  '\x201d': '\"',\n  '\x201c': '\"',\n  '\x2019': '\\'',\n  '\x2018': '\\'',\n  '\x2212': '-',\n}\n\nvar text = str(input())\nvar newText = text.replace(/./g, function(c) {\n    return dictionary[c] || c\n  })\nif (text != newText) {\n    popup('sanitized', 'some quote or dash characters got replaced')\n    removeData(mimeText)\n    setData(\"text/plain\", newText)\n    copy(newText)\n    copySelection(newText)\n}"
6\Icon=\xf120
6\InMenu=true
6\Input=text/plain
6\Name=Sanitize current item
6\Shortcut=ctrl+s
7\Automatic=true
7\Command="copyq:\n\nvar imageDir = Dir().homePath() + '/Pictures/Screenshots/'\nvar imageFileName = 'copied-' + dateString('yyyy-MM-dd-HH_mm_ss_zzz') + '.png'\nvar imagePath = imageDir + '/' + imageFileName\n\nif (!Dir().mkpath(imageDir)) {\n  popup('Failed to create directory for images')\n  abort()\n}\n\nvar f = new File(imagePath)\nif (!f.openWriteOnly() || f.write(input()) == -1) {\n  popup('Failed to save image', f.errorString())\n  abort()\n}\nf.close()\n\nnotes = [\n  '[[file:' + imagePath + ']]',\n  imagePath\n]\nuri = 'file://' + imagePath\nsetData(mimeItemNotes, notes.join('\\n'))\nsetData(mimeUriList, uri)\n//setData(mimeText, imagePath)\n//copy(\"image/png\", input())"
7\Icon=\xf03e
7\Input=image/png
7\Name=Save Copied Images
8\Command="copyq:\nshortcut = str(data(mimeShortcut))\n\nnotes = str(data(mimeItemNotes)).split('\\n')\nnoteIndex = shortcut.indexOf('shift') == 0 ? 0 : 1\n\ncopy(mimeText, notes[noteIndex])\ncopySelection(mimeText, notes[noteIndex])\npaste()"
8\HideWindow=true
8\Icon=\xf15c
8\InMenu=true
8\Input=image/png
8\Name=Paste Image with Tag
8\Shortcut=shift+return, ctrl+return
9\Automatic=true
9\Command="copyq:\nvar code = str(input())\nvar match = code.match(/^data:([^;]+);base64,(.+)/)\nvar format = match[1]\nvar base64 = match[2]\nvar data = fromBase64(base64)\nremoveData(mimeText)\nsetData(format, data)"
9\Enable=false
9\Icon=\xf121
9\Input=text/plain
9\Match="^data:[^;]+;base64,.."
9\Name=Decode Base64 Picture
size=25

[Options]
action_has_input=false
action_has_output=false
action_output_tab=
action_separator=\\n
activate_closes=true
activate_focuses=true
activate_pastes=true
always_on_top=true
autocompletion=true
autostart=false
check_clipboard=true
check_selection=true
clipboard_notification_lines=0
clipboard_tab=&clipboard
close_on_unfocus=true
command_history_size=100
confirm_exit=false
copy_clipboard=true
copy_selection=true
disable_tray=false
edit_ctrl_return=true
editor=eeee %1
expire_tab=0
filter_history=
hide_main_window=true
hide_tabs=true
hide_toolbar=true
hide_toolbar_labels=true
item_popup_interval=0
language=en
maxitems=9999
move=true
notification_horizontal_offset=10
notification_maximum_height=300
notification_maximum_width=1200
notification_position=3
notification_vertical_offset=10
number_search=false
open_windows_on_current_screen=true
save_filter_history=false
show_advanced_command_settings=true
show_simple_items=false
show_tab_item_count=true
tab_tree=true
tabs=&clipboard
text_wrap=true
transparency=0
transparency_focused=0
tray_commands=false
tray_images=true
tray_item_paste=true
tray_items=20
tray_tab=
tray_tab_is_current=false
vi=false

[Plugins]
itemdata\enabled=true
itemencrypted\enabled=true
itemfakevim\enabled=true
itemfakevim\really_enable=true
itemfakevim\source_file=/home/amos/.fakevimrc
itemimage\enabled=true
itemimage\image_editor=copyqimage.sh
itemimage\max_image_height=240
itemimage\max_image_width=320
itemimage\svg_editor=inkscape
itemnotes\enabled=true
itemnotes\notes_at_bottom=false
itemnotes\notes_beside=false
itemnotes\show_tooltip=false
itempinned\enabled=true
itemsync\enabled=true
itemsync\format_settings=@Invalid()
itemsync\sync_tabs=@Invalid()
itemtags\enabled=true
itemtext\enabled=true
itemtext\max_height=0
itemtext\max_lines=0
itemtext\use_rich_text=false
itemweb\enabled=true

[Shortcuts]
about=shift+f1
change_tab_icon=ctrl+shift+t
commands=f6
copy_selected_items=ctrl+c
delete_item=ctrl+d
edit=f2
edit_notes=ctrl+shift+e
editor=ctrl+e
exit=ctrl+q
export=ctrl+shift+o
export_tab=ctrl+s
find_items=f3
format-next=ctrl+right
format-previous=ctrl+left
help=f1
import=ctrl+shift+i
import_tab=ctrl+i
item-menu=shift+f10
move_down=ctrl+down
move_to_bottom=ctrl+end
move_to_clipboard=ctrl+v
move_to_top=
move_up=ctrl+up
new=ctrl+n
new_tab=ctrl+t
next_tab=right
paste_selected_items=
preferences=ctrl+p
previous_tab=left
process_manager=ctrl+shift+z
remove_tab=ctrl+w
rename_tab=ctrl+f2
reverse_selected_items=ctrl+shift+r
show-log=f12
show_clipboard_content=ctrl+shift+c
show_item_content=f4
show_item_preview=f7
sort_selected_items=ctrl+shift+s
system-run=f5
toggle_clipboard_storing=ctrl+shift+x

[Theme]
alt_bg=#383838
alt_item_css=
bg=#4b4b4b
css=QMenuBar{height:0}
cur_item_css="\n    ;border: 0.1em solid ${sel_bg}"
edit_bg=#4b4b4b
edit_fg=#bcbcbc
edit_font="Ubuntu Mono,12,-1,5,50,0,0,0,0,0"
fg=#bcbcbc
find_bg=#00689c
find_fg=#ffffff
find_font="Ubuntu Mono,12,-1,5,50,0,0,0,0,0"
font="Ubuntu Mono,12,-1,5,50,0,0,0,0,0"
font_antialiasing=true
item_css=
item_spacing=
menu_bar_css="\n    ;background: ${bg}\n    ;color: ${fg}"
menu_bar_disabled_css="\n    ;color: ${bg - #666}"
menu_bar_selected_css="\n    ;background: ${sel_bg}\n    ;color: ${sel_fg}"
menu_css="\n    ;border-top: 0.08em solid ${bg + #333}\n    ;border-left: 0.08em solid ${bg + #333}\n    ;border-bottom: 0.08em solid ${bg - #333}\n    ;border-right: 0.08em solid ${bg - #333}"
notes_bg=#ffffff
notes_css=
notes_fg=#232323
notes_font="Ubuntu Mono,12,-1,5,50,0,0,0,0,0"
notification_bg=#333
notification_fg=#ddd
notification_font="Ubuntu Mono,12,-1,5,50,0,0,0,0,0"
num_fg=#7f7f7f
num_font="Ubuntu,7,-1,5,25,0,0,0,0,0"
search_bar="\n    ;background: ${edit_bg}\n    ;color: ${edit_fg}\n    ;border: 1px solid ${alt_bg}\n    ;margin: 2px"
search_bar_focused="\n    ;border: 1px solid ${sel_bg}"
sel_bg=#61819c
sel_fg=#ffffff
sel_item_css=
show_number=true
show_scrollbars=false
style_main_window=true
tab_bar_css="\n    ;background: ${bg - #222}"
tab_bar_item_counter="\n    ;color: ${fg - #044 + #400}\n    ;font-size: 6pt"
tab_bar_scroll_buttons_css="\n    ;background: ${bg - #222}\n    ;color: ${fg}\n    ;border: 0"
tab_bar_sel_item_counter="\n    ;color: ${sel_bg - #044 + #400}"
tab_bar_tab_selected_css="\n    ;padding: 0.5em\n    ;background: ${bg}\n    ;border: 0.05em solid ${bg}\n    ;color: ${fg}"
tab_bar_tab_unselected_css="\n    ;border: 0.05em solid ${bg}\n    ;padding: 0.5em\n    ;background: ${bg - #222}\n    ;color: ${fg - #333}"
tab_tree_css="\n    ;color: ${fg}\n    ;background-color: ${bg}"
tab_tree_item_counter="\n    ;color: ${fg - #044 + #400}\n    ;font-size: 6pt"
tab_tree_sel_item_counter="\n    ;color: ${sel_fg - #044 + #400}"
tab_tree_sel_item_css="\n    ;color: ${sel_fg}\n    ;background-color: ${sel_bg}\n    ;border-radius: 2px"
tool_bar_css="\n    ;color: ${fg}\n    ;background-color: ${bg}\n    ;border: 0"
tool_button_css="\n    ;background-color: transparent"
tool_button_pressed_css="\n    ;background: ${sel_bg}"
tool_button_selected_css="\n    ;background: ${sel_bg}\n    ;color: ${sel_fg}"
use_system_icons=false
