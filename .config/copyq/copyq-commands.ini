[Commands]
1\Command="copyq:\nvar inputStr = str(input()).trim();\nvar tokens = inputStr.split(/[^0-9]+/);\n\nfunction pad(n) { return n < 10 ? '0' + n : n }\n\nfunction tryConvertTs(token) {\n    if (!/^[0-9]{10,13}$/.test(token)) {\n        return null; // ÃÂ¤ÃÂ¸ÃÂÃÂ§ÃÂ¬ÃÂ¦ÃÂ¥ÃÂÃÂÃÂ¦ÃÂÃÂ¶ÃÂ©ÃÂÃÂ´ÃÂ¦ÃÂÃÂ³ÃÂ¦ ÃÂ¼ÃÂ¥ÃÂ¼ÃÂ\n    }\n    var ts = parseInt(token);\n    if (ts > 1e12) ts = Math.floor(ts / 1000);\n\n    var date = new Date((ts + 8 * 3600) * 1000);\n\n    var formatted = date.getUTCFullYear() + '-' +\n                    pad(date.getUTCMonth() + 1) + '-' +\n                    pad(date.getUTCDate()) + ' ' +\n                    pad(date.getUTCHours()) + ':' +\n                    pad(date.getUTCMinutes()) + ':' +\n                    pad(date.getUTCSeconds());\n    return formatted;\n}\n\nvar resultTokens = tokens.map(function(t) {\n    var converted = tryConvertTs(t);\n    if (converted !== null) {\n        return \"'\" + converted + \"'\";\n    } else {\n        return t;\n    }\n});\n\nvar finalStr = resultTokens.join(' ');\n\nremoveData(mimeText)\nsetData(\"text/plain\", finalStr)\npopup(finalStr)"
1\InMenu=true
1\Input=text/plain
1\Name=Global Timestamp to Datetime (UTC+8)
1\Shortcut=ctrl+t
10\Command="copyq:\nhide()\nselect(index()) // move to top\nshortcut = str(data(mimeShortcut))\nif (shortcut !== \"\") {\n    n = shortcut.slice(-1)\n    select(n)\n} else {\n    copy(mimeItems, input())\n}\nsleep(50)\nif (currentWindowTitle().match(/^FreeRDP/))\n  sleep(200)\npaste()\nfilter('')\nselectItems(0)"
10\InMenu=true
10\Input=application/x-copyq-item
10\Name=Paste with delay
10\Shortcut=enter, alt+1, alt+2, alt+3, alt+4, alt+5, alt+6, alt+7, alt+8, alt+9
11\Command="global.fillText = function(text) {\n  const oldText = getItem(0)\n  copy(text);\n  paste();\n  sleep(300);\n  copy(oldText);\n}"
11\Icon=Ã¯ÂÂ®
11\IsScript=true
11\Name=fillText
12\Command="copyq:\nvar app = 'upload'\nvar fileTemplate = Dir().temp().absoluteFilePath('copyq-XXXXXX')\nvar file = TemporaryFile()\nvar formats = dataFormats()\n\nfile.setFileTemplate(fileTemplate)\nfile.openWriteOnly()\nif (formats.indexOf(\"image/png\") > -1) {\n    file.write(data(\"image/png\"))\n} else if (data(\"text/plain\").size() > 0)\n    file.write(data(\"text/plain\"))\nelse {\n    popup('nothing uploaded')\n    abort()\n}\nfile.close()\nfilePath = file.fileName()\nhide()\nexecute(app, filePath)\n"
12\Icon=Ã¯ÂÂ¾
12\InMenu=true
12\Input=application/x-copyq-item
12\Name=Upload
12\Shortcut=ctrl+u
13\Command="global.copyUriList = function(text) {\n  var paths = str(text).split('\\n')\n  var plain = []\n  var encoded = []\n  var prefix = 'file://'\n  for (var i in paths) {\n    var path = paths[i]\n    if (path && File(path).exists() && plain.indexOf(prefix + path) === -1) {\n      plain.push(prefix + path)\n      encoded.push(prefix + encodeURI(path))\n    }\n  }\n\n  args = [\n    mimeText, text,\n    mimeUriList, plain.join('\\r\\n'),\n    'application/x-kde4-urilist', encoded.join('\\r\\n')\n  ]\n\n  copy.apply(this, args)\n  copySelection.apply(this, args)\n  write.apply(this, args)\n}\n"
13\Icon=Ã¯ÂÂ®
13\IsScript=true
13\Name=copyUriList
14\Automatic=true
14\Command="copyq:\nvar dictionary = {\n  'Ã¢ÂÂ': '\"',\n  'Ã¢ÂÂ': '\"',\n  'Ã¢ÂÂ': '\\'',\n  'Ã¢ÂÂ': '\\'',\n  'Ã¢ÂÂ': '-',\n}\n\nvar text = str(input())\nvar newText = text.replace(/./g, function(c) {\n    return dictionary[c] || c\n  }).replace(/\\nÃ¯Â¿Â¼.*$/m, \"\")\n// if (newText2 != newText) {\n//     newText = newText2.trim()\n// }\n\nif (text != newText) {\n    popup('sanitized', 'some quote or dash characters got replaced')\n    removeData(mimeText)\n    setData(\"text/plain\", newText)\n    copy(newText)\n    copySelection(newText)\n}"
14\Enable=false
14\Icon=Ã¯ÂÂ 
14\InMenu=true
14\Input=text/plain
14\Name=Sanitize current item
14\Shortcut=ctrl+s
15\Automatic=true
15\Command="copyq:\n\nvar imageDir = Dir().homePath() + '/Pictures/Screenshots/'\nvar imageFileName = 'copied-' + dateString('yyyy-MM-dd-HH_mm_ss_zzz') + '.png'\nvar imagePath = imageDir + '/' + imageFileName\n\nif (!Dir().mkpath(imageDir)) {\n  popup('Failed to create directory for images')\n  abort()\n}\n\nvar f = new File(imagePath)\nif (!f.openWriteOnly() || f.write(input()) == -1) {\n  popup('Failed to save image', f.errorString())\n  abort()\n}\nf.close()\n\nnotes = [\n  '[[file:' + imagePath + ']]',\n  imagePath\n]\nuri = 'file://' + imagePath\nsetData(mimeItemNotes, notes.join('\\n'))\nsetData(mimeUriList, uri)\n//setData(mimeText, imagePath)\n//copy(\"image/png\", input())"
15\Icon=Ã¯ÂÂ¾
15\Input=image/png
15\Name=Save Copied Images
16\Command="copyq:\nshortcut = str(data(mimeShortcut))\n\nnotes = str(data(mimeItemNotes)).split('\\n')\nnoteIndex = shortcut.indexOf('shift') == 0 ? 0 : 1\n\ncopy(mimeText, notes[noteIndex])\ncopySelection(mimeText, notes[noteIndex])\npaste()"
16\HideWindow=true
16\Icon=Ã¯ÂÂ
16\InMenu=true
16\Input=image/png
16\Name=Paste Image with Tag
16\Shortcut=shift+return, ctrl+return
17\Automatic=true
17\Command="copyq:\nvar code = str(input())\nvar match = code.match(/^data:([^;]+);base64,(.+)/)\nvar format = match[1]\nvar base64 = match[2]\nvar data = fromBase64(base64)\nremoveData(mimeText)\nsetData(format, data)"
17\Enable=false
17\Icon=Ã¯ÂÂ¡
17\Input=text/plain
17\Match="^data:[^;]+;base64,.."
17\Name=Decode Base64 Picture
18\Command="copyq:\nvar code = str(input())\nvar data = fromBase64(code)\nremoveData(mimeText)\nsetData(\"text/plain\", data)"
18\Icon=Ã¯ÂÂ¡
18\InMenu=true
18\Input=text/plain
18\Name=Decode Base64
18\Shortcut=ctrl+b
19\Command="copyq:\nvar app = 'luakit'\nvar fileTemplate = Dir().temp().absoluteFilePath('copyq-XXXXXX.html')\nvar item = selectedItemData(0)\n\nvar file = TemporaryFile()\nfile.setFileTemplate(fileTemplate)\nfile.openWriteOnly()\nfile.write(input())\nfile.close()\nvar filePath = file.fileName()\n\nhide()\nexecute(app, filePath)"
19\InMenu=true
19\Input=text/plain
19\Name=Open HTML
19\Shortcut=ctrl+o
2\Command="copyq:\nvar item = str(input()).trim()\n\n// Check if it looks like a timestamp\nif (!/^[0-9]{10,13}$/.test(item)) {\n    abort()\n}\n\nvar ts = parseInt(item)\n\n// If in milliseconds, convert to seconds\nif (ts > 1e12) ts = Math.floor(ts / 1000)\n\n// Create date in UTC+8 (Asia/Shanghai)\nvar date = new Date((ts + 8 * 3600) * 1000)\n\nfunction pad(n) { return n < 10 ? '0' + n : n }\n\nvar formatted = date.getUTCFullYear() + '-' +\n                pad(date.getUTCMonth() + 1) + '-' +\n                pad(date.getUTCDate()) + ' ' +\n                pad(date.getUTCHours()) + ':' +\n                pad(date.getUTCMinutes()) + ':' +\n                pad(date.getUTCSeconds())\n\nremoveData(mimeText)\nsetData(\"text/plain\", formatted)\npopup(formatted)"
2\Enable=false
2\Icon=clock
2\InMenu=true
2\Input=text/plain
2\Name=Timestamp to Datetime (UTC+8)
2\Shortcut=ctrl+t
20\Automatic=true
20\Command="copyq:\nvar clipboardMode = str(input())\nif (clipboardMode == 'selection')\n  ignore()"
20\Enable=false
20\Icon=Ã¯ÂÂ
20\Input=application/x-copyq-clipboard-mode
20\Name=Ignore Selection from IDEA
20\Window=IDEA
21\Command="copyq:\nvar suffices = {\n  'image/svg': 'svg',\n  'image/png': 'png',\n  'image/jpeg': 'jpg',\n  'image/jpg': 'jpg',\n  'image/bmp': 'bmp',\n  'text/html': 'html',\n  'text/plain' : 'txt',\n}\n\nfunction hasSuffix(fileName)\n{\n  return /\\.[0-9a-zA-z]+$/.test(fileName);\n}\n\nfunction addSuffix(fileName, format)\n{\n  var suffix = suffices[format]\n  return suffix ? fileName + \".\" + suffix : fileName\n}\n\nfunction filterFormats(format)\n{\n  return /^[a-z]/.test(format) && !/^application\\/x/.test(format)\n}\n\nfunction itemFormats(row)\n{\n  return str(read('?', row))\n    .split('\\n')\n    .filter(filterFormats)\n}\n\nfunction formatPriority(format)\n{\n  var k = Object.keys(suffices);\n  var i = k.indexOf(format);\n  return i === -1 ? k.length : i\n}\n\nfunction reorderFormats(formats)\n{\n  formats.sort(function(lhs, rhs){\n    var i = formatPriority(lhs);\n    var j = formatPriority(rhs);\n    return i === j ? lhs.localeCompare(rhs) : i - j;\n  })\n}\n\nif (selectedtab()) tab(selectedtab())\nvar row = selectedtab() ? currentitem() : -1\nvar formats = itemFormats(row)\nreorderFormats(formats)\n\ncurrentpath(Dir().homePath())\nvar defaultFileName = 'untitled'\n\nvar keyFormat = 'Format'\nvar keyFileName = 'File'\nvar defaultFormat = formats[0]\n\nvar result = dialog(\n  '.title', 'Save Item As...',\n  '.width', 250,\n  keyFormat, [defaultFormat].concat(formats),\n  keyFileName, File(defaultFileName)\n) || abort()\n\nvar fileName = result[keyFileName]\nvar format = result[keyFormat]\n\nif (!format || !fileName)\n  abort()\n\nif (!hasSuffix(fileName))\n  fileName = addSuffix(fileName, format)\n\nvar f = File(fileName)\nif (!f.open()) {\n  popup('Failed to open \"' + f.fileName() + '\"', f.errorString())\n  abort()\n}\n\nf.write(selectedtab() ? getitem(currentitem())[format] : clipboard(format))\npopup(\"Item Saved\", 'Item saved as \"' + f.fileName() + '\".')"
21\Icon=Ã¯ÂÂ
21\InMenu=true
21\Name=Save As...
22\Command=copyq: plugins.itemencrypted.encryptItems()
22\Icon=Ã¯ÂÂ£
22\InMenu=true
22\Input=!OUTPUT
22\Name=Encrypt (needs GnuPG)
22\Output=application/x-copyq-encrypted
23\Command=copyq: plugins.itemencrypted.decryptItems()
23\Icon=Ã¯ÂÂ
23\InMenu=true
23\Input=application/x-copyq-encrypted
23\Name=Decrypt
23\Output=application/x-copyq-item
24\Command=copyq: plugins.itemencrypted.copyEncryptedItems()
24\Icon=Ã¯ÂÂ¾
24\InMenu=true
24\Input=application/x-copyq-encrypted
24\Name=Decrypt and Copy
25\Command=copyq: plugins.itemencrypted.pasteEncryptedItems()
25\Icon=Ã¯ÂÂ¾
25\InMenu=true
25\Input=application/x-copyq-encrypted
25\Name=Decrypt and Paste
26\Command=copyq: plugins.itemtags.tag(decodeURIComponent('Important'))
26\Enable=false
26\Icon=Ã¯ÂÂ«
26\InMenu=true
26\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) && fail()
26\Name=Tag as Ã¢ÂÂImportantÃ¢ÂÂ
27\Command=copyq: plugins.itemtags.untag(decodeURIComponent('Important'))
27\Enable=false
27\Icon=Ã¯ÂÂ«
27\InMenu=true
27\MatchCommand=copyq: plugins.itemtags.hasTag(decodeURIComponent('Important')) || fail()
27\Name=Remove tag Ã¢ÂÂImportantÃ¢ÂÂ
28\Command=copyq: plugins.itemtags.tag()
28\Icon=Ã¯ÂÂ«
28\InMenu=true
28\Name=Add a Tag
29\Command=copyq: plugins.itemtags.untag()
29\Icon=Ã¯ÂÂ«
29\InMenu=true
29\Input=application/x-copyq-tags
29\Name=Remove a Tag
3\Command="copyq:\nhide()\nexecute('joinwemeet', data(\"text/plain\"))\n"
3\Icon=Ã¯ÂÂ¾
3\InMenu=true
3\Input=application/x-copyq-item
3\Name=JoinWeMeet
3\Shortcut=ctrl+2
30\Command=copyq: plugins.itemtags.clearTags()
30\Icon=Ã¯ÂÂ«
30\InMenu=true
30\Input=application/x-copyq-tags
30\Name=Clear all tags
31\Command=copyq: plugins.itempinned.pin()
31\Icon=Ã¯ÂÂ
31\InMenu=true
31\Input=!OUTPUT
31\Name=Pin
31\Output=application/x-copyq-item-pinned
32\Command=copyq: plugins.itempinned.unpin()
32\Icon=Ã¯ÂÂ
32\InMenu=true
32\Input=application/x-copyq-item-pinned
32\Name=Unpin
4\Command="var originalFunction = global.clipboardFormatsToSave\nglobal.clipboardFormatsToSave = function() {\n    return originalFunction().concat([\n        mimeUriList,\n        'x-special/gnome-copied-files',\n        'application/x-kde-cutselection',\n    ])\n}"
4\Icon=Ã¯ÂÂ
4\IsScript=true
4\Name=Store File Manager Metadata
5\Command="copyq:\nvar formats = dataFormats()\nif (formats.indexOf(\"text/uri-list\") > -1) {\n    hide()\n    open(data(\"text/uri-list\"))\n}\n"
5\Icon=Ã¯ÂÂ¾
5\InMenu=true
5\Input=application/x-copyq-item
5\Name=OpenFile
5\Shortcut=ctrl+o
6\Command="/*\n\nExports items from a tab to given directory:\n\n  copyq 'exportJSON(\"./exported/\")'\n  copyq tab url 'exportJSON(\"./url/\")'\n\n*/\n\nfunction fromData(data)\n{\n  var text = str(data)\n  if ( data.equals(new ByteArray(text)) ) {\n    if (text.indexOf('\\\\n') == -1)\n      return text\n    return { lines: text.split('\\\\n') }\n  }\n  return { base64: toBase64(data) }\n}\n\nglobal.exportJSON = function(path) {\n  var indentation = '    '\n\n  var dir = new Dir(path)\n\n  if ( !dir.mkpath('.') )\n    throw 'Failed to create directory: ' + path\n\n  for (row = 0; row < count(); ++row) {\n    var itemData = getItem(row)\n\n    var item = {}\n    for (var format in itemData)\n      item[format] = fromData(itemData[format])\n\n    var file = new File(dir.filePath(row + '.json'))\n    if ( !file.openWriteOnly() )\n      throw 'Failed to open file: ' + file.fileName()\n\n    var json = JSON.stringify(item, null, indentation)\n    if ( file.write(json) == -1 )\n      throw 'Failed to write file: ' + file.fileName()\n  }\n}"
6\Icon=Ã¯ÂÂ¸
6\IsScript=true
6\Name=exportJSON()
7\Command="global.synchronizeFromSelection = function() {\n    provideClipboard()\n}\n\nglobal.synchronizeToSelection = function() {\n    provideSelection()\n}"
7\Enable=false
7\Icon=Ã¯ÂÂ¡
7\IsScript=true
7\Name=Simpler Selection Sync
8\Command="copyq:\nvar filter_ = '^image/.*'\nif (filter() == filter_)\n  filter('')\nelse\n  filter(filter_)"
8\Icon=Ã¯ÂÂ
8\InMenu=true
8\Name=Filter Images
8\Shortcut=ctrl+i
9\Command="global.copyImage = function(image) {\n    var imageDir = Dir().homePath() + '/Pictures/Screenshots/'\n    var imageFileName = 'copied-' + dateString('yyyy-MM-dd-HH_mm_ss_zzz') + '.png'\n    var imagePath = imageDir + imageFileName\n\n    if (!Dir().mkpath(imageDir)) {\n      popup('Failed to create directory for images')\n      abort()\n    }\n\n    var f = new File(imagePath)\n    if (!f.openWriteOnly() || f.write(image) == -1) {\n      popup('Failed to save image', f.errorString())\n      abort()\n    }\n    f.close()\n\n    notes = [\n      '[[file:' + imagePath + ']]',\n      imagePath\n    ]\n    uri = 'file://' + imagePath\n\n    args = [\n      \"image/png\", image,\n      mimeItemNotes, notes.join('\\n'),\n      // mimeText, imagePath,\n      mimeUriList, uri,\n    ]\n\n    copy.apply(this, args)\n    copySelection.apply(this, args)\n    write.apply(this, args)\n}\n"
9\IsScript=true
9\Name=copyImage
size=32
