#!/usr/bin/env bash

if [[ "$1" == deb || "$1" == llvm-debug ]]
then
   mkdir -p debug && pushd debug || exit 1
else
   mkdir -p release && pushd release || exit 1
fi

if [[ "$1" == install ]]; then
    ninja && sudo ninja install
else
    target=..
    case "$1" in
    llvm)
        target=../llvm
        cmake_args=(
            -DLLVM_TARGETS_TO_BUILD='X86'
            -DLLVM_CCACHE_BUILD=1
            -DLLVM_ENABLE_PROJECTS='clang;libcxx;libcxxabi;compiler-rt;lld'
            -DCMAKE_BUILD_TYPE=Release
            -DLLVM_BUILD_LLVM_DYLIB=1
            -DCMAKE_CXX_FLAGS='-D_GLIBCXX_USE_CXX11_ABI=1'
        )
        ;;
    llvm-debug)
        target=../llvm
        cmake_args=(
            -DLLVM_TARGETS_TO_BUILD='X86'
            -DLLVM_CCACHE_BUILD=1
            -DLLVM_ENABLE_PROJECTS='clang;libcxx;libcxxabi;compiler-rt;lld'
            -DCMAKE_BUILD_TYPE=Debug
            -DLLVM_BUILD_LLVM_DYLIB=1
            -DCMAKE_CXX_FLAGS='-D_GLIBCXX_USE_CXX11_ABI=1'
        )
        ;;
    ccls)
        cmake_args=(
            -DCMAKE_BUILD_TYPE=RelWithDebInfo
            -DUSE_SHARED_LLVM=On
            -DCMAKE_PREFIX_PATH="$HOME/git/llvm-project/release;$HOME/git/llvm-project/release/tools/clang;$HOME/git/llvm-project/llvm;$HOME/git/llvm-project/clang"
        )

        ;;
    ccls-debug)
        cmake_args=(
            -DCMAKE_BUILD_TYPE=Debug
            -DUSE_SHARED_LLVM=On
            -DCMAKE_PREFIX_PATH="$HOME/git/llvm-project/release;$HOME/git/llvm-project/release/tools/clang;$HOME/git/llvm-project/llvm;$HOME/git/llvm-project/clang"
        )
        ;;
    obs)
        cmake_args=(
            -DUNIX_STRUCTURE=0
        )
        ;;
    deb)
        cmake_args=(
            -DCMAKE_BUILD_TYPE=Debug
        )
        ;;
    folly)
        cmake_args=(
            -DBUILD_SHARED_LIBS=1
        )
        ;;
    mtrace)
        cmake_args=(
            -DDISABLE_CLIENT=1
        )
        ;;
    *)
        cmake_args=(
            -DCMAKE_BUILD_TYPE=Release
        )
        ;;
    esac
    if cmake "$target" -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS=On "${cmake_args[@]}" && ninja; then
        [[ "$2" == install ]] && sudo "$(command -v ninja)" install
        [[ "$1" == llvm ]] && cd lib && ln -sf libLLVM-*.so libLLVM.so
    fi
fi

popd
ln -sf release/compile_commands.json .
