#!/usr/bin/env python

from libqtile.command.client import CommandClient
import sys, time

x = int(sys.argv[1])

import subprocess

process_check = subprocess.run(
    ["pgrep", "-f", "urxvt_scratchpad"], stdout=subprocess.PIPE
)

if process_check.returncode != 0:
    subprocess.Popen(
        [
            "kitty",
            "-T",
            "urxvt_scratchpad",
            "bash",
            "-c",
            "env SHELL=/tmp/gentoo/bin/fish tmux -f /home/amos/.tmux/.tmux.conf.gui -L gui new -A -s gui",
        ]
    )
    time.sleep(0.2)  # Wait for wid file

with open("/tmp/urxvt_scratchpad", "r") as file:
    wid = int(file.read())
cmd_client = CommandClient()

obj = cmd_client.navigate("screen", None)
info = obj.call("info")
w = info["width"]
h = info["height"]
obj = cmd_client.navigate("group", None)
g = obj.call("info")["name"]

if x == 0:
    obj = cmd_client.navigate("group", "h")
    obj.call("toscreen")

    obj = cmd_client.navigate("window", wid)
    obj.call("togroup", "h")
    obj.call("disable_floating")
    obj.call("set_opacity", 1)
elif x == 1:
    # Right
    obj = cmd_client.navigate("window", wid)
    winfo = obj.call("info")
    wx = winfo["x"]
    wg = winfo["group"]
    wf = obj.call("eval", "self.has_focus")[1]

    if w / 2 == wx and wg == g and "True" == wf:
        obj.call("togroup", "scratchpad")
    else:
        obj.call("set_position_floating", w / 2, 0)
        obj.call("set_size_floating", w / 2, h)
        obj.call("set_opacity", 0.9)
        obj.call("toscreen")
        obj.call("focus")
elif x == 2:
    # Left
    obj = cmd_client.navigate("window", wid)
    winfo = obj.call("info")
    wx = winfo["x"]
    wg = winfo["group"]
    wf = obj.call("eval", "self.has_focus")[1]

    if 0 == wx and wg == g and "True" == wf:
        obj.call("togroup", "scratchpad")
    else:
        obj.call("set_position_floating", 0, 0)
        obj.call("set_size_floating", w / 2, h)
        obj.call("set_opacity", 0.9)
        obj.call("toscreen")
        obj.call("focus")
